
/Users/denver_pucker/FUSEMakerspace/IOT/ULTRASONIC_SENSOR/Grove-Ultrasonic-Ranger/target/5.9.0/p2/Grove-Ultrasonic-Ranger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb918  085fb0a8  0000b918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000046d8  023fb920  085fb0b0  0000b920  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ac84  085ff788  0001ac84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  1007acfc  1007acfc  0002acfc  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff800  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000007b4  085ff804  085ff804  0001f804  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f804  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001a6c89  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00019fbd  00000000  00000000  001c6c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00056fac  00000000  00000000  001e0c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003910  00000000  00000000  00237bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000f338  00000000  00000000  0023b502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fd6f  00000000  00000000  0024a83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00059045  00000000  00000000  0027a5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00145117  00000000  00000000  002d35ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a6f8  00000000  00000000  00418708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	4813      	ldr	r0, [pc, #76]	; (85fb068 <module_user_pre_init+0x50>)
 85fb01a:	4914      	ldr	r1, [pc, #80]	; (85fb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a13      	ldr	r2, [pc, #76]	; (85fb070 <module_user_pre_init+0x58>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b12      	ldr	r3, [pc, #72]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	4812      	ldr	r0, [pc, #72]	; (85fb078 <module_user_pre_init+0x60>)
 85fb030:	4a12      	ldr	r2, [pc, #72]	; (85fb07c <module_user_pre_init+0x64>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b12      	ldr	r3, [pc, #72]	; (85fb080 <module_user_pre_init+0x68>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fb03a:	4812      	ldr	r0, [pc, #72]	; (85fb084 <module_user_pre_init+0x6c>)
 85fb03c:	4912      	ldr	r1, [pc, #72]	; (85fb088 <module_user_pre_init+0x70>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a12      	ldr	r2, [pc, #72]	; (85fb08c <module_user_pre_init+0x74>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fb048:	4b0a      	ldr	r3, [pc, #40]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb04e:	4810      	ldr	r0, [pc, #64]	; (85fb090 <module_user_pre_init+0x78>)
 85fb050:	4910      	ldr	r1, [pc, #64]	; (85fb094 <module_user_pre_init+0x7c>)
 85fb052:	4288      	cmp	r0, r1
 85fb054:	d005      	beq.n	85fb062 <module_user_pre_init+0x4a>
 85fb056:	4a10      	ldr	r2, [pc, #64]	; (85fb098 <module_user_pre_init+0x80>)
 85fb058:	4282      	cmp	r2, r0
 85fb05a:	d002      	beq.n	85fb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb05c:	4b05      	ldr	r3, [pc, #20]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb05e:	1a12      	subs	r2, r2, r0
 85fb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb062:	4801      	ldr	r0, [pc, #4]	; (85fb068 <module_user_pre_init+0x50>)
 85fb064:	bd08      	pop	{r3, pc}
 85fb066:	bf00      	nop
 85fb068:	1007ac84 	.word	0x1007ac84
 85fb06c:	085ff788 	.word	0x085ff788
 85fb070:	1007acfc 	.word	0x1007acfc
 85fb074:	10110d2d 	.word	0x10110d2d
 85fb078:	1007acfc 	.word	0x1007acfc
 85fb07c:	1007affc 	.word	0x1007affc
 85fb080:	10110ea1 	.word	0x10110ea1
 85fb084:	023fb918 	.word	0x023fb918
 85fb088:	085fb0a8 	.word	0x085fb0a8
 85fb08c:	023fb920 	.word	0x023fb920
 85fb090:	023fb920 	.word	0x023fb920
 85fb094:	085fb0b0 	.word	0x085fb0b0
 85fb098:	023ffff8 	.word	0x023ffff8

085fb09c <dynalib_preinit>:
 85fb09c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb920 <__aeabi_drsub>:
 23fb920:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fb924:	e002      	b.n	23fb92c <__adddf3>
 23fb926:	bf00      	nop

023fb928 <__aeabi_dsub>:
 23fb928:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fb92c <__adddf3>:
 23fb92c:	b530      	push	{r4, r5, lr}
 23fb92e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fb932:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fb936:	ea94 0f05 	teq	r4, r5
 23fb93a:	bf08      	it	eq
 23fb93c:	ea90 0f02 	teqeq	r0, r2
 23fb940:	bf1f      	itttt	ne
 23fb942:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fb946:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fb94a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fb94e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb952:	f000 80e2 	beq.w	23fbb1a <__adddf3+0x1ee>
 23fb956:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fb95a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fb95e:	bfb8      	it	lt
 23fb960:	426d      	neglt	r5, r5
 23fb962:	dd0c      	ble.n	23fb97e <__adddf3+0x52>
 23fb964:	442c      	add	r4, r5
 23fb966:	ea80 0202 	eor.w	r2, r0, r2
 23fb96a:	ea81 0303 	eor.w	r3, r1, r3
 23fb96e:	ea82 0000 	eor.w	r0, r2, r0
 23fb972:	ea83 0101 	eor.w	r1, r3, r1
 23fb976:	ea80 0202 	eor.w	r2, r0, r2
 23fb97a:	ea81 0303 	eor.w	r3, r1, r3
 23fb97e:	2d36      	cmp	r5, #54	; 0x36
 23fb980:	bf88      	it	hi
 23fb982:	bd30      	pophi	{r4, r5, pc}
 23fb984:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb98c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fb990:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fb994:	d002      	beq.n	23fb99c <__adddf3+0x70>
 23fb996:	4240      	negs	r0, r0
 23fb998:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb99c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fb9a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb9a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fb9a8:	d002      	beq.n	23fb9b0 <__adddf3+0x84>
 23fb9aa:	4252      	negs	r2, r2
 23fb9ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fb9b0:	ea94 0f05 	teq	r4, r5
 23fb9b4:	f000 80a7 	beq.w	23fbb06 <__adddf3+0x1da>
 23fb9b8:	f1a4 0401 	sub.w	r4, r4, #1
 23fb9bc:	f1d5 0e20 	rsbs	lr, r5, #32
 23fb9c0:	db0d      	blt.n	23fb9de <__adddf3+0xb2>
 23fb9c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fb9c6:	fa22 f205 	lsr.w	r2, r2, r5
 23fb9ca:	1880      	adds	r0, r0, r2
 23fb9cc:	f141 0100 	adc.w	r1, r1, #0
 23fb9d0:	fa03 f20e 	lsl.w	r2, r3, lr
 23fb9d4:	1880      	adds	r0, r0, r2
 23fb9d6:	fa43 f305 	asr.w	r3, r3, r5
 23fb9da:	4159      	adcs	r1, r3
 23fb9dc:	e00e      	b.n	23fb9fc <__adddf3+0xd0>
 23fb9de:	f1a5 0520 	sub.w	r5, r5, #32
 23fb9e2:	f10e 0e20 	add.w	lr, lr, #32
 23fb9e6:	2a01      	cmp	r2, #1
 23fb9e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fb9ec:	bf28      	it	cs
 23fb9ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fb9f2:	fa43 f305 	asr.w	r3, r3, r5
 23fb9f6:	18c0      	adds	r0, r0, r3
 23fb9f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fb9fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fba00:	d507      	bpl.n	23fba12 <__adddf3+0xe6>
 23fba02:	f04f 0e00 	mov.w	lr, #0
 23fba06:	f1dc 0c00 	rsbs	ip, ip, #0
 23fba0a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fba0e:	eb6e 0101 	sbc.w	r1, lr, r1
 23fba12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fba16:	d31b      	bcc.n	23fba50 <__adddf3+0x124>
 23fba18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fba1c:	d30c      	bcc.n	23fba38 <__adddf3+0x10c>
 23fba1e:	0849      	lsrs	r1, r1, #1
 23fba20:	ea5f 0030 	movs.w	r0, r0, rrx
 23fba24:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fba28:	f104 0401 	add.w	r4, r4, #1
 23fba2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fba30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fba34:	f080 809a 	bcs.w	23fbb6c <__adddf3+0x240>
 23fba38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fba3c:	bf08      	it	eq
 23fba3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fba42:	f150 0000 	adcs.w	r0, r0, #0
 23fba46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fba4a:	ea41 0105 	orr.w	r1, r1, r5
 23fba4e:	bd30      	pop	{r4, r5, pc}
 23fba50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fba54:	4140      	adcs	r0, r0
 23fba56:	eb41 0101 	adc.w	r1, r1, r1
 23fba5a:	3c01      	subs	r4, #1
 23fba5c:	bf28      	it	cs
 23fba5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fba62:	d2e9      	bcs.n	23fba38 <__adddf3+0x10c>
 23fba64:	f091 0f00 	teq	r1, #0
 23fba68:	bf04      	itt	eq
 23fba6a:	4601      	moveq	r1, r0
 23fba6c:	2000      	moveq	r0, #0
 23fba6e:	fab1 f381 	clz	r3, r1
 23fba72:	bf08      	it	eq
 23fba74:	3320      	addeq	r3, #32
 23fba76:	f1a3 030b 	sub.w	r3, r3, #11
 23fba7a:	f1b3 0220 	subs.w	r2, r3, #32
 23fba7e:	da0c      	bge.n	23fba9a <__adddf3+0x16e>
 23fba80:	320c      	adds	r2, #12
 23fba82:	dd08      	ble.n	23fba96 <__adddf3+0x16a>
 23fba84:	f102 0c14 	add.w	ip, r2, #20
 23fba88:	f1c2 020c 	rsb	r2, r2, #12
 23fba8c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fba90:	fa21 f102 	lsr.w	r1, r1, r2
 23fba94:	e00c      	b.n	23fbab0 <__adddf3+0x184>
 23fba96:	f102 0214 	add.w	r2, r2, #20
 23fba9a:	bfd8      	it	le
 23fba9c:	f1c2 0c20 	rsble	ip, r2, #32
 23fbaa0:	fa01 f102 	lsl.w	r1, r1, r2
 23fbaa4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fbaa8:	bfdc      	itt	le
 23fbaaa:	ea41 010c 	orrle.w	r1, r1, ip
 23fbaae:	4090      	lslle	r0, r2
 23fbab0:	1ae4      	subs	r4, r4, r3
 23fbab2:	bfa2      	ittt	ge
 23fbab4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fbab8:	4329      	orrge	r1, r5
 23fbaba:	bd30      	popge	{r4, r5, pc}
 23fbabc:	ea6f 0404 	mvn.w	r4, r4
 23fbac0:	3c1f      	subs	r4, #31
 23fbac2:	da1c      	bge.n	23fbafe <__adddf3+0x1d2>
 23fbac4:	340c      	adds	r4, #12
 23fbac6:	dc0e      	bgt.n	23fbae6 <__adddf3+0x1ba>
 23fbac8:	f104 0414 	add.w	r4, r4, #20
 23fbacc:	f1c4 0220 	rsb	r2, r4, #32
 23fbad0:	fa20 f004 	lsr.w	r0, r0, r4
 23fbad4:	fa01 f302 	lsl.w	r3, r1, r2
 23fbad8:	ea40 0003 	orr.w	r0, r0, r3
 23fbadc:	fa21 f304 	lsr.w	r3, r1, r4
 23fbae0:	ea45 0103 	orr.w	r1, r5, r3
 23fbae4:	bd30      	pop	{r4, r5, pc}
 23fbae6:	f1c4 040c 	rsb	r4, r4, #12
 23fbaea:	f1c4 0220 	rsb	r2, r4, #32
 23fbaee:	fa20 f002 	lsr.w	r0, r0, r2
 23fbaf2:	fa01 f304 	lsl.w	r3, r1, r4
 23fbaf6:	ea40 0003 	orr.w	r0, r0, r3
 23fbafa:	4629      	mov	r1, r5
 23fbafc:	bd30      	pop	{r4, r5, pc}
 23fbafe:	fa21 f004 	lsr.w	r0, r1, r4
 23fbb02:	4629      	mov	r1, r5
 23fbb04:	bd30      	pop	{r4, r5, pc}
 23fbb06:	f094 0f00 	teq	r4, #0
 23fbb0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fbb0e:	bf06      	itte	eq
 23fbb10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fbb14:	3401      	addeq	r4, #1
 23fbb16:	3d01      	subne	r5, #1
 23fbb18:	e74e      	b.n	23fb9b8 <__adddf3+0x8c>
 23fbb1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fbb1e:	bf18      	it	ne
 23fbb20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fbb24:	d029      	beq.n	23fbb7a <__adddf3+0x24e>
 23fbb26:	ea94 0f05 	teq	r4, r5
 23fbb2a:	bf08      	it	eq
 23fbb2c:	ea90 0f02 	teqeq	r0, r2
 23fbb30:	d005      	beq.n	23fbb3e <__adddf3+0x212>
 23fbb32:	ea54 0c00 	orrs.w	ip, r4, r0
 23fbb36:	bf04      	itt	eq
 23fbb38:	4619      	moveq	r1, r3
 23fbb3a:	4610      	moveq	r0, r2
 23fbb3c:	bd30      	pop	{r4, r5, pc}
 23fbb3e:	ea91 0f03 	teq	r1, r3
 23fbb42:	bf1e      	ittt	ne
 23fbb44:	2100      	movne	r1, #0
 23fbb46:	2000      	movne	r0, #0
 23fbb48:	bd30      	popne	{r4, r5, pc}
 23fbb4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fbb4e:	d105      	bne.n	23fbb5c <__adddf3+0x230>
 23fbb50:	0040      	lsls	r0, r0, #1
 23fbb52:	4149      	adcs	r1, r1
 23fbb54:	bf28      	it	cs
 23fbb56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fbb5a:	bd30      	pop	{r4, r5, pc}
 23fbb5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fbb60:	bf3c      	itt	cc
 23fbb62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fbb66:	bd30      	popcc	{r4, r5, pc}
 23fbb68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fbb6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fbb70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fbb74:	f04f 0000 	mov.w	r0, #0
 23fbb78:	bd30      	pop	{r4, r5, pc}
 23fbb7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fbb7e:	bf1a      	itte	ne
 23fbb80:	4619      	movne	r1, r3
 23fbb82:	4610      	movne	r0, r2
 23fbb84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fbb88:	bf1c      	itt	ne
 23fbb8a:	460b      	movne	r3, r1
 23fbb8c:	4602      	movne	r2, r0
 23fbb8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fbb92:	bf06      	itte	eq
 23fbb94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fbb98:	ea91 0f03 	teqeq	r1, r3
 23fbb9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fbba0:	bd30      	pop	{r4, r5, pc}
 23fbba2:	bf00      	nop

023fbba4 <__aeabi_ui2d>:
 23fbba4:	f090 0f00 	teq	r0, #0
 23fbba8:	bf04      	itt	eq
 23fbbaa:	2100      	moveq	r1, #0
 23fbbac:	4770      	bxeq	lr
 23fbbae:	b530      	push	{r4, r5, lr}
 23fbbb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbbb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbbb8:	f04f 0500 	mov.w	r5, #0
 23fbbbc:	f04f 0100 	mov.w	r1, #0
 23fbbc0:	e750      	b.n	23fba64 <__adddf3+0x138>
 23fbbc2:	bf00      	nop

023fbbc4 <__aeabi_i2d>:
 23fbbc4:	f090 0f00 	teq	r0, #0
 23fbbc8:	bf04      	itt	eq
 23fbbca:	2100      	moveq	r1, #0
 23fbbcc:	4770      	bxeq	lr
 23fbbce:	b530      	push	{r4, r5, lr}
 23fbbd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbbd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbbd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fbbdc:	bf48      	it	mi
 23fbbde:	4240      	negmi	r0, r0
 23fbbe0:	f04f 0100 	mov.w	r1, #0
 23fbbe4:	e73e      	b.n	23fba64 <__adddf3+0x138>
 23fbbe6:	bf00      	nop

023fbbe8 <__aeabi_f2d>:
 23fbbe8:	0042      	lsls	r2, r0, #1
 23fbbea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fbbee:	ea4f 0131 	mov.w	r1, r1, rrx
 23fbbf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fbbf6:	bf1f      	itttt	ne
 23fbbf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fbbfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fbc00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fbc04:	4770      	bxne	lr
 23fbc06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fbc0a:	bf08      	it	eq
 23fbc0c:	4770      	bxeq	lr
 23fbc0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fbc12:	bf04      	itt	eq
 23fbc14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fbc18:	4770      	bxeq	lr
 23fbc1a:	b530      	push	{r4, r5, lr}
 23fbc1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fbc20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fbc24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fbc28:	e71c      	b.n	23fba64 <__adddf3+0x138>
 23fbc2a:	bf00      	nop

023fbc2c <__aeabi_ul2d>:
 23fbc2c:	ea50 0201 	orrs.w	r2, r0, r1
 23fbc30:	bf08      	it	eq
 23fbc32:	4770      	bxeq	lr
 23fbc34:	b530      	push	{r4, r5, lr}
 23fbc36:	f04f 0500 	mov.w	r5, #0
 23fbc3a:	e00a      	b.n	23fbc52 <__aeabi_l2d+0x16>

023fbc3c <__aeabi_l2d>:
 23fbc3c:	ea50 0201 	orrs.w	r2, r0, r1
 23fbc40:	bf08      	it	eq
 23fbc42:	4770      	bxeq	lr
 23fbc44:	b530      	push	{r4, r5, lr}
 23fbc46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fbc4a:	d502      	bpl.n	23fbc52 <__aeabi_l2d+0x16>
 23fbc4c:	4240      	negs	r0, r0
 23fbc4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fbc52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbc56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbc5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fbc5e:	f43f aed8 	beq.w	23fba12 <__adddf3+0xe6>
 23fbc62:	f04f 0203 	mov.w	r2, #3
 23fbc66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fbc6a:	bf18      	it	ne
 23fbc6c:	3203      	addne	r2, #3
 23fbc6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fbc72:	bf18      	it	ne
 23fbc74:	3203      	addne	r2, #3
 23fbc76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fbc7a:	f1c2 0320 	rsb	r3, r2, #32
 23fbc7e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fbc82:	fa20 f002 	lsr.w	r0, r0, r2
 23fbc86:	fa01 fe03 	lsl.w	lr, r1, r3
 23fbc8a:	ea40 000e 	orr.w	r0, r0, lr
 23fbc8e:	fa21 f102 	lsr.w	r1, r1, r2
 23fbc92:	4414      	add	r4, r2
 23fbc94:	e6bd      	b.n	23fba12 <__adddf3+0xe6>
 23fbc96:	bf00      	nop

023fbc98 <strcmp>:
 23fbc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fbc9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fbca0:	2a01      	cmp	r2, #1
 23fbca2:	bf28      	it	cs
 23fbca4:	429a      	cmpcs	r2, r3
 23fbca6:	d0f7      	beq.n	23fbc98 <strcmp>
 23fbca8:	1ad0      	subs	r0, r2, r3
 23fbcaa:	4770      	bx	lr

023fbcac <strlen>:
 23fbcac:	4603      	mov	r3, r0
 23fbcae:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fbcb2:	2a00      	cmp	r2, #0
 23fbcb4:	d1fb      	bne.n	23fbcae <strlen+0x2>
 23fbcb6:	1a18      	subs	r0, r3, r0
 23fbcb8:	3801      	subs	r0, #1
 23fbcba:	4770      	bx	lr

023fbcbc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fbcbc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fbcbe:	f003 f95d 	bl	23fef7c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fbcc2:	2500      	movs	r5, #0
 23fbcc4:	4e05      	ldr	r6, [pc, #20]	; (23fbcdc <module_user_init+0x20>)
 23fbcc6:	4c06      	ldr	r4, [pc, #24]	; (23fbce0 <module_user_init+0x24>)
 23fbcc8:	1ba4      	subs	r4, r4, r6
 23fbcca:	08a4      	lsrs	r4, r4, #2
 23fbccc:	42ac      	cmp	r4, r5
 23fbcce:	d100      	bne.n	23fbcd2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fbcd0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fbcd2:	f856 3b04 	ldr.w	r3, [r6], #4
 23fbcd6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fbcd8:	3501      	adds	r5, #1
 23fbcda:	e7f7      	b.n	23fbccc <module_user_init+0x10>
 23fbcdc:	023fffd0 	.word	0x023fffd0
 23fbce0:	023ffff8 	.word	0x023ffff8

023fbce4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fbce4:	f000 b856 	b.w	23fbd94 <setup>

023fbce8 <module_user_loop>:
}

void module_user_loop() {
 23fbce8:	b508      	push	{r3, lr}
    loop();
 23fbcea:	f000 f879 	bl	23fbde0 <loop>
    _post_loop();
}
 23fbcee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fbcf2:	f003 b8fb 	b.w	23feeec <_post_loop>

023fbcf6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fbcf6:	f000 bf1d 	b.w	23fcb34 <malloc>

023fbcfa <_Znaj>:
 23fbcfa:	f000 bf1b 	b.w	23fcb34 <malloc>

023fbcfe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fbcfe:	f000 bf27 	b.w	23fcb50 <free>
	...

023fbd04 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fbd04:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fbd06:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fbd08:	4a02      	ldr	r2, [pc, #8]	; (23fbd14 <__cxa_pure_virtual+0x10>)
 23fbd0a:	4903      	ldr	r1, [pc, #12]	; (23fbd18 <__cxa_pure_virtual+0x14>)
 23fbd0c:	f000 fdb4 	bl	23fc878 <panic_>
  while (1);
 23fbd10:	e7fe      	b.n	23fbd10 <__cxa_pure_virtual+0xc>
 23fbd12:	bf00      	nop
 23fbd14:	023fc355 	.word	0x023fc355
 23fbd18:	023ff840 	.word	0x023ff840

023fbd1c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fbd1c:	7800      	ldrb	r0, [r0, #0]
 23fbd1e:	fab0 f080 	clz	r0, r0
 23fbd22:	0940      	lsrs	r0, r0, #5
 23fbd24:	4770      	bx	lr

023fbd26 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fbd26:	2301      	movs	r3, #1
 23fbd28:	7003      	strb	r3, [r0, #0]
 23fbd2a:	4770      	bx	lr

023fbd2c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fbd2c:	4770      	bx	lr
	...

023fbd30 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fbd30:	b510      	push	{r4, lr}
 23fbd32:	4604      	mov	r4, r0
 23fbd34:	4b09      	ldr	r3, [pc, #36]	; (23fbd5c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fbd36:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fbd38:	f001 fc5e 	bl	23fd5f8 <_ZN5spark10LogManager8instanceEv>
 23fbd3c:	4621      	mov	r1, r4
 23fbd3e:	f001 fea7 	bl	23fda90 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fbd42:	f003 f843 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbd46:	f003 f833 	bl	23fedb0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fbd4a:	4620      	mov	r0, r4
 23fbd4c:	4b04      	ldr	r3, [pc, #16]	; (23fbd60 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fbd4e:	f840 3b04 	str.w	r3, [r0], #4
 23fbd52:	f001 fd27 	bl	23fd7a4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fbd56:	4620      	mov	r0, r4
 23fbd58:	bd10      	pop	{r4, pc}
 23fbd5a:	bf00      	nop
 23fbd5c:	023ff9f4 	.word	0x023ff9f4
 23fbd60:	023ff9dc 	.word	0x023ff9dc

023fbd64 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fbd64:	b510      	push	{r4, lr}
 23fbd66:	4604      	mov	r4, r0
    }
 23fbd68:	f7ff ffe2 	bl	23fbd30 <_ZN5spark16SerialLogHandlerD1Ev>
 23fbd6c:	4620      	mov	r0, r4
 23fbd6e:	2124      	movs	r1, #36	; 0x24
 23fbd70:	f7ff ffc5 	bl	23fbcfe <_ZdlPvj>
 23fbd74:	4620      	mov	r0, r4
 23fbd76:	bd10      	pop	{r4, pc}

023fbd78 <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fbd78:	b40e      	push	{r1, r2, r3}
 23fbd7a:	b503      	push	{r0, r1, lr}
 23fbd7c:	ab03      	add	r3, sp, #12
 23fbd7e:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fbd82:	2100      	movs	r1, #0
        va_start(args, format);
 23fbd84:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fbd86:	f002 fb5c 	bl	23fe442 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fbd8a:	b002      	add	sp, #8
 23fbd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbd90:	b003      	add	sp, #12
 23fbd92:	4770      	bx	lr

023fbd94 <setup>:
// Show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

// setup() runs once, when the device is first turned on
void setup() {
 23fbd94:	b538      	push	{r3, r4, r5, lr}
  // Enable Serial Monitor
  Serial.begin (9600);
 23fbd96:	f003 f819 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbd9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fbd9e:	f003 f803 	bl	23feda8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fbda2:	2000      	movs	r0, #0
 23fbda4:	f000 faf2 	bl	23fc38c <hal_timer_millis>
        while (_while() && !_condition()) {
 23fbda8:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23fbdac:	4604      	mov	r4, r0
 23fbdae:	2000      	movs	r0, #0
 23fbdb0:	f000 faec 	bl	23fc38c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fbdb4:	1b00      	subs	r0, r0, r4
 23fbdb6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fbdba:	42a8      	cmp	r0, r5
 23fbdbc:	f171 0300 	sbcs.w	r3, r1, #0
 23fbdc0:	d207      	bcs.n	23fbdd2 <setup+0x3e>
  waitFor(Serial.isConnected,10000);  //wait for Serial Monitor
 23fbdc2:	f003 f803 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbdc6:	f002 fff6 	bl	23fedb6 <_ZN9USBSerial11isConnectedEv>
 23fbdca:	b910      	cbnz	r0, 23fbdd2 <setup+0x3e>
            spark_process();
 23fbdcc:	f000 fdd2 	bl	23fc974 <spark_process>
        while (_while() && !_condition()) {
 23fbdd0:	e7ed      	b.n	23fbdae <setup+0x1a>
 23fbdd2:	f002 fffb 	bl	23fedcc <_Z16_fetch_usbserialv>

}
 23fbdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  waitFor(Serial.isConnected,10000);  //wait for Serial Monitor
 23fbdda:	f002 bfec 	b.w	23fedb6 <_ZN9USBSerial11isConnectedEv>
	...

023fbde0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 23fbde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MQTT_connect;
  MQTT_ping;
 
  rangeInInches1 = ultrasonic1.MeasureInInches();
 23fbde2:	4e32      	ldr	r6, [pc, #200]	; (23fbeac <loop+0xcc>)
 23fbde4:	4d32      	ldr	r5, [pc, #200]	; (23fbeb0 <loop+0xd0>)
 23fbde6:	4630      	mov	r0, r6
 23fbde8:	f000 fa49 	bl	23fc27e <_ZN10Ultrasonic15MeasureInInchesEv>
 23fbdec:	ee07 0a90 	vmov	s15, r0
 23fbdf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fbdf4:	edc5 7a00 	vstr	s15, [r5]
  Serial.printf("The distance to obstacles in front of ultrasonic1 is: %0.2f inches\n", rangeInInches1);
 23fbdf8:	f002 ffe8 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbdfc:	4604      	mov	r4, r0
 23fbdfe:	6828      	ldr	r0, [r5, #0]
 23fbe00:	f7ff fef2 	bl	23fbbe8 <__aeabi_f2d>
  rangeInInches2 = ultrasonic2.MeasureInInches();
 23fbe04:	4d2b      	ldr	r5, [pc, #172]	; (23fbeb4 <loop+0xd4>)
  Serial.printf("The distance to obstacles in front of ultrasonic1 is: %0.2f inches\n", rangeInInches1);
 23fbe06:	4602      	mov	r2, r0
 23fbe08:	460b      	mov	r3, r1
 23fbe0a:	4620      	mov	r0, r4
 23fbe0c:	492a      	ldr	r1, [pc, #168]	; (23fbeb8 <loop+0xd8>)
 23fbe0e:	f7ff ffb3 	bl	23fbd78 <_ZN5Print6printfEPKcz>
  rangeInInches2 = ultrasonic2.MeasureInInches();
 23fbe12:	4628      	mov	r0, r5
 23fbe14:	f000 fa33 	bl	23fc27e <_ZN10Ultrasonic15MeasureInInchesEv>
 23fbe18:	ee07 0a90 	vmov	s15, r0
 23fbe1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fbe20:	4f26      	ldr	r7, [pc, #152]	; (23fbebc <loop+0xdc>)
 23fbe22:	edc7 7a00 	vstr	s15, [r7]
  Serial.printf("The distance to obstacles in front of ultrasonic2 is: %0.2f inches\n", rangeInInches2);
 23fbe26:	f002 ffd1 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbe2a:	4604      	mov	r4, r0
 23fbe2c:	6838      	ldr	r0, [r7, #0]
 23fbe2e:	f7ff fedb 	bl	23fbbe8 <__aeabi_f2d>
 23fbe32:	4602      	mov	r2, r0
 23fbe34:	460b      	mov	r3, r1
 23fbe36:	4620      	mov	r0, r4
 23fbe38:	4921      	ldr	r1, [pc, #132]	; (23fbec0 <loop+0xe0>)
 23fbe3a:	f7ff ff9d 	bl	23fbd78 <_ZN5Print6printfEPKcz>
  delay(1000);
 23fbe3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fbe42:	f000 fed9 	bl	23fcbf8 <delay>
 
  rangeInCentimeters1 = ultrasonic1.MeasureInCentimeters();
 23fbe46:	4630      	mov	r0, r6
 23fbe48:	f000 f9f5 	bl	23fc236 <_ZN10Ultrasonic20MeasureInCentimetersEv>
 23fbe4c:	ee07 0a90 	vmov	s15, r0
 23fbe50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fbe54:	4e1b      	ldr	r6, [pc, #108]	; (23fbec4 <loop+0xe4>)
 23fbe56:	edc6 7a00 	vstr	s15, [r6]
  Serial.printf("The distance to obstacles in front of ultrasonic1 is: %0.2f cm\n", rangeInCentimeters1);
 23fbe5a:	f002 ffb7 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbe5e:	4604      	mov	r4, r0
 23fbe60:	6830      	ldr	r0, [r6, #0]
 23fbe62:	f7ff fec1 	bl	23fbbe8 <__aeabi_f2d>
 23fbe66:	4602      	mov	r2, r0
 23fbe68:	460b      	mov	r3, r1
 23fbe6a:	4620      	mov	r0, r4
 23fbe6c:	4916      	ldr	r1, [pc, #88]	; (23fbec8 <loop+0xe8>)
 23fbe6e:	f7ff ff83 	bl	23fbd78 <_ZN5Print6printfEPKcz>
  rangeInCentimeters2 = ultrasonic2.MeasureInCentimeters();
 23fbe72:	4628      	mov	r0, r5
 23fbe74:	f000 f9df 	bl	23fc236 <_ZN10Ultrasonic20MeasureInCentimetersEv>
 23fbe78:	ee07 0a90 	vmov	s15, r0
 23fbe7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fbe80:	4d12      	ldr	r5, [pc, #72]	; (23fbecc <loop+0xec>)
 23fbe82:	edc5 7a00 	vstr	s15, [r5]
  Serial.printf("The distance to obstacles in front of ultrasonic2 is: %0.2f cm\n", rangeInCentimeters2);
 23fbe86:	f002 ffa1 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fbe8a:	4604      	mov	r4, r0
 23fbe8c:	6828      	ldr	r0, [r5, #0]
 23fbe8e:	f7ff feab 	bl	23fbbe8 <__aeabi_f2d>
 23fbe92:	460b      	mov	r3, r1
 23fbe94:	4602      	mov	r2, r0
 23fbe96:	490e      	ldr	r1, [pc, #56]	; (23fbed0 <loop+0xf0>)
 23fbe98:	4620      	mov	r0, r4
 23fbe9a:	f7ff ff6d 	bl	23fbd78 <_ZN5Print6printfEPKcz>

  delay(1000);
}
 23fbe9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 23fbea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fbea6:	f000 bea7 	b.w	23fcbf8 <delay>
 23fbeaa:	bf00      	nop
 23fbeac:	1007ae44 	.word	0x1007ae44
 23fbeb0:	1007ae30 	.word	0x1007ae30
 23fbeb4:	1007ae48 	.word	0x1007ae48
 23fbeb8:	023ff855 	.word	0x023ff855
 23fbebc:	1007ae34 	.word	0x1007ae34
 23fbec0:	023ff899 	.word	0x023ff899
 23fbec4:	1007ae28 	.word	0x1007ae28
 23fbec8:	023ff8dd 	.word	0x023ff8dd
 23fbecc:	1007ae2c 	.word	0x1007ae2c
 23fbed0:	023ff91d 	.word	0x023ff91d

023fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbed4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbed6:	2614      	movs	r6, #20
 23fbed8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbedc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbede:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbee2:	42ae      	cmp	r6, r5
 23fbee4:	d004      	beq.n	23fbef0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbee6:	4628      	mov	r0, r5
 23fbee8:	f002 fb16 	bl	23fe518 <_ZN6StringD1Ev>
 23fbeec:	3514      	adds	r5, #20
 23fbeee:	e7f8      	b.n	23fbee2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbef0:	6820      	ldr	r0, [r4, #0]
 23fbef2:	f000 fe2d 	bl	23fcb50 <free>
    AllocatorT::free(data_);
}
 23fbef6:	4620      	mov	r0, r4
 23fbef8:	bd70      	pop	{r4, r5, r6, pc}

023fbefa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fbefa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbefe:	4604      	mov	r4, r0
 23fbf00:	460d      	mov	r5, r1
 23fbf02:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbf04:	d916      	bls.n	23fbf34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fbf06:	4290      	cmp	r0, r2
 23fbf08:	d215      	bcs.n	23fbf36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fbf0a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fbf0e:	1a75      	subs	r5, r6, r1
 23fbf10:	f1a1 0714 	sub.w	r7, r1, #20
 23fbf14:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbf16:	42b7      	cmp	r7, r6
 23fbf18:	d01c      	beq.n	23fbf54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fbf1a:	b12c      	cbz	r4, 23fbf28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fbf1c:	4631      	mov	r1, r6
 23fbf1e:	4620      	mov	r0, r4
 23fbf20:	f002 fb63 	bl	23fe5ea <_ZN6StringC1EOS_>
 23fbf24:	7c33      	ldrb	r3, [r6, #16]
 23fbf26:	7423      	strb	r3, [r4, #16]
 23fbf28:	4630      	mov	r0, r6
 23fbf2a:	f002 faf5 	bl	23fe518 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fbf2e:	3e14      	subs	r6, #20
 23fbf30:	3c14      	subs	r4, #20
 23fbf32:	e7f0      	b.n	23fbf16 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fbf34:	d00e      	beq.n	23fbf54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fbf36:	42b5      	cmp	r5, r6
 23fbf38:	d00c      	beq.n	23fbf54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fbf3a:	b12c      	cbz	r4, 23fbf48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fbf3c:	4629      	mov	r1, r5
 23fbf3e:	4620      	mov	r0, r4
 23fbf40:	f002 fb53 	bl	23fe5ea <_ZN6StringC1EOS_>
 23fbf44:	7c2b      	ldrb	r3, [r5, #16]
 23fbf46:	7423      	strb	r3, [r4, #16]
 23fbf48:	4628      	mov	r0, r5
 23fbf4a:	f002 fae5 	bl	23fe518 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf4e:	3514      	adds	r5, #20
 23fbf50:	3414      	adds	r4, #20
 23fbf52:	e7f0      	b.n	23fbf36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fbf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fbf56:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fbf5c:	e9c0 3300 	strd	r3, r3, [r0]
 23fbf60:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf62:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf64:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf66:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf68:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf6a:	dd24      	ble.n	23fbfb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fbf6c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fbf70:	fb08 f007 	mul.w	r0, r8, r7
 23fbf74:	f000 fdde 	bl	23fcb34 <malloc>
            if (!d) {
 23fbf78:	4605      	mov	r5, r0
 23fbf7a:	b1e0      	cbz	r0, 23fbfb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fbf7c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fbf80:	fb08 1202 	mla	r2, r8, r2, r1
 23fbf84:	f7ff ffb9 	bl	23fbefa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fbf88:	6820      	ldr	r0, [r4, #0]
 23fbf8a:	f000 fde1 	bl	23fcb50 <free>
        data_ = d;
 23fbf8e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fbf90:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbf92:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fbf96:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fbf9a:	45b8      	cmp	r8, r7
 23fbf9c:	d009      	beq.n	23fbfb2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fbf9e:	4639      	mov	r1, r7
 23fbfa0:	4628      	mov	r0, r5
 23fbfa2:	f002 fb3c 	bl	23fe61e <_ZN6StringC1ERKS_>
 23fbfa6:	7c3b      	ldrb	r3, [r7, #16]
 23fbfa8:	3514      	adds	r5, #20
 23fbfaa:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fbfae:	3714      	adds	r7, #20
 23fbfb0:	e7f3      	b.n	23fbf9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fbfb2:	6873      	ldr	r3, [r6, #4]
 23fbfb4:	6063      	str	r3, [r4, #4]
}
 23fbfb6:	4620      	mov	r0, r4
 23fbfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbfbc <_GLOBAL__sub_I_duration1>:
float speed(uint32_t time, float sensor1, float sensor2) {
  float mph;
    // Calculates the speed based on each sensors time
  // ((time)*(Speed of sound))/ toward and backward of object) * 10
  return mph;
 23fbfbc:	b570      	push	{r4, r5, r6, lr}
Ultrasonic ultrasonic1(SIGNALPIN1);
 23fbfbe:	2102      	movs	r1, #2
 23fbfc0:	b08e      	sub	sp, #56	; 0x38
TCPClient TheClient; 
 23fbfc2:	4d36      	ldr	r5, [pc, #216]	; (23fc09c <_GLOBAL__sub_I_duration1+0xe0>)
Ultrasonic ultrasonic1(SIGNALPIN1);
 23fbfc4:	4836      	ldr	r0, [pc, #216]	; (23fc0a0 <_GLOBAL__sub_I_duration1+0xe4>)
 23fbfc6:	f000 f934 	bl	23fc232 <_ZN10UltrasonicC1Ei>
Ultrasonic ultrasonic2(SIGNALPIN2);
 23fbfca:	2103      	movs	r1, #3
 23fbfcc:	4835      	ldr	r0, [pc, #212]	; (23fc0a4 <_GLOBAL__sub_I_duration1+0xe8>)
 23fbfce:	f000 f930 	bl	23fc232 <_ZN10UltrasonicC1Ei>
TCPClient TheClient; 
 23fbfd2:	4628      	mov	r0, r5
 23fbfd4:	f002 fe18 	bl	23fec08 <_ZN9TCPClientC1Ev>
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
 23fbfd8:	4c33      	ldr	r4, [pc, #204]	; (23fc0a8 <_GLOBAL__sub_I_duration1+0xec>)
 23fbfda:	4b34      	ldr	r3, [pc, #208]	; (23fc0ac <_GLOBAL__sub_I_duration1+0xf0>)
 23fbfdc:	f240 725b 	movw	r2, #1883	; 0x75b
 23fbfe0:	9300      	str	r3, [sp, #0]
 23fbfe2:	4620      	mov	r0, r4
 23fbfe4:	4b32      	ldr	r3, [pc, #200]	; (23fc0b0 <_GLOBAL__sub_I_duration1+0xf4>)
 23fbfe6:	4933      	ldr	r1, [pc, #204]	; (23fc0b4 <_GLOBAL__sub_I_duration1+0xf8>)
 23fbfe8:	f000 f87c 	bl	23fc0e4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
 23fbfec:	4b32      	ldr	r3, [pc, #200]	; (23fc0b8 <_GLOBAL__sub_I_duration1+0xfc>)
Adafruit_MQTT_Publish speedPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/speed");
 23fbfee:	4621      	mov	r1, r4
 23fbff0:	6023      	str	r3, [r4, #0]
 23fbff2:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 23fbff6:	2300      	movs	r3, #0
 23fbff8:	4a30      	ldr	r2, [pc, #192]	; (23fc0bc <_GLOBAL__sub_I_duration1+0x100>)
 23fbffa:	4831      	ldr	r0, [pc, #196]	; (23fc0c0 <_GLOBAL__sub_I_duration1+0x104>)
 23fbffc:	f000 f88e 	bl	23fc11c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish counterPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/counter");
 23fc000:	4621      	mov	r1, r4
              error_(SYSTEM_ERROR_NONE) {
 23fc002:	2400      	movs	r4, #0
 23fc004:	2300      	movs	r3, #0
 23fc006:	4a2f      	ldr	r2, [pc, #188]	; (23fc0c4 <_GLOBAL__sub_I_duration1+0x108>)
 23fc008:	482f      	ldr	r0, [pc, #188]	; (23fc0c8 <_GLOBAL__sub_I_duration1+0x10c>)
 23fc00a:	f000 f887 	bl	23fc11c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
 23fc00e:	4b2f      	ldr	r3, [pc, #188]	; (23fc0cc <_GLOBAL__sub_I_duration1+0x110>)
    SleepResult() {}
 23fc010:	4a2f      	ldr	r2, [pc, #188]	; (23fc0d0 <_GLOBAL__sub_I_duration1+0x114>)
              error_(SYSTEM_ERROR_NONE) {
 23fc012:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fc016:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fc018:	2002      	movs	r0, #2
 23fc01a:	f000 fc65 	bl	23fc8e8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fc01e:	4621      	mov	r1, r4
 23fc020:	2001      	movs	r0, #1
 23fc022:	f000 fc7d 	bl	23fc920 <system_thread_set_state>
        capacity_(0) {
 23fc026:	e9cd 4402 	strd	r4, r4, [sp, #8]
 23fc02a:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 23fc02c:	f002 fece 	bl	23fedcc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc030:	4c28      	ldr	r4, [pc, #160]	; (23fc0d4 <_GLOBAL__sub_I_duration1+0x118>)
 23fc032:	4605      	mov	r5, r0
 23fc034:	4626      	mov	r6, r4
 23fc036:	a902      	add	r1, sp, #8
 23fc038:	a805      	add	r0, sp, #20
 23fc03a:	f7ff ff8c 	bl	23fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fc03e:	a905      	add	r1, sp, #20
 23fc040:	a808      	add	r0, sp, #32
 23fc042:	f7ff ff88 	bl	23fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc046:	4b24      	ldr	r3, [pc, #144]	; (23fc0d8 <_GLOBAL__sub_I_duration1+0x11c>)
 23fc048:	a908      	add	r1, sp, #32
 23fc04a:	f846 3b04 	str.w	r3, [r6], #4
 23fc04e:	a80b      	add	r0, sp, #44	; 0x2c
 23fc050:	f7ff ff81 	bl	23fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc054:	aa0b      	add	r2, sp, #44	; 0x2c
 23fc056:	211e      	movs	r1, #30
 23fc058:	4630      	mov	r0, r6
 23fc05a:	f001 fdb9 	bl	23fdbd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc05e:	a80b      	add	r0, sp, #44	; 0x2c
 23fc060:	f7ff ff38 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc064:	a808      	add	r0, sp, #32
 23fc066:	f7ff ff35 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc06a:	4b1c      	ldr	r3, [pc, #112]	; (23fc0dc <_GLOBAL__sub_I_duration1+0x120>)
 23fc06c:	6225      	str	r5, [r4, #32]
 23fc06e:	6023      	str	r3, [r4, #0]
 23fc070:	a805      	add	r0, sp, #20
 23fc072:	f7ff ff2f 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc076:	4b1a      	ldr	r3, [pc, #104]	; (23fc0e0 <_GLOBAL__sub_I_duration1+0x124>)
 23fc078:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc07a:	f002 fea7 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fc07e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc082:	f002 fe91 	bl	23feda8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc086:	f001 fab7 	bl	23fd5f8 <_ZN5spark10LogManager8instanceEv>
 23fc08a:	4621      	mov	r1, r4
 23fc08c:	f001 fcba 	bl	23fda04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fc090:	a802      	add	r0, sp, #8
 23fc092:	f7ff ff1f 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc096:	b00e      	add	sp, #56	; 0x38
 23fc098:	bd70      	pop	{r4, r5, r6, pc}
 23fc09a:	bf00      	nop
 23fc09c:	1007ad08 	.word	0x1007ad08
 23fc0a0:	1007ae44 	.word	0x1007ae44
 23fc0a4:	1007ae48 	.word	0x1007ae48
 23fc0a8:	1007ad54 	.word	0x1007ad54
 23fc0ac:	023ff97b 	.word	0x023ff97b
 23fc0b0:	023ff95d 	.word	0x023ff95d
 23fc0b4:	023ff96b 	.word	0x023ff96b
 23fc0b8:	023ffa30 	.word	0x023ffa30
 23fc0bc:	023ff99c 	.word	0x023ff99c
 23fc0c0:	1007ae38 	.word	0x1007ae38
 23fc0c4:	023ff9b6 	.word	0x023ff9b6
 23fc0c8:	1007ad24 	.word	0x1007ad24
 23fc0cc:	1007acfc 	.word	0x1007acfc
 23fc0d0:	ffff0000 	.word	0xffff0000
 23fc0d4:	1007ad30 	.word	0x1007ad30
 23fc0d8:	023ff9dc 	.word	0x023ff9dc
 23fc0dc:	023ffb74 	.word	0x023ffb74
 23fc0e0:	023ff9f4 	.word	0x023ff9f4

023fc0e4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
 23fc0e4:	8102      	strh	r2, [r0, #8]
  clientid = "";
 23fc0e6:	4a0b      	ldr	r2, [pc, #44]	; (23fc114 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
Adafruit_MQTT::Adafruit_MQTT(const char *server,
 23fc0e8:	b530      	push	{r4, r5, lr}
  username = user;
 23fc0ea:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
 23fc0ee:	9b03      	ldr	r3, [sp, #12]
                             const char *pass) {
 23fc0f0:	4d09      	ldr	r5, [pc, #36]	; (23fc118 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  password = pass;
 23fc0f2:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
 23fc0f4:	2300      	movs	r3, #0
  servername = server;
 23fc0f6:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
 23fc0fa:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 23fc0fe:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
 23fc102:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
 23fc106:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
 23fc10a:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
 23fc10c:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
 23fc110:	bd30      	pop	{r4, r5, pc}
 23fc112:	bf00      	nop
 23fc114:	023ffb3b 	.word	0x023ffb3b
 23fc118:	023ffa0c 	.word	0x023ffa0c

023fc11c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
 23fc11c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
 23fc11e:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
 23fc122:	7203      	strb	r3, [r0, #8]
}
 23fc124:	bd10      	pop	{r4, pc}

023fc126 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
 23fc126:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
 23fc128:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 23fc12c:	6803      	ldr	r3, [r0, #0]
 23fc12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc130:	4798      	blx	r3
}
 23fc132:	3800      	subs	r0, #0
 23fc134:	bf18      	it	ne
 23fc136:	2001      	movne	r0, #1
 23fc138:	bd08      	pop	{r3, pc}

023fc13a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
 23fc13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc13c:	4606      	mov	r6, r0
 23fc13e:	460f      	mov	r7, r1
 23fc140:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
 23fc142:	b1c4      	cbz	r4, 23fc176 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
 23fc144:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 23fc148:	6803      	ldr	r3, [r0, #0]
 23fc14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc14c:	4798      	blx	r3
 23fc14e:	b908      	cbnz	r0, 23fc154 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
 23fc150:	2000      	movs	r0, #0
    }
  }
  return true;
}
 23fc152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 23fc154:	2cfa      	cmp	r4, #250	; 0xfa
 23fc156:	4625      	mov	r5, r4
 23fc158:	bfa8      	it	ge
 23fc15a:	25fa      	movge	r5, #250	; 0xfa
      ret = client->write(buffer, sendlen);
 23fc15c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 23fc160:	462a      	mov	r2, r5
 23fc162:	6803      	ldr	r3, [r0, #0]
 23fc164:	4639      	mov	r1, r7
 23fc166:	68db      	ldr	r3, [r3, #12]
 23fc168:	4798      	blx	r3
 23fc16a:	b283      	uxth	r3, r0
      len -= ret;
 23fc16c:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
 23fc16e:	429d      	cmp	r5, r3
      len -= ret;
 23fc170:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
 23fc172:	d0e6      	beq.n	23fc142 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
 23fc174:	e7ec      	b.n	23fc150 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
 23fc176:	2001      	movs	r0, #1
 23fc178:	e7eb      	b.n	23fc152 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

023fc17a <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
 23fc17a:	4770      	bx	lr

023fc17c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
 23fc17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fc180:	4606      	mov	r6, r0
 23fc182:	4688      	mov	r8, r1
 23fc184:	4691      	mov	r9, r2
 23fc186:	461f      	mov	r7, r3
 23fc188:	461d      	mov	r5, r3
  uint16_t len = 0;
 23fc18a:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
 23fc18c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 23fc190:	6803      	ldr	r3, [r0, #0]
 23fc192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc194:	4798      	blx	r3
 23fc196:	b1d0      	cbz	r0, 23fc1ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
 23fc198:	2d00      	cmp	r5, #0
 23fc19a:	db18      	blt.n	23fc1ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
 23fc19c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 23fc1a0:	6803      	ldr	r3, [r0, #0]
 23fc1a2:	691b      	ldr	r3, [r3, #16]
 23fc1a4:	4798      	blx	r3
 23fc1a6:	b160      	cbz	r0, 23fc1c2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
 23fc1a8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
 23fc1ac:	6803      	ldr	r3, [r0, #0]
 23fc1ae:	695b      	ldr	r3, [r3, #20]
 23fc1b0:	4798      	blx	r3
 23fc1b2:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
 23fc1b6:	3401      	adds	r4, #1
 23fc1b8:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
 23fc1ba:	454c      	cmp	r4, r9
 23fc1bc:	d007      	beq.n	23fc1ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
 23fc1be:	463d      	mov	r5, r7
 23fc1c0:	e7ec      	b.n	23fc19c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    delay(MQTT_CLIENT_READINTERVAL_MS);
 23fc1c2:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
 23fc1c4:	3d0a      	subs	r5, #10
 23fc1c6:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
 23fc1c8:	f000 fd16 	bl	23fcbf8 <delay>
  while (client->connected() && (timeout >= 0)) {
 23fc1cc:	e7de      	b.n	23fc18c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
 23fc1ce:	4620      	mov	r0, r4
 23fc1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fc1d4 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
 23fc1d4:	b570      	push	{r4, r5, r6, lr}
 23fc1d6:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
 23fc1d8:	f100 0522 	add.w	r5, r0, #34	; 0x22
 23fc1dc:	2296      	movs	r2, #150	; 0x96
 23fc1de:	2100      	movs	r1, #0
 23fc1e0:	4628      	mov	r0, r5
 23fc1e2:	f003 f9b2 	bl	23ff54a <memset>
  strcpy((char *)buffer, servername);
 23fc1e6:	6861      	ldr	r1, [r4, #4]
 23fc1e8:	4628      	mov	r0, r5
 23fc1ea:	f003 f9fc 	bl	23ff5e6 <strcpy>
  int r = client->connect((char *)buffer, portnum);
 23fc1ee:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 23fc1f2:	4629      	mov	r1, r5
 23fc1f4:	6803      	ldr	r3, [r0, #0]
 23fc1f6:	8922      	ldrh	r2, [r4, #8]
 23fc1f8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 23fc1fa:	2300      	movs	r3, #0
 23fc1fc:	47b0      	blx	r6
}
 23fc1fe:	3800      	subs	r0, #0
 23fc200:	bf18      	it	ne
 23fc202:	2001      	movne	r0, #1
 23fc204:	bd70      	pop	{r4, r5, r6, pc}

023fc206 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
 23fc206:	b510      	push	{r4, lr}
 23fc208:	4604      	mov	r4, r0
 23fc20a:	21d4      	movs	r1, #212	; 0xd4
 23fc20c:	f7ff fd77 	bl	23fbcfe <_ZdlPvj>
 23fc210:	4620      	mov	r0, r4
 23fc212:	bd10      	pop	{r4, pc}

023fc214 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
 23fc214:	b510      	push	{r4, lr}
 23fc216:	4604      	mov	r4, r0
  if (client->connected()) {
 23fc218:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 23fc21c:	6803      	ldr	r3, [r0, #0]
 23fc21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc220:	4798      	blx	r3
 23fc222:	b120      	cbz	r0, 23fc22e <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
 23fc224:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 23fc228:	6803      	ldr	r3, [r0, #0]
 23fc22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc22c:	4798      	blx	r3
}
 23fc22e:	2001      	movs	r0, #1
 23fc230:	bd10      	pop	{r4, pc}

023fc232 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
 23fc232:	6001      	str	r1, [r0, #0]
}
 23fc234:	4770      	bx	lr

023fc236 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
 23fc236:	b510      	push	{r4, lr}
 23fc238:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
 23fc23a:	2101      	movs	r1, #1
 23fc23c:	8800      	ldrh	r0, [r0, #0]
 23fc23e:	f002 ff0d 	bl	23ff05c <pinMode>
	digitalWrite(_pin, LOW);
 23fc242:	2100      	movs	r1, #0
 23fc244:	8820      	ldrh	r0, [r4, #0]
 23fc246:	f002 ff1a 	bl	23ff07e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fc24a:	2002      	movs	r0, #2
 23fc24c:	f000 f882 	bl	23fc354 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
 23fc250:	2101      	movs	r1, #1
 23fc252:	8820      	ldrh	r0, [r4, #0]
 23fc254:	f002 ff13 	bl	23ff07e <digitalWrite>
 23fc258:	2005      	movs	r0, #5
 23fc25a:	f000 f87b 	bl	23fc354 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
 23fc25e:	8820      	ldrh	r0, [r4, #0]
 23fc260:	2100      	movs	r1, #0
 23fc262:	f002 ff0c 	bl	23ff07e <digitalWrite>
	pinMode(_pin,INPUT);
 23fc266:	8820      	ldrh	r0, [r4, #0]
 23fc268:	2100      	movs	r1, #0
 23fc26a:	f002 fef7 	bl	23ff05c <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
 23fc26e:	2101      	movs	r1, #1
 23fc270:	8820      	ldrh	r0, [r4, #0]
 23fc272:	f002 ff1d 	bl	23ff0b0 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
 23fc276:	233a      	movs	r3, #58	; 0x3a
 23fc278:	fb90 f0f3 	sdiv	r0, r0, r3
 23fc27c:	bd10      	pop	{r4, pc}

023fc27e <_ZN10Ultrasonic15MeasureInInchesEv>:
/*The measured distance from the range 0 to 157 Inches*/
long Ultrasonic::MeasureInInches(void)
{
 23fc27e:	b510      	push	{r4, lr}
 23fc280:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
 23fc282:	2101      	movs	r1, #1
 23fc284:	8800      	ldrh	r0, [r0, #0]
 23fc286:	f002 fee9 	bl	23ff05c <pinMode>
	digitalWrite(_pin, LOW);
 23fc28a:	2100      	movs	r1, #0
 23fc28c:	8820      	ldrh	r0, [r4, #0]
 23fc28e:	f002 fef6 	bl	23ff07e <digitalWrite>
 23fc292:	2002      	movs	r0, #2
 23fc294:	f000 f85e 	bl	23fc354 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
 23fc298:	2101      	movs	r1, #1
 23fc29a:	8820      	ldrh	r0, [r4, #0]
 23fc29c:	f002 feef 	bl	23ff07e <digitalWrite>
 23fc2a0:	2005      	movs	r0, #5
 23fc2a2:	f000 f857 	bl	23fc354 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
 23fc2a6:	8820      	ldrh	r0, [r4, #0]
 23fc2a8:	2100      	movs	r1, #0
 23fc2aa:	f002 fee8 	bl	23ff07e <digitalWrite>
	pinMode(_pin,INPUT);
 23fc2ae:	8820      	ldrh	r0, [r4, #0]
 23fc2b0:	2100      	movs	r1, #0
 23fc2b2:	f002 fed3 	bl	23ff05c <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
 23fc2b6:	2101      	movs	r1, #1
 23fc2b8:	8820      	ldrh	r0, [r4, #0]
 23fc2ba:	f002 fef9 	bl	23ff0b0 <pulseIn>
	long RangeInInches;
	RangeInInches = duration/74/2;
	return RangeInInches;
 23fc2be:	2394      	movs	r3, #148	; 0x94
 23fc2c0:	fb90 f0f3 	sdiv	r0, r0, r3
 23fc2c4:	bd10      	pop	{r4, pc}
	...

023fc2c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc2c8:	b509      	push	{r0, r3, lr}
 23fc2ca:	4804      	ldr	r0, [pc, #16]	; (23fc2dc <os_mutex_recursive_create+0x14>)
 23fc2cc:	6800      	ldr	r0, [r0, #0]
 23fc2ce:	4b04      	ldr	r3, [pc, #16]	; (23fc2e0 <os_mutex_recursive_create+0x18>)
 23fc2d0:	4403      	add	r3, r0
 23fc2d2:	681b      	ldr	r3, [r3, #0]
 23fc2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc2d6:	9302      	str	r3, [sp, #8]
 23fc2d8:	bd09      	pop	{r0, r3, pc}
 23fc2da:	0000      	.short	0x0000
 23fc2dc:	1007ac84 	.word	0x1007ac84
 23fc2e0:	00000030 	.word	0x00000030

023fc2e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc2e4:	b509      	push	{r0, r3, lr}
 23fc2e6:	4804      	ldr	r0, [pc, #16]	; (23fc2f8 <os_mutex_recursive_destroy+0x14>)
 23fc2e8:	6800      	ldr	r0, [r0, #0]
 23fc2ea:	4b04      	ldr	r3, [pc, #16]	; (23fc2fc <os_mutex_recursive_destroy+0x18>)
 23fc2ec:	4403      	add	r3, r0
 23fc2ee:	681b      	ldr	r3, [r3, #0]
 23fc2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc2f2:	9302      	str	r3, [sp, #8]
 23fc2f4:	bd09      	pop	{r0, r3, pc}
 23fc2f6:	0000      	.short	0x0000
 23fc2f8:	1007ac84 	.word	0x1007ac84
 23fc2fc:	00000030 	.word	0x00000030

023fc300 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc300:	b509      	push	{r0, r3, lr}
 23fc302:	4804      	ldr	r0, [pc, #16]	; (23fc314 <os_mutex_recursive_lock+0x14>)
 23fc304:	6800      	ldr	r0, [r0, #0]
 23fc306:	4b04      	ldr	r3, [pc, #16]	; (23fc318 <os_mutex_recursive_lock+0x18>)
 23fc308:	4403      	add	r3, r0
 23fc30a:	681b      	ldr	r3, [r3, #0]
 23fc30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc30e:	9302      	str	r3, [sp, #8]
 23fc310:	bd09      	pop	{r0, r3, pc}
 23fc312:	0000      	.short	0x0000
 23fc314:	1007ac84 	.word	0x1007ac84
 23fc318:	00000030 	.word	0x00000030

023fc31c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc31c:	b509      	push	{r0, r3, lr}
 23fc31e:	4804      	ldr	r0, [pc, #16]	; (23fc330 <os_mutex_recursive_unlock+0x14>)
 23fc320:	6800      	ldr	r0, [r0, #0]
 23fc322:	4b04      	ldr	r3, [pc, #16]	; (23fc334 <os_mutex_recursive_unlock+0x18>)
 23fc324:	4403      	add	r3, r0
 23fc326:	681b      	ldr	r3, [r3, #0]
 23fc328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc32a:	9302      	str	r3, [sp, #8]
 23fc32c:	bd09      	pop	{r0, r3, pc}
 23fc32e:	0000      	.short	0x0000
 23fc330:	1007ac84 	.word	0x1007ac84
 23fc334:	00000030 	.word	0x00000030

023fc338 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc338:	b509      	push	{r0, r3, lr}
 23fc33a:	4804      	ldr	r0, [pc, #16]	; (23fc34c <HAL_RNG_GetRandomNumber+0x14>)
 23fc33c:	6800      	ldr	r0, [r0, #0]
 23fc33e:	4b04      	ldr	r3, [pc, #16]	; (23fc350 <HAL_RNG_GetRandomNumber+0x18>)
 23fc340:	4403      	add	r3, r0
 23fc342:	681b      	ldr	r3, [r3, #0]
 23fc344:	685b      	ldr	r3, [r3, #4]
 23fc346:	9302      	str	r3, [sp, #8]
 23fc348:	bd09      	pop	{r0, r3, pc}
 23fc34a:	0000      	.short	0x0000
 23fc34c:	1007ac84 	.word	0x1007ac84
 23fc350:	00000000 	.word	0x00000000

023fc354 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc354:	b509      	push	{r0, r3, lr}
 23fc356:	4804      	ldr	r0, [pc, #16]	; (23fc368 <HAL_Delay_Microseconds+0x14>)
 23fc358:	6800      	ldr	r0, [r0, #0]
 23fc35a:	4b04      	ldr	r3, [pc, #16]	; (23fc36c <HAL_Delay_Microseconds+0x18>)
 23fc35c:	4403      	add	r3, r0
 23fc35e:	681b      	ldr	r3, [r3, #0]
 23fc360:	68db      	ldr	r3, [r3, #12]
 23fc362:	9302      	str	r3, [sp, #8]
 23fc364:	bd09      	pop	{r0, r3, pc}
 23fc366:	0000      	.short	0x0000
 23fc368:	1007ac84 	.word	0x1007ac84
 23fc36c:	00000000 	.word	0x00000000

023fc370 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc370:	b509      	push	{r0, r3, lr}
 23fc372:	4804      	ldr	r0, [pc, #16]	; (23fc384 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc374:	6800      	ldr	r0, [r0, #0]
 23fc376:	4b04      	ldr	r3, [pc, #16]	; (23fc388 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc378:	4403      	add	r3, r0
 23fc37a:	681b      	ldr	r3, [r3, #0]
 23fc37c:	695b      	ldr	r3, [r3, #20]
 23fc37e:	9302      	str	r3, [sp, #8]
 23fc380:	bd09      	pop	{r0, r3, pc}
 23fc382:	0000      	.short	0x0000
 23fc384:	1007ac84 	.word	0x1007ac84
 23fc388:	00000000 	.word	0x00000000

023fc38c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc38c:	b509      	push	{r0, r3, lr}
 23fc38e:	4804      	ldr	r0, [pc, #16]	; (23fc3a0 <hal_timer_millis+0x14>)
 23fc390:	6800      	ldr	r0, [r0, #0]
 23fc392:	4b04      	ldr	r3, [pc, #16]	; (23fc3a4 <hal_timer_millis+0x18>)
 23fc394:	4403      	add	r3, r0
 23fc396:	681b      	ldr	r3, [r3, #0]
 23fc398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc39a:	9302      	str	r3, [sp, #8]
 23fc39c:	bd09      	pop	{r0, r3, pc}
 23fc39e:	0000      	.short	0x0000
 23fc3a0:	1007ac84 	.word	0x1007ac84
 23fc3a4:	00000000 	.word	0x00000000

023fc3a8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc3a8:	b509      	push	{r0, r3, lr}
 23fc3aa:	4804      	ldr	r0, [pc, #16]	; (23fc3bc <hal_gpio_mode+0x14>)
 23fc3ac:	6800      	ldr	r0, [r0, #0]
 23fc3ae:	4b04      	ldr	r3, [pc, #16]	; (23fc3c0 <hal_gpio_mode+0x18>)
 23fc3b0:	4403      	add	r3, r0
 23fc3b2:	681b      	ldr	r3, [r3, #0]
 23fc3b4:	689b      	ldr	r3, [r3, #8]
 23fc3b6:	9302      	str	r3, [sp, #8]
 23fc3b8:	bd09      	pop	{r0, r3, pc}
 23fc3ba:	0000      	.short	0x0000
 23fc3bc:	1007ac84 	.word	0x1007ac84
 23fc3c0:	00000014 	.word	0x00000014

023fc3c4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc3c4:	b509      	push	{r0, r3, lr}
 23fc3c6:	4804      	ldr	r0, [pc, #16]	; (23fc3d8 <hal_gpio_get_mode+0x14>)
 23fc3c8:	6800      	ldr	r0, [r0, #0]
 23fc3ca:	4b04      	ldr	r3, [pc, #16]	; (23fc3dc <hal_gpio_get_mode+0x18>)
 23fc3cc:	4403      	add	r3, r0
 23fc3ce:	681b      	ldr	r3, [r3, #0]
 23fc3d0:	68db      	ldr	r3, [r3, #12]
 23fc3d2:	9302      	str	r3, [sp, #8]
 23fc3d4:	bd09      	pop	{r0, r3, pc}
 23fc3d6:	0000      	.short	0x0000
 23fc3d8:	1007ac84 	.word	0x1007ac84
 23fc3dc:	00000014 	.word	0x00000014

023fc3e0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc3e0:	b509      	push	{r0, r3, lr}
 23fc3e2:	4804      	ldr	r0, [pc, #16]	; (23fc3f4 <hal_gpio_write+0x14>)
 23fc3e4:	6800      	ldr	r0, [r0, #0]
 23fc3e6:	4b04      	ldr	r3, [pc, #16]	; (23fc3f8 <hal_gpio_write+0x18>)
 23fc3e8:	4403      	add	r3, r0
 23fc3ea:	681b      	ldr	r3, [r3, #0]
 23fc3ec:	691b      	ldr	r3, [r3, #16]
 23fc3ee:	9302      	str	r3, [sp, #8]
 23fc3f0:	bd09      	pop	{r0, r3, pc}
 23fc3f2:	0000      	.short	0x0000
 23fc3f4:	1007ac84 	.word	0x1007ac84
 23fc3f8:	00000014 	.word	0x00000014

023fc3fc <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
 23fc3fc:	b509      	push	{r0, r3, lr}
 23fc3fe:	4804      	ldr	r0, [pc, #16]	; (23fc410 <hal_gpio_pulse_in+0x14>)
 23fc400:	6800      	ldr	r0, [r0, #0]
 23fc402:	4b04      	ldr	r3, [pc, #16]	; (23fc414 <hal_gpio_pulse_in+0x18>)
 23fc404:	4403      	add	r3, r0
 23fc406:	681b      	ldr	r3, [r3, #0]
 23fc408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc40a:	9302      	str	r3, [sp, #8]
 23fc40c:	bd09      	pop	{r0, r3, pc}
 23fc40e:	0000      	.short	0x0000
 23fc410:	1007ac84 	.word	0x1007ac84
 23fc414:	00000014 	.word	0x00000014

023fc418 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc418:	b509      	push	{r0, r3, lr}
 23fc41a:	4804      	ldr	r0, [pc, #16]	; (23fc42c <hal_i2c_write+0x14>)
 23fc41c:	6800      	ldr	r0, [r0, #0]
 23fc41e:	4b04      	ldr	r3, [pc, #16]	; (23fc430 <hal_i2c_write+0x18>)
 23fc420:	4403      	add	r3, r0
 23fc422:	681b      	ldr	r3, [r3, #0]
 23fc424:	6a1b      	ldr	r3, [r3, #32]
 23fc426:	9302      	str	r3, [sp, #8]
 23fc428:	bd09      	pop	{r0, r3, pc}
 23fc42a:	0000      	.short	0x0000
 23fc42c:	1007ac84 	.word	0x1007ac84
 23fc430:	00000010 	.word	0x00000010

023fc434 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc434:	b509      	push	{r0, r3, lr}
 23fc436:	4804      	ldr	r0, [pc, #16]	; (23fc448 <hal_i2c_available+0x14>)
 23fc438:	6800      	ldr	r0, [r0, #0]
 23fc43a:	4b04      	ldr	r3, [pc, #16]	; (23fc44c <hal_i2c_available+0x18>)
 23fc43c:	4403      	add	r3, r0
 23fc43e:	681b      	ldr	r3, [r3, #0]
 23fc440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc442:	9302      	str	r3, [sp, #8]
 23fc444:	bd09      	pop	{r0, r3, pc}
 23fc446:	0000      	.short	0x0000
 23fc448:	1007ac84 	.word	0x1007ac84
 23fc44c:	00000010 	.word	0x00000010

023fc450 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc450:	b509      	push	{r0, r3, lr}
 23fc452:	4804      	ldr	r0, [pc, #16]	; (23fc464 <hal_i2c_read+0x14>)
 23fc454:	6800      	ldr	r0, [r0, #0]
 23fc456:	4b04      	ldr	r3, [pc, #16]	; (23fc468 <hal_i2c_read+0x18>)
 23fc458:	4403      	add	r3, r0
 23fc45a:	681b      	ldr	r3, [r3, #0]
 23fc45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc45e:	9302      	str	r3, [sp, #8]
 23fc460:	bd09      	pop	{r0, r3, pc}
 23fc462:	0000      	.short	0x0000
 23fc464:	1007ac84 	.word	0x1007ac84
 23fc468:	00000010 	.word	0x00000010

023fc46c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc46c:	b509      	push	{r0, r3, lr}
 23fc46e:	4804      	ldr	r0, [pc, #16]	; (23fc480 <hal_i2c_peek+0x14>)
 23fc470:	6800      	ldr	r0, [r0, #0]
 23fc472:	4b04      	ldr	r3, [pc, #16]	; (23fc484 <hal_i2c_peek+0x18>)
 23fc474:	4403      	add	r3, r0
 23fc476:	681b      	ldr	r3, [r3, #0]
 23fc478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc47a:	9302      	str	r3, [sp, #8]
 23fc47c:	bd09      	pop	{r0, r3, pc}
 23fc47e:	0000      	.short	0x0000
 23fc480:	1007ac84 	.word	0x1007ac84
 23fc484:	00000010 	.word	0x00000010

023fc488 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc488:	b509      	push	{r0, r3, lr}
 23fc48a:	4804      	ldr	r0, [pc, #16]	; (23fc49c <hal_i2c_flush+0x14>)
 23fc48c:	6800      	ldr	r0, [r0, #0]
 23fc48e:	4b04      	ldr	r3, [pc, #16]	; (23fc4a0 <hal_i2c_flush+0x18>)
 23fc490:	4403      	add	r3, r0
 23fc492:	681b      	ldr	r3, [r3, #0]
 23fc494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc496:	9302      	str	r3, [sp, #8]
 23fc498:	bd09      	pop	{r0, r3, pc}
 23fc49a:	0000      	.short	0x0000
 23fc49c:	1007ac84 	.word	0x1007ac84
 23fc4a0:	00000010 	.word	0x00000010

023fc4a4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc4a4:	b509      	push	{r0, r3, lr}
 23fc4a6:	4804      	ldr	r0, [pc, #16]	; (23fc4b8 <hal_i2c_is_enabled+0x14>)
 23fc4a8:	6800      	ldr	r0, [r0, #0]
 23fc4aa:	4b04      	ldr	r3, [pc, #16]	; (23fc4bc <hal_i2c_is_enabled+0x18>)
 23fc4ac:	4403      	add	r3, r0
 23fc4ae:	681b      	ldr	r3, [r3, #0]
 23fc4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc4b2:	9302      	str	r3, [sp, #8]
 23fc4b4:	bd09      	pop	{r0, r3, pc}
 23fc4b6:	0000      	.short	0x0000
 23fc4b8:	1007ac84 	.word	0x1007ac84
 23fc4bc:	00000010 	.word	0x00000010

023fc4c0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc4c0:	b509      	push	{r0, r3, lr}
 23fc4c2:	4804      	ldr	r0, [pc, #16]	; (23fc4d4 <hal_i2c_init+0x14>)
 23fc4c4:	6800      	ldr	r0, [r0, #0]
 23fc4c6:	4b04      	ldr	r3, [pc, #16]	; (23fc4d8 <hal_i2c_init+0x18>)
 23fc4c8:	4403      	add	r3, r0
 23fc4ca:	681b      	ldr	r3, [r3, #0]
 23fc4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc4ce:	9302      	str	r3, [sp, #8]
 23fc4d0:	bd09      	pop	{r0, r3, pc}
 23fc4d2:	0000      	.short	0x0000
 23fc4d4:	1007ac84 	.word	0x1007ac84
 23fc4d8:	00000010 	.word	0x00000010

023fc4dc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23fc4dc:	b509      	push	{r0, r3, lr}
 23fc4de:	4804      	ldr	r0, [pc, #16]	; (23fc4f0 <if_index_to_name+0x14>)
 23fc4e0:	6800      	ldr	r0, [r0, #0]
 23fc4e2:	4b04      	ldr	r3, [pc, #16]	; (23fc4f4 <if_index_to_name+0x18>)
 23fc4e4:	4403      	add	r3, r0
 23fc4e6:	681b      	ldr	r3, [r3, #0]
 23fc4e8:	695b      	ldr	r3, [r3, #20]
 23fc4ea:	9302      	str	r3, [sp, #8]
 23fc4ec:	bd09      	pop	{r0, r3, pc}
 23fc4ee:	0000      	.short	0x0000
 23fc4f0:	1007ac84 	.word	0x1007ac84
 23fc4f4:	00000054 	.word	0x00000054

023fc4f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc4f8:	b509      	push	{r0, r3, lr}
 23fc4fa:	4804      	ldr	r0, [pc, #16]	; (23fc50c <inet_inet_ntop+0x14>)
 23fc4fc:	6800      	ldr	r0, [r0, #0]
 23fc4fe:	4b04      	ldr	r3, [pc, #16]	; (23fc510 <inet_inet_ntop+0x18>)
 23fc500:	4403      	add	r3, r0
 23fc502:	681b      	ldr	r3, [r3, #0]
 23fc504:	695b      	ldr	r3, [r3, #20]
 23fc506:	9302      	str	r3, [sp, #8]
 23fc508:	bd09      	pop	{r0, r3, pc}
 23fc50a:	0000      	.short	0x0000
 23fc50c:	1007ac84 	.word	0x1007ac84
 23fc510:	0000004c 	.word	0x0000004c

023fc514 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23fc514:	b509      	push	{r0, r3, lr}
 23fc516:	4804      	ldr	r0, [pc, #16]	; (23fc528 <inet_htonl+0x14>)
 23fc518:	6800      	ldr	r0, [r0, #0]
 23fc51a:	4b04      	ldr	r3, [pc, #16]	; (23fc52c <inet_htonl+0x18>)
 23fc51c:	4403      	add	r3, r0
 23fc51e:	681b      	ldr	r3, [r3, #0]
 23fc520:	6a1b      	ldr	r3, [r3, #32]
 23fc522:	9302      	str	r3, [sp, #8]
 23fc524:	bd09      	pop	{r0, r3, pc}
 23fc526:	0000      	.short	0x0000
 23fc528:	1007ac84 	.word	0x1007ac84
 23fc52c:	0000004c 	.word	0x0000004c

023fc530 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23fc530:	b509      	push	{r0, r3, lr}
 23fc532:	4804      	ldr	r0, [pc, #16]	; (23fc544 <inet_htons+0x14>)
 23fc534:	6800      	ldr	r0, [r0, #0]
 23fc536:	4b04      	ldr	r3, [pc, #16]	; (23fc548 <inet_htons+0x18>)
 23fc538:	4403      	add	r3, r0
 23fc53a:	681b      	ldr	r3, [r3, #0]
 23fc53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc53e:	9302      	str	r3, [sp, #8]
 23fc540:	bd09      	pop	{r0, r3, pc}
 23fc542:	0000      	.short	0x0000
 23fc544:	1007ac84 	.word	0x1007ac84
 23fc548:	0000004c 	.word	0x0000004c

023fc54c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc54c:	b509      	push	{r0, r3, lr}
 23fc54e:	4804      	ldr	r0, [pc, #16]	; (23fc560 <netdb_freeaddrinfo+0x14>)
 23fc550:	6800      	ldr	r0, [r0, #0]
 23fc552:	4b04      	ldr	r3, [pc, #16]	; (23fc564 <netdb_freeaddrinfo+0x18>)
 23fc554:	4403      	add	r3, r0
 23fc556:	681b      	ldr	r3, [r3, #0]
 23fc558:	689b      	ldr	r3, [r3, #8]
 23fc55a:	9302      	str	r3, [sp, #8]
 23fc55c:	bd09      	pop	{r0, r3, pc}
 23fc55e:	0000      	.short	0x0000
 23fc560:	1007ac84 	.word	0x1007ac84
 23fc564:	00000050 	.word	0x00000050

023fc568 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc568:	b509      	push	{r0, r3, lr}
 23fc56a:	4804      	ldr	r0, [pc, #16]	; (23fc57c <netdb_getaddrinfo+0x14>)
 23fc56c:	6800      	ldr	r0, [r0, #0]
 23fc56e:	4b04      	ldr	r3, [pc, #16]	; (23fc580 <netdb_getaddrinfo+0x18>)
 23fc570:	4403      	add	r3, r0
 23fc572:	681b      	ldr	r3, [r3, #0]
 23fc574:	68db      	ldr	r3, [r3, #12]
 23fc576:	9302      	str	r3, [sp, #8]
 23fc578:	bd09      	pop	{r0, r3, pc}
 23fc57a:	0000      	.short	0x0000
 23fc57c:	1007ac84 	.word	0x1007ac84
 23fc580:	00000050 	.word	0x00000050

023fc584 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23fc584:	b509      	push	{r0, r3, lr}
 23fc586:	4804      	ldr	r0, [pc, #16]	; (23fc598 <sock_setsockopt+0x14>)
 23fc588:	6800      	ldr	r0, [r0, #0]
 23fc58a:	4b04      	ldr	r3, [pc, #16]	; (23fc59c <sock_setsockopt+0x18>)
 23fc58c:	4403      	add	r3, r0
 23fc58e:	681b      	ldr	r3, [r3, #0]
 23fc590:	699b      	ldr	r3, [r3, #24]
 23fc592:	9302      	str	r3, [sp, #8]
 23fc594:	bd09      	pop	{r0, r3, pc}
 23fc596:	0000      	.short	0x0000
 23fc598:	1007ac84 	.word	0x1007ac84
 23fc59c:	00000020 	.word	0x00000020

023fc5a0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23fc5a0:	b509      	push	{r0, r3, lr}
 23fc5a2:	4804      	ldr	r0, [pc, #16]	; (23fc5b4 <sock_close+0x14>)
 23fc5a4:	6800      	ldr	r0, [r0, #0]
 23fc5a6:	4b04      	ldr	r3, [pc, #16]	; (23fc5b8 <sock_close+0x18>)
 23fc5a8:	4403      	add	r3, r0
 23fc5aa:	681b      	ldr	r3, [r3, #0]
 23fc5ac:	69db      	ldr	r3, [r3, #28]
 23fc5ae:	9302      	str	r3, [sp, #8]
 23fc5b0:	bd09      	pop	{r0, r3, pc}
 23fc5b2:	0000      	.short	0x0000
 23fc5b4:	1007ac84 	.word	0x1007ac84
 23fc5b8:	00000020 	.word	0x00000020

023fc5bc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23fc5bc:	b509      	push	{r0, r3, lr}
 23fc5be:	4804      	ldr	r0, [pc, #16]	; (23fc5d0 <sock_connect+0x14>)
 23fc5c0:	6800      	ldr	r0, [r0, #0]
 23fc5c2:	4b04      	ldr	r3, [pc, #16]	; (23fc5d4 <sock_connect+0x18>)
 23fc5c4:	4403      	add	r3, r0
 23fc5c6:	681b      	ldr	r3, [r3, #0]
 23fc5c8:	6a1b      	ldr	r3, [r3, #32]
 23fc5ca:	9302      	str	r3, [sp, #8]
 23fc5cc:	bd09      	pop	{r0, r3, pc}
 23fc5ce:	0000      	.short	0x0000
 23fc5d0:	1007ac84 	.word	0x1007ac84
 23fc5d4:	00000020 	.word	0x00000020

023fc5d8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23fc5d8:	b509      	push	{r0, r3, lr}
 23fc5da:	4804      	ldr	r0, [pc, #16]	; (23fc5ec <sock_recv+0x14>)
 23fc5dc:	6800      	ldr	r0, [r0, #0]
 23fc5de:	4b04      	ldr	r3, [pc, #16]	; (23fc5f0 <sock_recv+0x18>)
 23fc5e0:	4403      	add	r3, r0
 23fc5e2:	681b      	ldr	r3, [r3, #0]
 23fc5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc5e6:	9302      	str	r3, [sp, #8]
 23fc5e8:	bd09      	pop	{r0, r3, pc}
 23fc5ea:	0000      	.short	0x0000
 23fc5ec:	1007ac84 	.word	0x1007ac84
 23fc5f0:	00000020 	.word	0x00000020

023fc5f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23fc5f4:	b509      	push	{r0, r3, lr}
 23fc5f6:	4804      	ldr	r0, [pc, #16]	; (23fc608 <sock_send+0x14>)
 23fc5f8:	6800      	ldr	r0, [r0, #0]
 23fc5fa:	4b04      	ldr	r3, [pc, #16]	; (23fc60c <sock_send+0x18>)
 23fc5fc:	4403      	add	r3, r0
 23fc5fe:	681b      	ldr	r3, [r3, #0]
 23fc600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc602:	9302      	str	r3, [sp, #8]
 23fc604:	bd09      	pop	{r0, r3, pc}
 23fc606:	0000      	.short	0x0000
 23fc608:	1007ac84 	.word	0x1007ac84
 23fc60c:	00000020 	.word	0x00000020

023fc610 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23fc610:	b509      	push	{r0, r3, lr}
 23fc612:	4804      	ldr	r0, [pc, #16]	; (23fc624 <sock_socket+0x14>)
 23fc614:	6800      	ldr	r0, [r0, #0]
 23fc616:	4b04      	ldr	r3, [pc, #16]	; (23fc628 <sock_socket+0x18>)
 23fc618:	4403      	add	r3, r0
 23fc61a:	681b      	ldr	r3, [r3, #0]
 23fc61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc61e:	9302      	str	r3, [sp, #8]
 23fc620:	bd09      	pop	{r0, r3, pc}
 23fc622:	0000      	.short	0x0000
 23fc624:	1007ac84 	.word	0x1007ac84
 23fc628:	00000020 	.word	0x00000020

023fc62c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc62c:	b509      	push	{r0, r3, lr}
 23fc62e:	4804      	ldr	r0, [pc, #16]	; (23fc640 <hal_spi_init+0x14>)
 23fc630:	6800      	ldr	r0, [r0, #0]
 23fc632:	4b04      	ldr	r3, [pc, #16]	; (23fc644 <hal_spi_init+0x18>)
 23fc634:	4403      	add	r3, r0
 23fc636:	681b      	ldr	r3, [r3, #0]
 23fc638:	69db      	ldr	r3, [r3, #28]
 23fc63a:	9302      	str	r3, [sp, #8]
 23fc63c:	bd09      	pop	{r0, r3, pc}
 23fc63e:	0000      	.short	0x0000
 23fc640:	1007ac84 	.word	0x1007ac84
 23fc644:	00000018 	.word	0x00000018

023fc648 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc648:	b509      	push	{r0, r3, lr}
 23fc64a:	4804      	ldr	r0, [pc, #16]	; (23fc65c <hal_spi_is_enabled+0x14>)
 23fc64c:	6800      	ldr	r0, [r0, #0]
 23fc64e:	4b04      	ldr	r3, [pc, #16]	; (23fc660 <hal_spi_is_enabled+0x18>)
 23fc650:	4403      	add	r3, r0
 23fc652:	681b      	ldr	r3, [r3, #0]
 23fc654:	6a1b      	ldr	r3, [r3, #32]
 23fc656:	9302      	str	r3, [sp, #8]
 23fc658:	bd09      	pop	{r0, r3, pc}
 23fc65a:	0000      	.short	0x0000
 23fc65c:	1007ac84 	.word	0x1007ac84
 23fc660:	00000018 	.word	0x00000018

023fc664 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc664:	b509      	push	{r0, r3, lr}
 23fc666:	4804      	ldr	r0, [pc, #16]	; (23fc678 <hal_usart_end+0x14>)
 23fc668:	6800      	ldr	r0, [r0, #0]
 23fc66a:	4b04      	ldr	r3, [pc, #16]	; (23fc67c <hal_usart_end+0x18>)
 23fc66c:	4403      	add	r3, r0
 23fc66e:	681b      	ldr	r3, [r3, #0]
 23fc670:	689b      	ldr	r3, [r3, #8]
 23fc672:	9302      	str	r3, [sp, #8]
 23fc674:	bd09      	pop	{r0, r3, pc}
 23fc676:	0000      	.short	0x0000
 23fc678:	1007ac84 	.word	0x1007ac84
 23fc67c:	00000024 	.word	0x00000024

023fc680 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc680:	b509      	push	{r0, r3, lr}
 23fc682:	4804      	ldr	r0, [pc, #16]	; (23fc694 <hal_usart_write+0x14>)
 23fc684:	6800      	ldr	r0, [r0, #0]
 23fc686:	4b04      	ldr	r3, [pc, #16]	; (23fc698 <hal_usart_write+0x18>)
 23fc688:	4403      	add	r3, r0
 23fc68a:	681b      	ldr	r3, [r3, #0]
 23fc68c:	68db      	ldr	r3, [r3, #12]
 23fc68e:	9302      	str	r3, [sp, #8]
 23fc690:	bd09      	pop	{r0, r3, pc}
 23fc692:	0000      	.short	0x0000
 23fc694:	1007ac84 	.word	0x1007ac84
 23fc698:	00000024 	.word	0x00000024

023fc69c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc69c:	b509      	push	{r0, r3, lr}
 23fc69e:	4804      	ldr	r0, [pc, #16]	; (23fc6b0 <hal_usart_available+0x14>)
 23fc6a0:	6800      	ldr	r0, [r0, #0]
 23fc6a2:	4b04      	ldr	r3, [pc, #16]	; (23fc6b4 <hal_usart_available+0x18>)
 23fc6a4:	4403      	add	r3, r0
 23fc6a6:	681b      	ldr	r3, [r3, #0]
 23fc6a8:	691b      	ldr	r3, [r3, #16]
 23fc6aa:	9302      	str	r3, [sp, #8]
 23fc6ac:	bd09      	pop	{r0, r3, pc}
 23fc6ae:	0000      	.short	0x0000
 23fc6b0:	1007ac84 	.word	0x1007ac84
 23fc6b4:	00000024 	.word	0x00000024

023fc6b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc6b8:	b509      	push	{r0, r3, lr}
 23fc6ba:	4804      	ldr	r0, [pc, #16]	; (23fc6cc <hal_usart_read+0x14>)
 23fc6bc:	6800      	ldr	r0, [r0, #0]
 23fc6be:	4b04      	ldr	r3, [pc, #16]	; (23fc6d0 <hal_usart_read+0x18>)
 23fc6c0:	4403      	add	r3, r0
 23fc6c2:	681b      	ldr	r3, [r3, #0]
 23fc6c4:	695b      	ldr	r3, [r3, #20]
 23fc6c6:	9302      	str	r3, [sp, #8]
 23fc6c8:	bd09      	pop	{r0, r3, pc}
 23fc6ca:	0000      	.short	0x0000
 23fc6cc:	1007ac84 	.word	0x1007ac84
 23fc6d0:	00000024 	.word	0x00000024

023fc6d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc6d4:	b509      	push	{r0, r3, lr}
 23fc6d6:	4804      	ldr	r0, [pc, #16]	; (23fc6e8 <hal_usart_peek+0x14>)
 23fc6d8:	6800      	ldr	r0, [r0, #0]
 23fc6da:	4b04      	ldr	r3, [pc, #16]	; (23fc6ec <hal_usart_peek+0x18>)
 23fc6dc:	4403      	add	r3, r0
 23fc6de:	681b      	ldr	r3, [r3, #0]
 23fc6e0:	699b      	ldr	r3, [r3, #24]
 23fc6e2:	9302      	str	r3, [sp, #8]
 23fc6e4:	bd09      	pop	{r0, r3, pc}
 23fc6e6:	0000      	.short	0x0000
 23fc6e8:	1007ac84 	.word	0x1007ac84
 23fc6ec:	00000024 	.word	0x00000024

023fc6f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc6f0:	b509      	push	{r0, r3, lr}
 23fc6f2:	4804      	ldr	r0, [pc, #16]	; (23fc704 <hal_usart_flush+0x14>)
 23fc6f4:	6800      	ldr	r0, [r0, #0]
 23fc6f6:	4b04      	ldr	r3, [pc, #16]	; (23fc708 <hal_usart_flush+0x18>)
 23fc6f8:	4403      	add	r3, r0
 23fc6fa:	681b      	ldr	r3, [r3, #0]
 23fc6fc:	69db      	ldr	r3, [r3, #28]
 23fc6fe:	9302      	str	r3, [sp, #8]
 23fc700:	bd09      	pop	{r0, r3, pc}
 23fc702:	0000      	.short	0x0000
 23fc704:	1007ac84 	.word	0x1007ac84
 23fc708:	00000024 	.word	0x00000024

023fc70c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc70c:	b509      	push	{r0, r3, lr}
 23fc70e:	4804      	ldr	r0, [pc, #16]	; (23fc720 <hal_usart_is_enabled+0x14>)
 23fc710:	6800      	ldr	r0, [r0, #0]
 23fc712:	4b04      	ldr	r3, [pc, #16]	; (23fc724 <hal_usart_is_enabled+0x18>)
 23fc714:	4403      	add	r3, r0
 23fc716:	681b      	ldr	r3, [r3, #0]
 23fc718:	6a1b      	ldr	r3, [r3, #32]
 23fc71a:	9302      	str	r3, [sp, #8]
 23fc71c:	bd09      	pop	{r0, r3, pc}
 23fc71e:	0000      	.short	0x0000
 23fc720:	1007ac84 	.word	0x1007ac84
 23fc724:	00000024 	.word	0x00000024

023fc728 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc728:	b509      	push	{r0, r3, lr}
 23fc72a:	4804      	ldr	r0, [pc, #16]	; (23fc73c <hal_usart_available_data_for_write+0x14>)
 23fc72c:	6800      	ldr	r0, [r0, #0]
 23fc72e:	4b04      	ldr	r3, [pc, #16]	; (23fc740 <hal_usart_available_data_for_write+0x18>)
 23fc730:	4403      	add	r3, r0
 23fc732:	681b      	ldr	r3, [r3, #0]
 23fc734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc736:	9302      	str	r3, [sp, #8]
 23fc738:	bd09      	pop	{r0, r3, pc}
 23fc73a:	0000      	.short	0x0000
 23fc73c:	1007ac84 	.word	0x1007ac84
 23fc740:	00000024 	.word	0x00000024

023fc744 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc744:	b509      	push	{r0, r3, lr}
 23fc746:	4804      	ldr	r0, [pc, #16]	; (23fc758 <hal_usart_begin_config+0x14>)
 23fc748:	6800      	ldr	r0, [r0, #0]
 23fc74a:	4b04      	ldr	r3, [pc, #16]	; (23fc75c <hal_usart_begin_config+0x18>)
 23fc74c:	4403      	add	r3, r0
 23fc74e:	681b      	ldr	r3, [r3, #0]
 23fc750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc752:	9302      	str	r3, [sp, #8]
 23fc754:	bd09      	pop	{r0, r3, pc}
 23fc756:	0000      	.short	0x0000
 23fc758:	1007ac84 	.word	0x1007ac84
 23fc75c:	00000024 	.word	0x00000024

023fc760 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc760:	b509      	push	{r0, r3, lr}
 23fc762:	4804      	ldr	r0, [pc, #16]	; (23fc774 <hal_usart_init_ex+0x14>)
 23fc764:	6800      	ldr	r0, [r0, #0]
 23fc766:	4b04      	ldr	r3, [pc, #16]	; (23fc778 <hal_usart_init_ex+0x18>)
 23fc768:	4403      	add	r3, r0
 23fc76a:	681b      	ldr	r3, [r3, #0]
 23fc76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc76e:	9302      	str	r3, [sp, #8]
 23fc770:	bd09      	pop	{r0, r3, pc}
 23fc772:	0000      	.short	0x0000
 23fc774:	1007ac84 	.word	0x1007ac84
 23fc778:	00000024 	.word	0x00000024

023fc77c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc77c:	b509      	push	{r0, r3, lr}
 23fc77e:	4804      	ldr	r0, [pc, #16]	; (23fc790 <HAL_USB_USART_Init+0x14>)
 23fc780:	6800      	ldr	r0, [r0, #0]
 23fc782:	4b04      	ldr	r3, [pc, #16]	; (23fc794 <HAL_USB_USART_Init+0x18>)
 23fc784:	4403      	add	r3, r0
 23fc786:	681b      	ldr	r3, [r3, #0]
 23fc788:	681b      	ldr	r3, [r3, #0]
 23fc78a:	9302      	str	r3, [sp, #8]
 23fc78c:	bd09      	pop	{r0, r3, pc}
 23fc78e:	0000      	.short	0x0000
 23fc790:	1007ac84 	.word	0x1007ac84
 23fc794:	00000034 	.word	0x00000034

023fc798 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc798:	b509      	push	{r0, r3, lr}
 23fc79a:	4804      	ldr	r0, [pc, #16]	; (23fc7ac <HAL_USB_USART_Begin+0x14>)
 23fc79c:	6800      	ldr	r0, [r0, #0]
 23fc79e:	4b04      	ldr	r3, [pc, #16]	; (23fc7b0 <HAL_USB_USART_Begin+0x18>)
 23fc7a0:	4403      	add	r3, r0
 23fc7a2:	681b      	ldr	r3, [r3, #0]
 23fc7a4:	685b      	ldr	r3, [r3, #4]
 23fc7a6:	9302      	str	r3, [sp, #8]
 23fc7a8:	bd09      	pop	{r0, r3, pc}
 23fc7aa:	0000      	.short	0x0000
 23fc7ac:	1007ac84 	.word	0x1007ac84
 23fc7b0:	00000034 	.word	0x00000034

023fc7b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc7b4:	b509      	push	{r0, r3, lr}
 23fc7b6:	4804      	ldr	r0, [pc, #16]	; (23fc7c8 <HAL_USB_USART_End+0x14>)
 23fc7b8:	6800      	ldr	r0, [r0, #0]
 23fc7ba:	4b04      	ldr	r3, [pc, #16]	; (23fc7cc <HAL_USB_USART_End+0x18>)
 23fc7bc:	4403      	add	r3, r0
 23fc7be:	681b      	ldr	r3, [r3, #0]
 23fc7c0:	689b      	ldr	r3, [r3, #8]
 23fc7c2:	9302      	str	r3, [sp, #8]
 23fc7c4:	bd09      	pop	{r0, r3, pc}
 23fc7c6:	0000      	.short	0x0000
 23fc7c8:	1007ac84 	.word	0x1007ac84
 23fc7cc:	00000034 	.word	0x00000034

023fc7d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc7d0:	b509      	push	{r0, r3, lr}
 23fc7d2:	4804      	ldr	r0, [pc, #16]	; (23fc7e4 <HAL_USB_USART_Available_Data+0x14>)
 23fc7d4:	6800      	ldr	r0, [r0, #0]
 23fc7d6:	4b04      	ldr	r3, [pc, #16]	; (23fc7e8 <HAL_USB_USART_Available_Data+0x18>)
 23fc7d8:	4403      	add	r3, r0
 23fc7da:	681b      	ldr	r3, [r3, #0]
 23fc7dc:	691b      	ldr	r3, [r3, #16]
 23fc7de:	9302      	str	r3, [sp, #8]
 23fc7e0:	bd09      	pop	{r0, r3, pc}
 23fc7e2:	0000      	.short	0x0000
 23fc7e4:	1007ac84 	.word	0x1007ac84
 23fc7e8:	00000034 	.word	0x00000034

023fc7ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc7ec:	b509      	push	{r0, r3, lr}
 23fc7ee:	4804      	ldr	r0, [pc, #16]	; (23fc800 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc7f0:	6800      	ldr	r0, [r0, #0]
 23fc7f2:	4b04      	ldr	r3, [pc, #16]	; (23fc804 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc7f4:	4403      	add	r3, r0
 23fc7f6:	681b      	ldr	r3, [r3, #0]
 23fc7f8:	695b      	ldr	r3, [r3, #20]
 23fc7fa:	9302      	str	r3, [sp, #8]
 23fc7fc:	bd09      	pop	{r0, r3, pc}
 23fc7fe:	0000      	.short	0x0000
 23fc800:	1007ac84 	.word	0x1007ac84
 23fc804:	00000034 	.word	0x00000034

023fc808 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc808:	b509      	push	{r0, r3, lr}
 23fc80a:	4804      	ldr	r0, [pc, #16]	; (23fc81c <HAL_USB_USART_Receive_Data+0x14>)
 23fc80c:	6800      	ldr	r0, [r0, #0]
 23fc80e:	4b04      	ldr	r3, [pc, #16]	; (23fc820 <HAL_USB_USART_Receive_Data+0x18>)
 23fc810:	4403      	add	r3, r0
 23fc812:	681b      	ldr	r3, [r3, #0]
 23fc814:	699b      	ldr	r3, [r3, #24]
 23fc816:	9302      	str	r3, [sp, #8]
 23fc818:	bd09      	pop	{r0, r3, pc}
 23fc81a:	0000      	.short	0x0000
 23fc81c:	1007ac84 	.word	0x1007ac84
 23fc820:	00000034 	.word	0x00000034

023fc824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc824:	b509      	push	{r0, r3, lr}
 23fc826:	4804      	ldr	r0, [pc, #16]	; (23fc838 <HAL_USB_USART_Send_Data+0x14>)
 23fc828:	6800      	ldr	r0, [r0, #0]
 23fc82a:	4b04      	ldr	r3, [pc, #16]	; (23fc83c <HAL_USB_USART_Send_Data+0x18>)
 23fc82c:	4403      	add	r3, r0
 23fc82e:	681b      	ldr	r3, [r3, #0]
 23fc830:	69db      	ldr	r3, [r3, #28]
 23fc832:	9302      	str	r3, [sp, #8]
 23fc834:	bd09      	pop	{r0, r3, pc}
 23fc836:	0000      	.short	0x0000
 23fc838:	1007ac84 	.word	0x1007ac84
 23fc83c:	00000034 	.word	0x00000034

023fc840 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc840:	b509      	push	{r0, r3, lr}
 23fc842:	4804      	ldr	r0, [pc, #16]	; (23fc854 <HAL_USB_USART_Flush_Data+0x14>)
 23fc844:	6800      	ldr	r0, [r0, #0]
 23fc846:	4b04      	ldr	r3, [pc, #16]	; (23fc858 <HAL_USB_USART_Flush_Data+0x18>)
 23fc848:	4403      	add	r3, r0
 23fc84a:	681b      	ldr	r3, [r3, #0]
 23fc84c:	6a1b      	ldr	r3, [r3, #32]
 23fc84e:	9302      	str	r3, [sp, #8]
 23fc850:	bd09      	pop	{r0, r3, pc}
 23fc852:	0000      	.short	0x0000
 23fc854:	1007ac84 	.word	0x1007ac84
 23fc858:	00000034 	.word	0x00000034

023fc85c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fc85c:	b509      	push	{r0, r3, lr}
 23fc85e:	4804      	ldr	r0, [pc, #16]	; (23fc870 <HAL_USB_USART_Is_Connected+0x14>)
 23fc860:	6800      	ldr	r0, [r0, #0]
 23fc862:	4b04      	ldr	r3, [pc, #16]	; (23fc874 <HAL_USB_USART_Is_Connected+0x18>)
 23fc864:	4403      	add	r3, r0
 23fc866:	681b      	ldr	r3, [r3, #0]
 23fc868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc86a:	9302      	str	r3, [sp, #8]
 23fc86c:	bd09      	pop	{r0, r3, pc}
 23fc86e:	0000      	.short	0x0000
 23fc870:	1007ac84 	.word	0x1007ac84
 23fc874:	00000034 	.word	0x00000034

023fc878 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc878:	b509      	push	{r0, r3, lr}
 23fc87a:	4804      	ldr	r0, [pc, #16]	; (23fc88c <panic_+0x14>)
 23fc87c:	6800      	ldr	r0, [r0, #0]
 23fc87e:	4b04      	ldr	r3, [pc, #16]	; (23fc890 <panic_+0x18>)
 23fc880:	4403      	add	r3, r0
 23fc882:	681b      	ldr	r3, [r3, #0]
 23fc884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc886:	9302      	str	r3, [sp, #8]
 23fc888:	bd09      	pop	{r0, r3, pc}
 23fc88a:	0000      	.short	0x0000
 23fc88c:	1007ac84 	.word	0x1007ac84
 23fc890:	00000048 	.word	0x00000048

023fc894 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fc894:	b509      	push	{r0, r3, lr}
 23fc896:	4804      	ldr	r0, [pc, #16]	; (23fc8a8 <log_message+0x14>)
 23fc898:	6800      	ldr	r0, [r0, #0]
 23fc89a:	4b04      	ldr	r3, [pc, #16]	; (23fc8ac <log_message+0x18>)
 23fc89c:	4403      	add	r3, r0
 23fc89e:	681b      	ldr	r3, [r3, #0]
 23fc8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc8a2:	9302      	str	r3, [sp, #8]
 23fc8a4:	bd09      	pop	{r0, r3, pc}
 23fc8a6:	0000      	.short	0x0000
 23fc8a8:	1007ac84 	.word	0x1007ac84
 23fc8ac:	00000048 	.word	0x00000048

023fc8b0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc8b0:	b509      	push	{r0, r3, lr}
 23fc8b2:	4804      	ldr	r0, [pc, #16]	; (23fc8c4 <log_level_name+0x14>)
 23fc8b4:	6800      	ldr	r0, [r0, #0]
 23fc8b6:	4b04      	ldr	r3, [pc, #16]	; (23fc8c8 <log_level_name+0x18>)
 23fc8b8:	4403      	add	r3, r0
 23fc8ba:	681b      	ldr	r3, [r3, #0]
 23fc8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc8be:	9302      	str	r3, [sp, #8]
 23fc8c0:	bd09      	pop	{r0, r3, pc}
 23fc8c2:	0000      	.short	0x0000
 23fc8c4:	1007ac84 	.word	0x1007ac84
 23fc8c8:	00000048 	.word	0x00000048

023fc8cc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc8cc:	b509      	push	{r0, r3, lr}
 23fc8ce:	4804      	ldr	r0, [pc, #16]	; (23fc8e0 <log_set_callbacks+0x14>)
 23fc8d0:	6800      	ldr	r0, [r0, #0]
 23fc8d2:	4b04      	ldr	r3, [pc, #16]	; (23fc8e4 <log_set_callbacks+0x18>)
 23fc8d4:	4403      	add	r3, r0
 23fc8d6:	681b      	ldr	r3, [r3, #0]
 23fc8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc8da:	9302      	str	r3, [sp, #8]
 23fc8dc:	bd09      	pop	{r0, r3, pc}
 23fc8de:	0000      	.short	0x0000
 23fc8e0:	1007ac84 	.word	0x1007ac84
 23fc8e4:	00000048 	.word	0x00000048

023fc8e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc8e8:	b509      	push	{r0, r3, lr}
 23fc8ea:	4804      	ldr	r0, [pc, #16]	; (23fc8fc <set_system_mode+0x14>)
 23fc8ec:	6800      	ldr	r0, [r0, #0]
 23fc8ee:	4b04      	ldr	r3, [pc, #16]	; (23fc900 <set_system_mode+0x18>)
 23fc8f0:	4403      	add	r3, r0
 23fc8f2:	681b      	ldr	r3, [r3, #0]
 23fc8f4:	685b      	ldr	r3, [r3, #4]
 23fc8f6:	9302      	str	r3, [sp, #8]
 23fc8f8:	bd09      	pop	{r0, r3, pc}
 23fc8fa:	0000      	.short	0x0000
 23fc8fc:	1007ac84 	.word	0x1007ac84
 23fc900:	00000008 	.word	0x00000008

023fc904 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc904:	b509      	push	{r0, r3, lr}
 23fc906:	4804      	ldr	r0, [pc, #16]	; (23fc918 <system_delay_ms+0x14>)
 23fc908:	6800      	ldr	r0, [r0, #0]
 23fc90a:	4b04      	ldr	r3, [pc, #16]	; (23fc91c <system_delay_ms+0x18>)
 23fc90c:	4403      	add	r3, r0
 23fc90e:	681b      	ldr	r3, [r3, #0]
 23fc910:	695b      	ldr	r3, [r3, #20]
 23fc912:	9302      	str	r3, [sp, #8]
 23fc914:	bd09      	pop	{r0, r3, pc}
 23fc916:	0000      	.short	0x0000
 23fc918:	1007ac84 	.word	0x1007ac84
 23fc91c:	00000008 	.word	0x00000008

023fc920 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc920:	b509      	push	{r0, r3, lr}
 23fc922:	4804      	ldr	r0, [pc, #16]	; (23fc934 <system_thread_set_state+0x14>)
 23fc924:	6800      	ldr	r0, [r0, #0]
 23fc926:	4b04      	ldr	r3, [pc, #16]	; (23fc938 <system_thread_set_state+0x18>)
 23fc928:	4403      	add	r3, r0
 23fc92a:	681b      	ldr	r3, [r3, #0]
 23fc92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc92e:	9302      	str	r3, [sp, #8]
 23fc930:	bd09      	pop	{r0, r3, pc}
 23fc932:	0000      	.short	0x0000
 23fc934:	1007ac84 	.word	0x1007ac84
 23fc938:	00000008 	.word	0x00000008

023fc93c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc93c:	b509      	push	{r0, r3, lr}
 23fc93e:	4804      	ldr	r0, [pc, #16]	; (23fc950 <system_ctrl_set_app_request_handler+0x14>)
 23fc940:	6800      	ldr	r0, [r0, #0]
 23fc942:	4b04      	ldr	r3, [pc, #16]	; (23fc954 <system_ctrl_set_app_request_handler+0x18>)
 23fc944:	4403      	add	r3, r0
 23fc946:	681b      	ldr	r3, [r3, #0]
 23fc948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc94c:	9302      	str	r3, [sp, #8]
 23fc94e:	bd09      	pop	{r0, r3, pc}
 23fc950:	1007ac84 	.word	0x1007ac84
 23fc954:	00000008 	.word	0x00000008

023fc958 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc958:	b509      	push	{r0, r3, lr}
 23fc95a:	4804      	ldr	r0, [pc, #16]	; (23fc96c <system_ctrl_set_result+0x14>)
 23fc95c:	6800      	ldr	r0, [r0, #0]
 23fc95e:	4b04      	ldr	r3, [pc, #16]	; (23fc970 <system_ctrl_set_result+0x18>)
 23fc960:	4403      	add	r3, r0
 23fc962:	681b      	ldr	r3, [r3, #0]
 23fc964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc968:	9302      	str	r3, [sp, #8]
 23fc96a:	bd09      	pop	{r0, r3, pc}
 23fc96c:	1007ac84 	.word	0x1007ac84
 23fc970:	00000008 	.word	0x00000008

023fc974 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fc974:	b509      	push	{r0, r3, lr}
 23fc976:	4804      	ldr	r0, [pc, #16]	; (23fc988 <spark_process+0x14>)
 23fc978:	6800      	ldr	r0, [r0, #0]
 23fc97a:	4b04      	ldr	r3, [pc, #16]	; (23fc98c <spark_process+0x18>)
 23fc97c:	4403      	add	r3, r0
 23fc97e:	681b      	ldr	r3, [r3, #0]
 23fc980:	689b      	ldr	r3, [r3, #8]
 23fc982:	9302      	str	r3, [sp, #8]
 23fc984:	bd09      	pop	{r0, r3, pc}
 23fc986:	0000      	.short	0x0000
 23fc988:	1007ac84 	.word	0x1007ac84
 23fc98c:	0000002c 	.word	0x0000002c

023fc990 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc990:	b509      	push	{r0, r3, lr}
 23fc992:	4804      	ldr	r0, [pc, #16]	; (23fc9a4 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc994:	6800      	ldr	r0, [r0, #0]
 23fc996:	4b04      	ldr	r3, [pc, #16]	; (23fc9a8 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc998:	4403      	add	r3, r0
 23fc99a:	681b      	ldr	r3, [r3, #0]
 23fc99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc99e:	9302      	str	r3, [sp, #8]
 23fc9a0:	bd09      	pop	{r0, r3, pc}
 23fc9a2:	0000      	.short	0x0000
 23fc9a4:	1007ac84 	.word	0x1007ac84
 23fc9a8:	0000002c 	.word	0x0000002c

023fc9ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc9ac:	b509      	push	{r0, r3, lr}
 23fc9ae:	4804      	ldr	r0, [pc, #16]	; (23fc9c0 <network_connect+0x14>)
 23fc9b0:	6800      	ldr	r0, [r0, #0]
 23fc9b2:	4b04      	ldr	r3, [pc, #16]	; (23fc9c4 <network_connect+0x18>)
 23fc9b4:	4403      	add	r3, r0
 23fc9b6:	681b      	ldr	r3, [r3, #0]
 23fc9b8:	685b      	ldr	r3, [r3, #4]
 23fc9ba:	9302      	str	r3, [sp, #8]
 23fc9bc:	bd09      	pop	{r0, r3, pc}
 23fc9be:	0000      	.short	0x0000
 23fc9c0:	1007ac84 	.word	0x1007ac84
 23fc9c4:	00000028 	.word	0x00000028

023fc9c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc9c8:	b509      	push	{r0, r3, lr}
 23fc9ca:	4804      	ldr	r0, [pc, #16]	; (23fc9dc <network_connecting+0x14>)
 23fc9cc:	6800      	ldr	r0, [r0, #0]
 23fc9ce:	4b04      	ldr	r3, [pc, #16]	; (23fc9e0 <network_connecting+0x18>)
 23fc9d0:	4403      	add	r3, r0
 23fc9d2:	681b      	ldr	r3, [r3, #0]
 23fc9d4:	689b      	ldr	r3, [r3, #8]
 23fc9d6:	9302      	str	r3, [sp, #8]
 23fc9d8:	bd09      	pop	{r0, r3, pc}
 23fc9da:	0000      	.short	0x0000
 23fc9dc:	1007ac84 	.word	0x1007ac84
 23fc9e0:	00000028 	.word	0x00000028

023fc9e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc9e4:	b509      	push	{r0, r3, lr}
 23fc9e6:	4804      	ldr	r0, [pc, #16]	; (23fc9f8 <network_disconnect+0x14>)
 23fc9e8:	6800      	ldr	r0, [r0, #0]
 23fc9ea:	4b04      	ldr	r3, [pc, #16]	; (23fc9fc <network_disconnect+0x18>)
 23fc9ec:	4403      	add	r3, r0
 23fc9ee:	681b      	ldr	r3, [r3, #0]
 23fc9f0:	68db      	ldr	r3, [r3, #12]
 23fc9f2:	9302      	str	r3, [sp, #8]
 23fc9f4:	bd09      	pop	{r0, r3, pc}
 23fc9f6:	0000      	.short	0x0000
 23fc9f8:	1007ac84 	.word	0x1007ac84
 23fc9fc:	00000028 	.word	0x00000028

023fca00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fca00:	b509      	push	{r0, r3, lr}
 23fca02:	4804      	ldr	r0, [pc, #16]	; (23fca14 <network_ready+0x14>)
 23fca04:	6800      	ldr	r0, [r0, #0]
 23fca06:	4b04      	ldr	r3, [pc, #16]	; (23fca18 <network_ready+0x18>)
 23fca08:	4403      	add	r3, r0
 23fca0a:	681b      	ldr	r3, [r3, #0]
 23fca0c:	691b      	ldr	r3, [r3, #16]
 23fca0e:	9302      	str	r3, [sp, #8]
 23fca10:	bd09      	pop	{r0, r3, pc}
 23fca12:	0000      	.short	0x0000
 23fca14:	1007ac84 	.word	0x1007ac84
 23fca18:	00000028 	.word	0x00000028

023fca1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fca1c:	b509      	push	{r0, r3, lr}
 23fca1e:	4804      	ldr	r0, [pc, #16]	; (23fca30 <network_on+0x14>)
 23fca20:	6800      	ldr	r0, [r0, #0]
 23fca22:	4b04      	ldr	r3, [pc, #16]	; (23fca34 <network_on+0x18>)
 23fca24:	4403      	add	r3, r0
 23fca26:	681b      	ldr	r3, [r3, #0]
 23fca28:	695b      	ldr	r3, [r3, #20]
 23fca2a:	9302      	str	r3, [sp, #8]
 23fca2c:	bd09      	pop	{r0, r3, pc}
 23fca2e:	0000      	.short	0x0000
 23fca30:	1007ac84 	.word	0x1007ac84
 23fca34:	00000028 	.word	0x00000028

023fca38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fca38:	b509      	push	{r0, r3, lr}
 23fca3a:	4804      	ldr	r0, [pc, #16]	; (23fca4c <network_off+0x14>)
 23fca3c:	6800      	ldr	r0, [r0, #0]
 23fca3e:	4b04      	ldr	r3, [pc, #16]	; (23fca50 <network_off+0x18>)
 23fca40:	4403      	add	r3, r0
 23fca42:	681b      	ldr	r3, [r3, #0]
 23fca44:	699b      	ldr	r3, [r3, #24]
 23fca46:	9302      	str	r3, [sp, #8]
 23fca48:	bd09      	pop	{r0, r3, pc}
 23fca4a:	0000      	.short	0x0000
 23fca4c:	1007ac84 	.word	0x1007ac84
 23fca50:	00000028 	.word	0x00000028

023fca54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fca54:	b509      	push	{r0, r3, lr}
 23fca56:	4804      	ldr	r0, [pc, #16]	; (23fca68 <network_listen+0x14>)
 23fca58:	6800      	ldr	r0, [r0, #0]
 23fca5a:	4b04      	ldr	r3, [pc, #16]	; (23fca6c <network_listen+0x18>)
 23fca5c:	4403      	add	r3, r0
 23fca5e:	681b      	ldr	r3, [r3, #0]
 23fca60:	69db      	ldr	r3, [r3, #28]
 23fca62:	9302      	str	r3, [sp, #8]
 23fca64:	bd09      	pop	{r0, r3, pc}
 23fca66:	0000      	.short	0x0000
 23fca68:	1007ac84 	.word	0x1007ac84
 23fca6c:	00000028 	.word	0x00000028

023fca70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fca70:	b509      	push	{r0, r3, lr}
 23fca72:	4804      	ldr	r0, [pc, #16]	; (23fca84 <network_listening+0x14>)
 23fca74:	6800      	ldr	r0, [r0, #0]
 23fca76:	4b04      	ldr	r3, [pc, #16]	; (23fca88 <network_listening+0x18>)
 23fca78:	4403      	add	r3, r0
 23fca7a:	681b      	ldr	r3, [r3, #0]
 23fca7c:	6a1b      	ldr	r3, [r3, #32]
 23fca7e:	9302      	str	r3, [sp, #8]
 23fca80:	bd09      	pop	{r0, r3, pc}
 23fca82:	0000      	.short	0x0000
 23fca84:	1007ac84 	.word	0x1007ac84
 23fca88:	00000028 	.word	0x00000028

023fca8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fca8c:	b509      	push	{r0, r3, lr}
 23fca8e:	4804      	ldr	r0, [pc, #16]	; (23fcaa0 <network_set_listen_timeout+0x14>)
 23fca90:	6800      	ldr	r0, [r0, #0]
 23fca92:	4b04      	ldr	r3, [pc, #16]	; (23fcaa4 <network_set_listen_timeout+0x18>)
 23fca94:	4403      	add	r3, r0
 23fca96:	681b      	ldr	r3, [r3, #0]
 23fca98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fca9a:	9302      	str	r3, [sp, #8]
 23fca9c:	bd09      	pop	{r0, r3, pc}
 23fca9e:	0000      	.short	0x0000
 23fcaa0:	1007ac84 	.word	0x1007ac84
 23fcaa4:	00000028 	.word	0x00000028

023fcaa8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fcaa8:	b509      	push	{r0, r3, lr}
 23fcaaa:	4804      	ldr	r0, [pc, #16]	; (23fcabc <network_get_listen_timeout+0x14>)
 23fcaac:	6800      	ldr	r0, [r0, #0]
 23fcaae:	4b04      	ldr	r3, [pc, #16]	; (23fcac0 <network_get_listen_timeout+0x18>)
 23fcab0:	4403      	add	r3, r0
 23fcab2:	681b      	ldr	r3, [r3, #0]
 23fcab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcab6:	9302      	str	r3, [sp, #8]
 23fcab8:	bd09      	pop	{r0, r3, pc}
 23fcaba:	0000      	.short	0x0000
 23fcabc:	1007ac84 	.word	0x1007ac84
 23fcac0:	00000028 	.word	0x00000028

023fcac4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fcac4:	b509      	push	{r0, r3, lr}
 23fcac6:	4804      	ldr	r0, [pc, #16]	; (23fcad8 <network_is_on+0x14>)
 23fcac8:	6800      	ldr	r0, [r0, #0]
 23fcaca:	4b04      	ldr	r3, [pc, #16]	; (23fcadc <network_is_on+0x18>)
 23fcacc:	4403      	add	r3, r0
 23fcace:	681b      	ldr	r3, [r3, #0]
 23fcad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcad2:	9302      	str	r3, [sp, #8]
 23fcad4:	bd09      	pop	{r0, r3, pc}
 23fcad6:	0000      	.short	0x0000
 23fcad8:	1007ac84 	.word	0x1007ac84
 23fcadc:	00000028 	.word	0x00000028

023fcae0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fcae0:	b509      	push	{r0, r3, lr}
 23fcae2:	4804      	ldr	r0, [pc, #16]	; (23fcaf4 <network_is_off+0x14>)
 23fcae4:	6800      	ldr	r0, [r0, #0]
 23fcae6:	4b04      	ldr	r3, [pc, #16]	; (23fcaf8 <network_is_off+0x18>)
 23fcae8:	4403      	add	r3, r0
 23fcaea:	681b      	ldr	r3, [r3, #0]
 23fcaec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcaee:	9302      	str	r3, [sp, #8]
 23fcaf0:	bd09      	pop	{r0, r3, pc}
 23fcaf2:	0000      	.short	0x0000
 23fcaf4:	1007ac84 	.word	0x1007ac84
 23fcaf8:	00000028 	.word	0x00000028

023fcafc <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fcafc:	b509      	push	{r0, r3, lr}
 23fcafe:	4804      	ldr	r0, [pc, #16]	; (23fcb10 <network_prefer+0x14>)
 23fcb00:	6800      	ldr	r0, [r0, #0]
 23fcb02:	4b04      	ldr	r3, [pc, #16]	; (23fcb14 <network_prefer+0x18>)
 23fcb04:	4403      	add	r3, r0
 23fcb06:	681b      	ldr	r3, [r3, #0]
 23fcb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcb0a:	9302      	str	r3, [sp, #8]
 23fcb0c:	bd09      	pop	{r0, r3, pc}
 23fcb0e:	0000      	.short	0x0000
 23fcb10:	1007ac84 	.word	0x1007ac84
 23fcb14:	00000028 	.word	0x00000028

023fcb18 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fcb18:	b509      	push	{r0, r3, lr}
 23fcb1a:	4804      	ldr	r0, [pc, #16]	; (23fcb2c <network_is_preferred+0x14>)
 23fcb1c:	6800      	ldr	r0, [r0, #0]
 23fcb1e:	4b04      	ldr	r3, [pc, #16]	; (23fcb30 <network_is_preferred+0x18>)
 23fcb20:	4403      	add	r3, r0
 23fcb22:	681b      	ldr	r3, [r3, #0]
 23fcb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fcb26:	9302      	str	r3, [sp, #8]
 23fcb28:	bd09      	pop	{r0, r3, pc}
 23fcb2a:	0000      	.short	0x0000
 23fcb2c:	1007ac84 	.word	0x1007ac84
 23fcb30:	00000028 	.word	0x00000028

023fcb34 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fcb34:	b509      	push	{r0, r3, lr}
 23fcb36:	4804      	ldr	r0, [pc, #16]	; (23fcb48 <malloc+0x14>)
 23fcb38:	6800      	ldr	r0, [r0, #0]
 23fcb3a:	4b04      	ldr	r3, [pc, #16]	; (23fcb4c <malloc+0x18>)
 23fcb3c:	4403      	add	r3, r0
 23fcb3e:	681b      	ldr	r3, [r3, #0]
 23fcb40:	681b      	ldr	r3, [r3, #0]
 23fcb42:	9302      	str	r3, [sp, #8]
 23fcb44:	bd09      	pop	{r0, r3, pc}
 23fcb46:	0000      	.short	0x0000
 23fcb48:	1007ac84 	.word	0x1007ac84
 23fcb4c:	00000004 	.word	0x00000004

023fcb50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fcb50:	b509      	push	{r0, r3, lr}
 23fcb52:	4804      	ldr	r0, [pc, #16]	; (23fcb64 <free+0x14>)
 23fcb54:	6800      	ldr	r0, [r0, #0]
 23fcb56:	4b04      	ldr	r3, [pc, #16]	; (23fcb68 <free+0x18>)
 23fcb58:	4403      	add	r3, r0
 23fcb5a:	681b      	ldr	r3, [r3, #0]
 23fcb5c:	685b      	ldr	r3, [r3, #4]
 23fcb5e:	9302      	str	r3, [sp, #8]
 23fcb60:	bd09      	pop	{r0, r3, pc}
 23fcb62:	0000      	.short	0x0000
 23fcb64:	1007ac84 	.word	0x1007ac84
 23fcb68:	00000004 	.word	0x00000004

023fcb6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fcb6c:	b509      	push	{r0, r3, lr}
 23fcb6e:	4804      	ldr	r0, [pc, #16]	; (23fcb80 <realloc+0x14>)
 23fcb70:	6800      	ldr	r0, [r0, #0]
 23fcb72:	4b04      	ldr	r3, [pc, #16]	; (23fcb84 <realloc+0x18>)
 23fcb74:	4403      	add	r3, r0
 23fcb76:	681b      	ldr	r3, [r3, #0]
 23fcb78:	689b      	ldr	r3, [r3, #8]
 23fcb7a:	9302      	str	r3, [sp, #8]
 23fcb7c:	bd09      	pop	{r0, r3, pc}
 23fcb7e:	0000      	.short	0x0000
 23fcb80:	1007ac84 	.word	0x1007ac84
 23fcb84:	00000004 	.word	0x00000004

023fcb88 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcb88:	b509      	push	{r0, r3, lr}
 23fcb8a:	4804      	ldr	r0, [pc, #16]	; (23fcb9c <vsnprintf+0x14>)
 23fcb8c:	6800      	ldr	r0, [r0, #0]
 23fcb8e:	4b04      	ldr	r3, [pc, #16]	; (23fcba0 <vsnprintf+0x18>)
 23fcb90:	4403      	add	r3, r0
 23fcb92:	681b      	ldr	r3, [r3, #0]
 23fcb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcb96:	9302      	str	r3, [sp, #8]
 23fcb98:	bd09      	pop	{r0, r3, pc}
 23fcb9a:	0000      	.short	0x0000
 23fcb9c:	1007ac84 	.word	0x1007ac84
 23fcba0:	00000004 	.word	0x00000004

023fcba4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcba4:	b509      	push	{r0, r3, lr}
 23fcba6:	4804      	ldr	r0, [pc, #16]	; (23fcbb8 <__errno+0x14>)
 23fcba8:	6800      	ldr	r0, [r0, #0]
 23fcbaa:	4b04      	ldr	r3, [pc, #16]	; (23fcbbc <__errno+0x18>)
 23fcbac:	4403      	add	r3, r0
 23fcbae:	681b      	ldr	r3, [r3, #0]
 23fcbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcbb2:	9302      	str	r3, [sp, #8]
 23fcbb4:	bd09      	pop	{r0, r3, pc}
 23fcbb6:	0000      	.short	0x0000
 23fcbb8:	1007ac84 	.word	0x1007ac84
 23fcbbc:	00000004 	.word	0x00000004

023fcbc0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcbc0:	b509      	push	{r0, r3, lr}
 23fcbc2:	4804      	ldr	r0, [pc, #16]	; (23fcbd4 <__assert_func+0x14>)
 23fcbc4:	6800      	ldr	r0, [r0, #0]
 23fcbc6:	4b04      	ldr	r3, [pc, #16]	; (23fcbd8 <__assert_func+0x18>)
 23fcbc8:	4403      	add	r3, r0
 23fcbca:	681b      	ldr	r3, [r3, #0]
 23fcbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcbce:	9302      	str	r3, [sp, #8]
 23fcbd0:	bd09      	pop	{r0, r3, pc}
 23fcbd2:	0000      	.short	0x0000
 23fcbd4:	1007ac84 	.word	0x1007ac84
 23fcbd8:	00000004 	.word	0x00000004

023fcbdc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fcbdc:	b509      	push	{r0, r3, lr}
 23fcbde:	4804      	ldr	r0, [pc, #16]	; (23fcbf0 <newlib_impure_ptr_callback+0x14>)
 23fcbe0:	6800      	ldr	r0, [r0, #0]
 23fcbe2:	4b04      	ldr	r3, [pc, #16]	; (23fcbf4 <newlib_impure_ptr_callback+0x18>)
 23fcbe4:	4403      	add	r3, r0
 23fcbe6:	681b      	ldr	r3, [r3, #0]
 23fcbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcbea:	9302      	str	r3, [sp, #8]
 23fcbec:	bd09      	pop	{r0, r3, pc}
 23fcbee:	0000      	.short	0x0000
 23fcbf0:	1007ac84 	.word	0x1007ac84
 23fcbf4:	00000004 	.word	0x00000004

023fcbf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fcbf8:	2100      	movs	r1, #0
 23fcbfa:	f7ff be83 	b.w	23fc904 <system_delay_ms>

023fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fcbfe:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fcc00:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fcc02:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fcc04:	b17c      	cbz	r4, 23fcc26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fcc06:	6863      	ldr	r3, [r4, #4]
 23fcc08:	3b01      	subs	r3, #1
 23fcc0a:	6063      	str	r3, [r4, #4]
 23fcc0c:	b95b      	cbnz	r3, 23fcc26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fcc0e:	6823      	ldr	r3, [r4, #0]
 23fcc10:	4620      	mov	r0, r4
 23fcc12:	689b      	ldr	r3, [r3, #8]
 23fcc14:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcc16:	68a3      	ldr	r3, [r4, #8]
 23fcc18:	3b01      	subs	r3, #1
 23fcc1a:	60a3      	str	r3, [r4, #8]
 23fcc1c:	b91b      	cbnz	r3, 23fcc26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fcc1e:	6823      	ldr	r3, [r4, #0]
 23fcc20:	4620      	mov	r0, r4
 23fcc22:	68db      	ldr	r3, [r3, #12]
 23fcc24:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fcc26:	4628      	mov	r0, r5
 23fcc28:	bd38      	pop	{r3, r4, r5, pc}

023fcc2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fcc2a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fcc2c:	6843      	ldr	r3, [r0, #4]
    {
 23fcc2e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fcc30:	3b01      	subs	r3, #1
 23fcc32:	6043      	str	r3, [r0, #4]
 23fcc34:	b963      	cbnz	r3, 23fcc50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fcc36:	6803      	ldr	r3, [r0, #0]
 23fcc38:	689b      	ldr	r3, [r3, #8]
 23fcc3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcc3c:	68a3      	ldr	r3, [r4, #8]
 23fcc3e:	3b01      	subs	r3, #1
 23fcc40:	60a3      	str	r3, [r4, #8]
 23fcc42:	b92b      	cbnz	r3, 23fcc50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcc44:	6823      	ldr	r3, [r4, #0]
 23fcc46:	4620      	mov	r0, r4
    }
 23fcc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fcc4c:	68db      	ldr	r3, [r3, #12]
 23fcc4e:	4718      	bx	r3
    }
 23fcc50:	bd10      	pop	{r4, pc}

023fcc52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcc52:	b570      	push	{r4, r5, r6, lr}
 23fcc54:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcc56:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcc5a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcc5e:	42ae      	cmp	r6, r5
 23fcc60:	d004      	beq.n	23fcc6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcc62:	4628      	mov	r0, r5
 23fcc64:	f001 fc58 	bl	23fe518 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcc68:	3510      	adds	r5, #16
 23fcc6a:	e7f8      	b.n	23fcc5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcc6c:	6820      	ldr	r0, [r4, #0]
 23fcc6e:	f7ff ff6f 	bl	23fcb50 <free>
    AllocatorT::free(data_);
}
 23fcc72:	4620      	mov	r0, r4
 23fcc74:	bd70      	pop	{r4, r5, r6, pc}
	...

023fcc78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcc78:	2300      	movs	r3, #0
 23fcc7a:	4802      	ldr	r0, [pc, #8]	; (23fcc84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcc7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcc7e:	f7ff bb23 	b.w	23fc2c8 <os_mutex_recursive_create>
 23fcc82:	bf00      	nop
 23fcc84:	1007ae4c 	.word	0x1007ae4c

023fcc88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcc88:	2200      	movs	r2, #0
 23fcc8a:	6840      	ldr	r0, [r0, #4]
 23fcc8c:	4611      	mov	r1, r2
 23fcc8e:	f7ff beef 	b.w	23fca70 <network_listening>

023fcc92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcc92:	2200      	movs	r2, #0
 23fcc94:	6840      	ldr	r0, [r0, #4]
 23fcc96:	4611      	mov	r1, r2
 23fcc98:	f7ff bf06 	b.w	23fcaa8 <network_get_listen_timeout>

023fcc9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcc9c:	2200      	movs	r2, #0
 23fcc9e:	6840      	ldr	r0, [r0, #4]
 23fcca0:	f7ff bef4 	b.w	23fca8c <network_set_listen_timeout>

023fcca4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcca4:	2200      	movs	r2, #0
 23fcca6:	6840      	ldr	r0, [r0, #4]
 23fcca8:	f081 0101 	eor.w	r1, r1, #1
 23fccac:	f7ff bed2 	b.w	23fca54 <network_listen>

023fccb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fccb0:	2300      	movs	r3, #0
 23fccb2:	6840      	ldr	r0, [r0, #4]
 23fccb4:	461a      	mov	r2, r3
 23fccb6:	4619      	mov	r1, r3
 23fccb8:	f7ff bebe 	b.w	23fca38 <network_off>

023fccbc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fccbc:	2300      	movs	r3, #0
 23fccbe:	6840      	ldr	r0, [r0, #4]
 23fccc0:	461a      	mov	r2, r3
 23fccc2:	4619      	mov	r1, r3
 23fccc4:	f7ff beaa 	b.w	23fca1c <network_on>

023fccc8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fccc8:	2200      	movs	r2, #0
 23fccca:	6840      	ldr	r0, [r0, #4]
 23fcccc:	4611      	mov	r1, r2
 23fccce:	f7ff be97 	b.w	23fca00 <network_ready>

023fccd2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fccd2:	2200      	movs	r2, #0
 23fccd4:	6840      	ldr	r0, [r0, #4]
 23fccd6:	4611      	mov	r1, r2
 23fccd8:	f7ff be76 	b.w	23fc9c8 <network_connecting>

023fccdc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fccdc:	2200      	movs	r2, #0
 23fccde:	2102      	movs	r1, #2
 23fcce0:	6840      	ldr	r0, [r0, #4]
 23fcce2:	f7ff be7f 	b.w	23fc9e4 <network_disconnect>

023fcce6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcce6:	2300      	movs	r3, #0
 23fcce8:	6840      	ldr	r0, [r0, #4]
 23fccea:	461a      	mov	r2, r3
 23fccec:	f7ff be5e 	b.w	23fc9ac <network_connect>

023fccf0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fccf0:	2203      	movs	r2, #3
 23fccf2:	4b02      	ldr	r3, [pc, #8]	; (23fccfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fccf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fccf6:	4a02      	ldr	r2, [pc, #8]	; (23fcd00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fccf8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fccfa:	4770      	bx	lr
 23fccfc:	1007ae50 	.word	0x1007ae50
 23fcd00:	023ffa5c 	.word	0x023ffa5c

023fcd04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fcd04:	4770      	bx	lr

023fcd06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fcd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcd08:	4606      	mov	r6, r0
 23fcd0a:	4615      	mov	r5, r2
 23fcd0c:	460c      	mov	r4, r1
 23fcd0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fcd10:	42bc      	cmp	r4, r7
 23fcd12:	d006      	beq.n	23fcd22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fcd14:	6833      	ldr	r3, [r6, #0]
 23fcd16:	4630      	mov	r0, r6
 23fcd18:	689b      	ldr	r3, [r3, #8]
 23fcd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fcd1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fcd20:	e7f6      	b.n	23fcd10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fcd22:	4628      	mov	r0, r5
 23fcd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcd26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fcd26:	2200      	movs	r2, #0
 23fcd28:	7c00      	ldrb	r0, [r0, #16]
 23fcd2a:	f7ff bb75 	b.w	23fc418 <hal_i2c_write>

023fcd2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fcd2e:	2100      	movs	r1, #0
 23fcd30:	7c00      	ldrb	r0, [r0, #16]
 23fcd32:	f7ff bb7f 	b.w	23fc434 <hal_i2c_available>

023fcd36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fcd36:	2100      	movs	r1, #0
 23fcd38:	7c00      	ldrb	r0, [r0, #16]
 23fcd3a:	f7ff bb89 	b.w	23fc450 <hal_i2c_read>

023fcd3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fcd3e:	2100      	movs	r1, #0
 23fcd40:	7c00      	ldrb	r0, [r0, #16]
 23fcd42:	f7ff bb93 	b.w	23fc46c <hal_i2c_peek>

023fcd46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fcd46:	2100      	movs	r1, #0
 23fcd48:	7c00      	ldrb	r0, [r0, #16]
 23fcd4a:	f7ff bb9d 	b.w	23fc488 <hal_i2c_flush>

023fcd4e <_ZN7TwoWireD0Ev>:
 23fcd4e:	b510      	push	{r4, lr}
 23fcd50:	4604      	mov	r4, r0
 23fcd52:	2114      	movs	r1, #20
 23fcd54:	f7fe ffd3 	bl	23fbcfe <_ZdlPvj>
 23fcd58:	4620      	mov	r0, r4
 23fcd5a:	bd10      	pop	{r4, pc}

023fcd5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcd5c:	b538      	push	{r3, r4, r5, lr}
 23fcd5e:	4604      	mov	r4, r0
 23fcd60:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fcd62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fcd66:	2200      	movs	r2, #0
 23fcd68:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fcd6c:	4b09      	ldr	r3, [pc, #36]	; (23fcd94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fcd6e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fcd70:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcd72:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fcd74:	4629      	mov	r1, r5
 23fcd76:	f7ff fba3 	bl	23fc4c0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcd7a:	30bf      	adds	r0, #191	; 0xbf
 23fcd7c:	d108      	bne.n	23fcd90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fcd7e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcd80:	07db      	lsls	r3, r3, #31
 23fcd82:	d505      	bpl.n	23fcd90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fcd84:	6868      	ldr	r0, [r5, #4]
 23fcd86:	f7ff fee3 	bl	23fcb50 <free>
    free(conf.tx_buffer);
 23fcd8a:	68e8      	ldr	r0, [r5, #12]
 23fcd8c:	f7ff fee0 	bl	23fcb50 <free>
}
 23fcd90:	4620      	mov	r0, r4
 23fcd92:	bd38      	pop	{r3, r4, r5, pc}
 23fcd94:	023ffaa0 	.word	0x023ffaa0

023fcd98 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fcd98:	21ff      	movs	r1, #255	; 0xff
 23fcd9a:	2200      	movs	r2, #0
      : address_{address},
 23fcd9c:	4b04      	ldr	r3, [pc, #16]	; (23fcdb0 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fcd9e:	2001      	movs	r0, #1
 23fcda0:	e9c3 1200 	strd	r1, r2, [r3]
 23fcda4:	2164      	movs	r1, #100	; 0x64
 23fcda6:	611a      	str	r2, [r3, #16]
 23fcda8:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fcdac:	4770      	bx	lr
 23fcdae:	bf00      	nop
 23fcdb0:	1007ae58 	.word	0x1007ae58

023fcdb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fcdb4:	4770      	bx	lr

023fcdb6 <_ZN9IPAddressD0Ev>:
 23fcdb6:	b510      	push	{r4, lr}
 23fcdb8:	4604      	mov	r4, r0
 23fcdba:	2118      	movs	r1, #24
 23fcdbc:	f7fe ff9f 	bl	23fbcfe <_ZdlPvj>
 23fcdc0:	4620      	mov	r0, r4
 23fcdc2:	bd10      	pop	{r4, pc}

023fcdc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fcdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fcdc6:	7d03      	ldrb	r3, [r0, #20]
{
 23fcdc8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fcdca:	2b06      	cmp	r3, #6
 23fcdcc:	f04f 0400 	mov.w	r4, #0
{
 23fcdd0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fcdd2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fcdd6:	d012      	beq.n	23fcdfe <_ZNK9IPAddress7printToER5Print+0x3a>
 23fcdd8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fcddc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fcde0:	220a      	movs	r2, #10
 23fcde2:	4630      	mov	r0, r6
 23fcde4:	f001 fb0f 	bl	23fe406 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fcde8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fcdea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fcdec:	d019      	beq.n	23fce22 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fcdee:	2c00      	cmp	r4, #0
 23fcdf0:	d0f4      	beq.n	23fcddc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fcdf2:	212e      	movs	r1, #46	; 0x2e
 23fcdf4:	4630      	mov	r0, r6
 23fcdf6:	f001 faf7 	bl	23fe3e8 <_ZN5Print5printEc>
 23fcdfa:	4404      	add	r4, r0
 23fcdfc:	e7ee      	b.n	23fcddc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fcdfe:	232f      	movs	r3, #47	; 0x2f
 23fce00:	466a      	mov	r2, sp
 23fce02:	4639      	mov	r1, r7
 23fce04:	200a      	movs	r0, #10
		buf[0] = 0;
 23fce06:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fce0a:	f7ff fb75 	bl	23fc4f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fce0e:	4668      	mov	r0, sp
 23fce10:	f7fe ff4c 	bl	23fbcac <strlen>
 23fce14:	6833      	ldr	r3, [r6, #0]
 23fce16:	4602      	mov	r2, r0
 23fce18:	4669      	mov	r1, sp
 23fce1a:	4630      	mov	r0, r6
 23fce1c:	68db      	ldr	r3, [r3, #12]
 23fce1e:	4798      	blx	r3
 23fce20:	4604      	mov	r4, r0
    }
    return n;
}
 23fce22:	4620      	mov	r0, r4
 23fce24:	b00d      	add	sp, #52	; 0x34
 23fce26:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fce28 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fce28:	b510      	push	{r4, lr}
 23fce2a:	4604      	mov	r4, r0
 23fce2c:	4b04      	ldr	r3, [pc, #16]	; (23fce40 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fce2e:	2211      	movs	r2, #17
 23fce30:	2100      	movs	r1, #0
 23fce32:	f840 3b04 	str.w	r3, [r0], #4
 23fce36:	f002 fb88 	bl	23ff54a <memset>
}
 23fce3a:	4620      	mov	r0, r4
 23fce3c:	bd10      	pop	{r4, pc}
 23fce3e:	bf00      	nop
 23fce40:	023ffacc 	.word	0x023ffacc

023fce44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fce44:	4603      	mov	r3, r0
 23fce46:	4a07      	ldr	r2, [pc, #28]	; (23fce64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fce48:	b510      	push	{r4, lr}
 23fce4a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fce4e:	f101 0210 	add.w	r2, r1, #16
 23fce52:	f851 4b04 	ldr.w	r4, [r1], #4
 23fce56:	4291      	cmp	r1, r2
 23fce58:	f843 4b04 	str.w	r4, [r3], #4
 23fce5c:	d1f9      	bne.n	23fce52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fce5e:	780a      	ldrb	r2, [r1, #0]
 23fce60:	701a      	strb	r2, [r3, #0]
}
 23fce62:	bd10      	pop	{r4, pc}
 23fce64:	023ffacc 	.word	0x023ffacc

023fce68 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fce68:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fce6a:	2b04      	cmp	r3, #4
 23fce6c:	d104      	bne.n	23fce78 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fce6e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fce70:	3800      	subs	r0, #0
 23fce72:	bf18      	it	ne
 23fce74:	2001      	movne	r0, #1
 23fce76:	4770      	bx	lr
    } else if (version() == 6) {
 23fce78:	2b06      	cmp	r3, #6
 23fce7a:	d107      	bne.n	23fce8c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fce7c:	6843      	ldr	r3, [r0, #4]
 23fce7e:	b93b      	cbnz	r3, 23fce90 <_ZNK9IPAddresscvbEv+0x28>
 23fce80:	6883      	ldr	r3, [r0, #8]
 23fce82:	b92b      	cbnz	r3, 23fce90 <_ZNK9IPAddresscvbEv+0x28>
 23fce84:	68c3      	ldr	r3, [r0, #12]
 23fce86:	b91b      	cbnz	r3, 23fce90 <_ZNK9IPAddresscvbEv+0x28>
 23fce88:	6900      	ldr	r0, [r0, #16]
 23fce8a:	e7f1      	b.n	23fce70 <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fce8c:	2000      	movs	r0, #0
 23fce8e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fce90:	2001      	movs	r0, #1
}
 23fce92:	4770      	bx	lr

023fce94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fce94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fce96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fce9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fce9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fcea2:	2304      	movs	r3, #4
 23fcea4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fcea8:	6041      	str	r1, [r0, #4]
 23fceaa:	7503      	strb	r3, [r0, #20]
}
 23fceac:	bd10      	pop	{r4, pc}
	...

023fceb0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fceb0:	b507      	push	{r0, r1, r2, lr}
 23fceb2:	4b06      	ldr	r3, [pc, #24]	; (23fcecc <_ZN9IPAddressC1EPKh+0x1c>)
 23fceb4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fceb6:	78cb      	ldrb	r3, [r1, #3]
 23fceb8:	9300      	str	r3, [sp, #0]
 23fceba:	788b      	ldrb	r3, [r1, #2]
 23fcebc:	784a      	ldrb	r2, [r1, #1]
 23fcebe:	7809      	ldrb	r1, [r1, #0]
 23fcec0:	f7ff ffe8 	bl	23fce94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fcec4:	b003      	add	sp, #12
 23fcec6:	f85d fb04 	ldr.w	pc, [sp], #4
 23fceca:	bf00      	nop
 23fcecc:	023ffacc 	.word	0x023ffacc

023fced0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fced0:	2201      	movs	r2, #1
 23fced2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fced6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fceda:	4618      	mov	r0, r3
 23fcedc:	2901      	cmp	r1, #1
 23fcede:	d108      	bne.n	23fcef2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fcee0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fcee4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fcee8:	3a01      	subs	r2, #1
 23fceea:	f103 0310 	add.w	r3, r3, #16
 23fceee:	d1f2      	bne.n	23fced6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fcef0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fcef2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fcef4:	bf04      	itt	eq
 23fcef6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fcefa:	1852      	addeq	r2, r2, r1
 23fcefc:	e7f4      	b.n	23fcee8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fcefe <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcefe:	b40e      	push	{r1, r2, r3}
 23fcf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcf02:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcf04:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcf06:	af00      	add	r7, sp, #0
 23fcf08:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fcf0c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcf10:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcf12:	462b      	mov	r3, r5
 23fcf14:	1878      	adds	r0, r7, r1
 23fcf16:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fcf18:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcf1a:	f7ff fe35 	bl	23fcb88 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fcf1e:	280f      	cmp	r0, #15
 23fcf20:	687a      	ldr	r2, [r7, #4]
 23fcf22:	d91a      	bls.n	23fcf5a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fcf24:	f100 0308 	add.w	r3, r0, #8
 23fcf28:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fcf2c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fcf2e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcf32:	1c41      	adds	r1, r0, #1
 23fcf34:	462b      	mov	r3, r5
 23fcf36:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fcf38:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcf3a:	f7ff fe25 	bl	23fcb88 <vsnprintf>
        if (n > 0) {
 23fcf3e:	1e02      	subs	r2, r0, #0
 23fcf40:	dd04      	ble.n	23fcf4c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fcf42:	6823      	ldr	r3, [r4, #0]
 23fcf44:	4669      	mov	r1, sp
 23fcf46:	4620      	mov	r0, r4
 23fcf48:	689b      	ldr	r3, [r3, #8]
 23fcf4a:	4798      	blx	r3
 23fcf4c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fcf4e:	3720      	adds	r7, #32
 23fcf50:	46bd      	mov	sp, r7
 23fcf52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcf56:	b003      	add	sp, #12
 23fcf58:	4770      	bx	lr
    } else if (n > 0) {
 23fcf5a:	2800      	cmp	r0, #0
 23fcf5c:	d0f7      	beq.n	23fcf4e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fcf5e:	6823      	ldr	r3, [r4, #0]
 23fcf60:	4602      	mov	r2, r0
 23fcf62:	689b      	ldr	r3, [r3, #8]
 23fcf64:	4620      	mov	r0, r4
 23fcf66:	f107 0110 	add.w	r1, r7, #16
 23fcf6a:	4798      	blx	r3
}
 23fcf6c:	e7ef      	b.n	23fcf4e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fcf6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcf6e:	b538      	push	{r3, r4, r5, lr}
 23fcf70:	680b      	ldr	r3, [r1, #0]
 23fcf72:	4604      	mov	r4, r0
 23fcf74:	6003      	str	r3, [r0, #0]
 23fcf76:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fcf78:	6843      	ldr	r3, [r0, #4]
 23fcf7a:	429d      	cmp	r5, r3
 23fcf7c:	d008      	beq.n	23fcf90 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fcf7e:	b115      	cbz	r5, 23fcf86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fcf80:	686b      	ldr	r3, [r5, #4]
 23fcf82:	3301      	adds	r3, #1
 23fcf84:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fcf86:	6860      	ldr	r0, [r4, #4]
 23fcf88:	b108      	cbz	r0, 23fcf8e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fcf8a:	f7ff fe4e 	bl	23fcc2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fcf8e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcf90:	bd38      	pop	{r3, r4, r5, pc}

023fcf92 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fcf92:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcf94:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fcf96:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcf9a:	2201      	movs	r2, #1
 23fcf9c:	689b      	ldr	r3, [r3, #8]
 23fcf9e:	f10d 0107 	add.w	r1, sp, #7
 23fcfa2:	4798      	blx	r3
}
 23fcfa4:	b003      	add	sp, #12
 23fcfa6:	f85d fb04 	ldr.w	pc, [sp], #4

023fcfaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcfaa:	460b      	mov	r3, r1
 23fcfac:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fcfae:	2200      	movs	r2, #0
 23fcfb0:	b510      	push	{r4, lr}
 23fcfb2:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcfb4:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fcfb8:	6083      	str	r3, [r0, #8]
    if (t) {
 23fcfba:	b90b      	cbnz	r3, 23fcfc0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fcfbc:	4620      	mov	r0, r4
 23fcfbe:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fcfc0:	f7ff ffd5 	bl	23fcf6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fcfc4:	e7fa      	b.n	23fcfbc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fcfc6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fcfc6:	6883      	ldr	r3, [r0, #8]
 23fcfc8:	b1eb      	cbz	r3, 23fd006 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fcfca:	781a      	ldrb	r2, [r3, #0]
 23fcfcc:	2a03      	cmp	r2, #3
 23fcfce:	d81a      	bhi.n	23fd006 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fcfd0:	e8df f002 	tbb	[pc, r2]
 23fcfd4:	1b021704 	.word	0x1b021704
 23fcfd8:	2005      	movs	r0, #5
 23fcfda:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fcfdc:	6802      	ldr	r2, [r0, #0]
 23fcfde:	685b      	ldr	r3, [r3, #4]
 23fcfe0:	6852      	ldr	r2, [r2, #4]
 23fcfe2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fcfe4:	282d      	cmp	r0, #45	; 0x2d
 23fcfe6:	d012      	beq.n	23fd00e <_ZNK5spark9JSONValue4typeEv+0x48>
 23fcfe8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fcfec:	2b09      	cmp	r3, #9
 23fcfee:	d90e      	bls.n	23fd00e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fcff0:	2874      	cmp	r0, #116	; 0x74
 23fcff2:	d00e      	beq.n	23fd012 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fcff4:	2866      	cmp	r0, #102	; 0x66
 23fcff6:	d00c      	beq.n	23fd012 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fcff8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fcffc:	4258      	negs	r0, r3
 23fcffe:	4158      	adcs	r0, r3
 23fd000:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd002:	2006      	movs	r0, #6
 23fd004:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd006:	2000      	movs	r0, #0
 23fd008:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd00a:	2004      	movs	r0, #4
 23fd00c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd00e:	2003      	movs	r0, #3
 23fd010:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd012:	2002      	movs	r0, #2
}
 23fd014:	4770      	bx	lr

023fd016 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd016:	b510      	push	{r4, lr}
 23fd018:	4604      	mov	r4, r0
    switch (type()) {
 23fd01a:	f7ff ffd4 	bl	23fcfc6 <_ZNK5spark9JSONValue4typeEv>
 23fd01e:	2802      	cmp	r0, #2
 23fd020:	d00e      	beq.n	23fd040 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd022:	1ec3      	subs	r3, r0, #3
 23fd024:	b2db      	uxtb	r3, r3
 23fd026:	2b01      	cmp	r3, #1
 23fd028:	d814      	bhi.n	23fd054 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd02a:	6822      	ldr	r2, [r4, #0]
 23fd02c:	68a3      	ldr	r3, [r4, #8]
 23fd02e:	6850      	ldr	r0, [r2, #4]
 23fd030:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd032:	220a      	movs	r2, #10
}
 23fd034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd038:	2100      	movs	r1, #0
 23fd03a:	4418      	add	r0, r3
 23fd03c:	f002 bb86 	b.w	23ff74c <strtol>
        const char* const s = d_->json + t_->start;
 23fd040:	6822      	ldr	r2, [r4, #0]
 23fd042:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd044:	6852      	ldr	r2, [r2, #4]
 23fd046:	685b      	ldr	r3, [r3, #4]
 23fd048:	5cd0      	ldrb	r0, [r2, r3]
 23fd04a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd04e:	4258      	negs	r0, r3
 23fd050:	4158      	adcs	r0, r3
}
 23fd052:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd054:	2000      	movs	r0, #0
 23fd056:	e7fc      	b.n	23fd052 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fd058 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd058:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd05a:	2300      	movs	r3, #0
 23fd05c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd05e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd062:	480e      	ldr	r0, [pc, #56]	; (23fd09c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd064:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd068:	b1a9      	cbz	r1, 23fd096 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd06a:	780b      	ldrb	r3, [r1, #0]
 23fd06c:	2b03      	cmp	r3, #3
 23fd06e:	d006      	beq.n	23fd07e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd070:	b98b      	cbnz	r3, 23fd096 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd072:	6813      	ldr	r3, [r2, #0]
 23fd074:	6858      	ldr	r0, [r3, #4]
 23fd076:	684b      	ldr	r3, [r1, #4]
 23fd078:	5cc3      	ldrb	r3, [r0, r3]
 23fd07a:	2b6e      	cmp	r3, #110	; 0x6e
 23fd07c:	d007      	beq.n	23fd08e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd07e:	6813      	ldr	r3, [r2, #0]
 23fd080:	684d      	ldr	r5, [r1, #4]
 23fd082:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd084:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd086:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd088:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd08a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd08c:	60e3      	str	r3, [r4, #12]
 23fd08e:	4611      	mov	r1, r2
 23fd090:	4620      	mov	r0, r4
 23fd092:	f7ff ff6c 	bl	23fcf6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd096:	4620      	mov	r0, r4
 23fd098:	bd38      	pop	{r3, r4, r5, pc}
 23fd09a:	bf00      	nop
 23fd09c:	023ffb3b 	.word	0x023ffb3b

023fd0a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd0a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd0a2:	2500      	movs	r5, #0
 23fd0a4:	460b      	mov	r3, r1
 23fd0a6:	4604      	mov	r4, r0
 23fd0a8:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd0aa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd0ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd0b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd0b6:	b14b      	cbz	r3, 23fd0cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd0b8:	781a      	ldrb	r2, [r3, #0]
 23fd0ba:	2a01      	cmp	r2, #1
 23fd0bc:	d106      	bne.n	23fd0cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd0be:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd0c2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd0c4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd0c6:	6143      	str	r3, [r0, #20]
 23fd0c8:	f7ff ff51 	bl	23fcf6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd0cc:	4620      	mov	r0, r4
 23fd0ce:	bd38      	pop	{r3, r4, r5, pc}

023fd0d0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd0d0:	b510      	push	{r4, lr}
    if (!n_) {
 23fd0d2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd0d4:	4604      	mov	r4, r0
    if (!n_) {
 23fd0d6:	b163      	cbz	r3, 23fd0f2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd0d8:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd0da:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd0dc:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd0de:	3010      	adds	r0, #16
 23fd0e0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd0e2:	6120      	str	r0, [r4, #16]
    --n_;
 23fd0e4:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd0e6:	b113      	cbz	r3, 23fd0ee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd0e8:	f7ff fef2 	bl	23fced0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd0ec:	60a0      	str	r0, [r4, #8]
    return true;
 23fd0ee:	2001      	movs	r0, #1
 23fd0f0:	e000      	b.n	23fd0f4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd0f2:	4618      	mov	r0, r3
}
 23fd0f4:	bd10      	pop	{r4, pc}

023fd0f6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd0f6:	b510      	push	{r4, lr}
    write('}');
 23fd0f8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd0fa:	4604      	mov	r4, r0
    write('}');
 23fd0fc:	f7ff ff49 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd100:	2301      	movs	r3, #1
}
 23fd102:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd104:	7123      	strb	r3, [r4, #4]
}
 23fd106:	bd10      	pop	{r4, pc}

023fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fd108:	b508      	push	{r3, lr}
    switch (state_) {
 23fd10a:	7903      	ldrb	r3, [r0, #4]
 23fd10c:	2b01      	cmp	r3, #1
 23fd10e:	d002      	beq.n	23fd116 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd110:	2b02      	cmp	r3, #2
 23fd112:	d004      	beq.n	23fd11e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fd114:	bd08      	pop	{r3, pc}
        write(',');
 23fd116:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd118:	f7ff ff3b 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
}
 23fd11c:	e7fa      	b.n	23fd114 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd11e:	213a      	movs	r1, #58	; 0x3a
 23fd120:	e7fa      	b.n	23fd118 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd122 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd122:	b510      	push	{r4, lr}
 23fd124:	4604      	mov	r4, r0
    writeSeparator();
 23fd126:	f7ff ffef 	bl	23fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd12a:	4620      	mov	r0, r4
 23fd12c:	217b      	movs	r1, #123	; 0x7b
 23fd12e:	f7ff ff30 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd132:	2300      	movs	r3, #0
}
 23fd134:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd136:	7123      	strb	r3, [r4, #4]
}
 23fd138:	bd10      	pop	{r4, pc}
	...

023fd13c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd13c:	b513      	push	{r0, r1, r4, lr}
 23fd13e:	4604      	mov	r4, r0
 23fd140:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd142:	f7ff ffe1 	bl	23fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd146:	6823      	ldr	r3, [r4, #0]
 23fd148:	4620      	mov	r0, r4
 23fd14a:	68db      	ldr	r3, [r3, #12]
 23fd14c:	9a01      	ldr	r2, [sp, #4]
 23fd14e:	4903      	ldr	r1, [pc, #12]	; (23fd15c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd150:	4798      	blx	r3
    state_ = NEXT;
 23fd152:	2301      	movs	r3, #1
}
 23fd154:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd156:	7123      	strb	r3, [r4, #4]
}
 23fd158:	b002      	add	sp, #8
 23fd15a:	bd10      	pop	{r4, pc}
 23fd15c:	023ffc30 	.word	0x023ffc30

023fd160 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd160:	b513      	push	{r0, r1, r4, lr}
 23fd162:	4604      	mov	r4, r0
 23fd164:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd166:	f7ff ffcf 	bl	23fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd16a:	6823      	ldr	r3, [r4, #0]
 23fd16c:	4620      	mov	r0, r4
 23fd16e:	68db      	ldr	r3, [r3, #12]
 23fd170:	9a01      	ldr	r2, [sp, #4]
 23fd172:	4903      	ldr	r1, [pc, #12]	; (23fd180 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd174:	4798      	blx	r3
    state_ = NEXT;
 23fd176:	2301      	movs	r3, #1
}
 23fd178:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd17a:	7123      	strb	r3, [r4, #4]
}
 23fd17c:	b002      	add	sp, #8
 23fd17e:	bd10      	pop	{r4, pc}
 23fd180:	023ffad8 	.word	0x023ffad8

023fd184 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd188:	460d      	mov	r5, r1
 23fd18a:	4690      	mov	r8, r2
    write('"');
 23fd18c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd18e:	4604      	mov	r4, r0
 23fd190:	462f      	mov	r7, r5
    write('"');
 23fd192:	f7ff fefe 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fd196:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd23c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd19a:	44a8      	add	r8, r5
    while (s != end) {
 23fd19c:	4547      	cmp	r7, r8
 23fd19e:	46ba      	mov	sl, r7
 23fd1a0:	d03d      	beq.n	23fd21e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd1a2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd1a6:	2e22      	cmp	r6, #34	; 0x22
 23fd1a8:	d006      	beq.n	23fd1b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd1aa:	2e5c      	cmp	r6, #92	; 0x5c
 23fd1ac:	d004      	beq.n	23fd1b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd1ae:	4630      	mov	r0, r6
 23fd1b0:	f002 f99c 	bl	23ff4ec <isprint>
 23fd1b4:	2800      	cmp	r0, #0
 23fd1b6:	d1f1      	bne.n	23fd19c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd1b8:	6823      	ldr	r3, [r4, #0]
 23fd1ba:	4629      	mov	r1, r5
 23fd1bc:	4620      	mov	r0, r4
 23fd1be:	689b      	ldr	r3, [r3, #8]
 23fd1c0:	ebaa 0205 	sub.w	r2, sl, r5
 23fd1c4:	4798      	blx	r3
            write('\\');
 23fd1c6:	215c      	movs	r1, #92	; 0x5c
 23fd1c8:	4620      	mov	r0, r4
 23fd1ca:	f7ff fee2 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd1ce:	2e0d      	cmp	r6, #13
 23fd1d0:	d80a      	bhi.n	23fd1e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd1d2:	2e07      	cmp	r6, #7
 23fd1d4:	d91c      	bls.n	23fd210 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd1d6:	f1a6 0308 	sub.w	r3, r6, #8
 23fd1da:	2b05      	cmp	r3, #5
 23fd1dc:	d818      	bhi.n	23fd210 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd1de:	e8df f003 	tbb	[pc, r3]
 23fd1e2:	0f0d      	.short	0x0f0d
 23fd1e4:	15131711 	.word	0x15131711
 23fd1e8:	2e22      	cmp	r6, #34	; 0x22
 23fd1ea:	d001      	beq.n	23fd1f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd1ec:	2e5c      	cmp	r6, #92	; 0x5c
 23fd1ee:	d10f      	bne.n	23fd210 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd1f0:	4631      	mov	r1, r6
                write('b');
 23fd1f2:	4620      	mov	r0, r4
 23fd1f4:	f7ff fecd 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fd1f8:	463d      	mov	r5, r7
    while (s != end) {
 23fd1fa:	e7cf      	b.n	23fd19c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd1fc:	2162      	movs	r1, #98	; 0x62
 23fd1fe:	e7f8      	b.n	23fd1f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd200:	2174      	movs	r1, #116	; 0x74
 23fd202:	e7f6      	b.n	23fd1f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd204:	216e      	movs	r1, #110	; 0x6e
 23fd206:	e7f4      	b.n	23fd1f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd208:	2166      	movs	r1, #102	; 0x66
 23fd20a:	e7f2      	b.n	23fd1f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd20c:	2172      	movs	r1, #114	; 0x72
 23fd20e:	e7f0      	b.n	23fd1f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd210:	6823      	ldr	r3, [r4, #0]
 23fd212:	4632      	mov	r2, r6
 23fd214:	4649      	mov	r1, r9
 23fd216:	4620      	mov	r0, r4
 23fd218:	68db      	ldr	r3, [r3, #12]
 23fd21a:	4798      	blx	r3
                break;
 23fd21c:	e7ec      	b.n	23fd1f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fd21e:	42bd      	cmp	r5, r7
 23fd220:	d005      	beq.n	23fd22e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd222:	6823      	ldr	r3, [r4, #0]
 23fd224:	4629      	mov	r1, r5
 23fd226:	4620      	mov	r0, r4
 23fd228:	689b      	ldr	r3, [r3, #8]
 23fd22a:	1b7a      	subs	r2, r7, r5
 23fd22c:	4798      	blx	r3
    }
    write('"');
 23fd22e:	2122      	movs	r1, #34	; 0x22
 23fd230:	4620      	mov	r0, r4
 23fd232:	f7ff feae 	bl	23fcf92 <_ZN5spark10JSONWriter5writeEc>
}
 23fd236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd23a:	bf00      	nop
 23fd23c:	023ffadb 	.word	0x023ffadb

023fd240 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd240:	b513      	push	{r0, r1, r4, lr}
 23fd242:	4604      	mov	r4, r0
 23fd244:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd248:	f7ff ff5e 	bl	23fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd24c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd250:	4620      	mov	r0, r4
 23fd252:	f7ff ff97 	bl	23fd184 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd256:	2302      	movs	r3, #2
}
 23fd258:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd25a:	7123      	strb	r3, [r4, #4]
}
 23fd25c:	b002      	add	sp, #8
 23fd25e:	bd10      	pop	{r4, pc}

023fd260 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd260:	b513      	push	{r0, r1, r4, lr}
 23fd262:	4604      	mov	r4, r0
 23fd264:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd268:	f7ff ff4e 	bl	23fd108 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd26c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd270:	4620      	mov	r0, r4
 23fd272:	f7ff ff87 	bl	23fd184 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd276:	2301      	movs	r3, #1
}
 23fd278:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd27a:	7123      	strb	r3, [r4, #4]
}
 23fd27c:	b002      	add	sp, #8
 23fd27e:	bd10      	pop	{r4, pc}

023fd280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd280:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd284:	4604      	mov	r4, r0
 23fd286:	460d      	mov	r5, r1
 23fd288:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd28a:	d914      	bls.n	23fd2b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd28c:	4290      	cmp	r0, r2
 23fd28e:	d213      	bcs.n	23fd2b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd290:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd294:	1a75      	subs	r5, r6, r1
 23fd296:	f1a1 0710 	sub.w	r7, r1, #16
 23fd29a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd29c:	42b7      	cmp	r7, r6
 23fd29e:	d018      	beq.n	23fd2d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd2a0:	b11c      	cbz	r4, 23fd2aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd2a2:	4631      	mov	r1, r6
 23fd2a4:	4620      	mov	r0, r4
 23fd2a6:	f001 f9a0 	bl	23fe5ea <_ZN6StringC1EOS_>
                end->~T();
 23fd2aa:	4630      	mov	r0, r6
 23fd2ac:	f001 f934 	bl	23fe518 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd2b0:	3e10      	subs	r6, #16
 23fd2b2:	3c10      	subs	r4, #16
 23fd2b4:	e7f2      	b.n	23fd29c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd2b6:	d00c      	beq.n	23fd2d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd2b8:	42b5      	cmp	r5, r6
 23fd2ba:	d00a      	beq.n	23fd2d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd2bc:	b11c      	cbz	r4, 23fd2c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd2be:	4629      	mov	r1, r5
 23fd2c0:	4620      	mov	r0, r4
 23fd2c2:	f001 f992 	bl	23fe5ea <_ZN6StringC1EOS_>
                p->~T();
 23fd2c6:	4628      	mov	r0, r5
 23fd2c8:	f001 f926 	bl	23fe518 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd2cc:	3510      	adds	r5, #16
 23fd2ce:	3410      	adds	r4, #16
 23fd2d0:	e7f2      	b.n	23fd2b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd2d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd2d4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd2d6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd2d8:	4605      	mov	r5, r0
        if (n > 0) {
 23fd2da:	dd11      	ble.n	23fd300 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd2dc:	0130      	lsls	r0, r6, #4
 23fd2de:	f7ff fc29 	bl	23fcb34 <malloc>
            if (!d) {
 23fd2e2:	4604      	mov	r4, r0
 23fd2e4:	b158      	cbz	r0, 23fd2fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd2e6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd2ea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd2ee:	f7ff ffc7 	bl	23fd280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd2f2:	6828      	ldr	r0, [r5, #0]
 23fd2f4:	f7ff fc2c 	bl	23fcb50 <free>
        return true;
 23fd2f8:	2001      	movs	r0, #1
        data_ = d;
 23fd2fa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd2fc:	60ae      	str	r6, [r5, #8]
    }
 23fd2fe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd300:	2400      	movs	r4, #0
 23fd302:	e7f6      	b.n	23fd2f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd304 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fd304:	b510      	push	{r4, lr}
 23fd306:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fd308:	6880      	ldr	r0, [r0, #8]
 23fd30a:	6803      	ldr	r3, [r0, #0]
 23fd30c:	68db      	ldr	r3, [r3, #12]
 23fd30e:	4798      	blx	r3
 23fd310:	68e3      	ldr	r3, [r4, #12]
 23fd312:	4418      	add	r0, r3
 23fd314:	60e0      	str	r0, [r4, #12]
}
 23fd316:	bd10      	pop	{r4, pc}

023fd318 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd318:	4770      	bx	lr

023fd31a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd31a:	4608      	mov	r0, r1
 23fd31c:	b111      	cbz	r1, 23fd324 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd31e:	680b      	ldr	r3, [r1, #0]
 23fd320:	685b      	ldr	r3, [r3, #4]
 23fd322:	4718      	bx	r3
}
 23fd324:	4770      	bx	lr

023fd326 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd326:	4770      	bx	lr

023fd328 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd328:	4770      	bx	lr

023fd32a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd32a:	4770      	bx	lr

023fd32c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd32c:	4770      	bx	lr

023fd32e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd32e:	b538      	push	{r3, r4, r5, lr}
 23fd330:	4604      	mov	r4, r0
 23fd332:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd334:	6800      	ldr	r0, [r0, #0]
 23fd336:	212e      	movs	r1, #46	; 0x2e
 23fd338:	f002 f94b 	bl	23ff5d2 <strchrnul>
    size = s - category;
 23fd33c:	6823      	ldr	r3, [r4, #0]
 23fd33e:	1ac3      	subs	r3, r0, r3
 23fd340:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd342:	b123      	cbz	r3, 23fd34e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd344:	7803      	ldrb	r3, [r0, #0]
 23fd346:	b103      	cbz	r3, 23fd34a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd348:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fd34a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd34c:	6020      	str	r0, [r4, #0]
}
 23fd34e:	4618      	mov	r0, r3
 23fd350:	bd38      	pop	{r3, r4, r5, pc}

023fd352 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd352:	b510      	push	{r4, lr}
 23fd354:	4604      	mov	r4, r0
 23fd356:	2110      	movs	r1, #16
 23fd358:	f7fe fcd1 	bl	23fbcfe <_ZdlPvj>
 23fd35c:	4620      	mov	r0, r4
 23fd35e:	bd10      	pop	{r4, pc}

023fd360 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd360:	b510      	push	{r4, lr}
 23fd362:	4604      	mov	r4, r0
 23fd364:	2104      	movs	r1, #4
 23fd366:	f7fe fcca 	bl	23fbcfe <_ZdlPvj>
 23fd36a:	4620      	mov	r0, r4
 23fd36c:	bd10      	pop	{r4, pc}

023fd36e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd36e:	b510      	push	{r4, lr}
 23fd370:	4604      	mov	r4, r0
 23fd372:	2104      	movs	r1, #4
 23fd374:	f7fe fcc3 	bl	23fbcfe <_ZdlPvj>
 23fd378:	4620      	mov	r0, r4
 23fd37a:	bd10      	pop	{r4, pc}

023fd37c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd37c:	f7fe bfc0 	b.w	23fc300 <os_mutex_recursive_lock>

023fd380 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd380:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd382:	f7fe fc89 	bl	23fbc98 <strcmp>
}
 23fd386:	fab0 f080 	clz	r0, r0
 23fd38a:	0940      	lsrs	r0, r0, #5
 23fd38c:	bd08      	pop	{r3, pc}

023fd38e <__tcf_1>:
 23fd38e:	4770      	bx	lr

023fd390 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd390:	b510      	push	{r4, lr}
 23fd392:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd394:	f001 fd1a 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fd398:	4284      	cmp	r4, r0
 23fd39a:	d105      	bne.n	23fd3a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd39c:	f001 fd16 	bl	23fedcc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd3a4:	f001 bd04 	b.w	23fedb0 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd3a8:	f001 fef4 	bl	23ff194 <_Z22__fetch_global_Serial1v>
 23fd3ac:	4284      	cmp	r4, r0
 23fd3ae:	d105      	bne.n	23fd3bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd3b0:	f001 fef0 	bl	23ff194 <_Z22__fetch_global_Serial1v>
}
 23fd3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd3b8:	f001 bc9d 	b.w	23fecf6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd3bc:	b12c      	cbz	r4, 23fd3ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd3be:	6823      	ldr	r3, [r4, #0]
 23fd3c0:	4620      	mov	r0, r4
}
 23fd3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd3c6:	685b      	ldr	r3, [r3, #4]
 23fd3c8:	4718      	bx	r3
 23fd3ca:	bd10      	pop	{r4, pc}

023fd3cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd3cc:	680b      	ldr	r3, [r1, #0]
 23fd3ce:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd3d0:	684b      	ldr	r3, [r1, #4]
 23fd3d2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd3d4:	b113      	cbz	r3, 23fd3dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd3d6:	685a      	ldr	r2, [r3, #4]
 23fd3d8:	3201      	adds	r2, #1
 23fd3da:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd3dc:	4770      	bx	lr

023fd3de <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd3de:	b513      	push	{r0, r1, r4, lr}
 23fd3e0:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd3e2:	4608      	mov	r0, r1
 23fd3e4:	9101      	str	r1, [sp, #4]
 23fd3e6:	f7fe fc61 	bl	23fbcac <strlen>
 23fd3ea:	4602      	mov	r2, r0
 23fd3ec:	4620      	mov	r0, r4
 23fd3ee:	9901      	ldr	r1, [sp, #4]
}
 23fd3f0:	b002      	add	sp, #8
 23fd3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd3f6:	f7ff bf33 	b.w	23fd260 <_ZN5spark10JSONWriter5valueEPKcj>

023fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd3fa:	b513      	push	{r0, r1, r4, lr}
 23fd3fc:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd3fe:	4608      	mov	r0, r1
 23fd400:	9101      	str	r1, [sp, #4]
 23fd402:	f7fe fc53 	bl	23fbcac <strlen>
 23fd406:	4602      	mov	r2, r0
 23fd408:	4620      	mov	r0, r4
 23fd40a:	6823      	ldr	r3, [r4, #0]
 23fd40c:	9901      	ldr	r1, [sp, #4]
 23fd40e:	68db      	ldr	r3, [r3, #12]
}
 23fd410:	b002      	add	sp, #8
 23fd412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd416:	4718      	bx	r3

023fd418 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd418:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd41a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd41c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd420:	2201      	movs	r2, #1
 23fd422:	68db      	ldr	r3, [r3, #12]
 23fd424:	f10d 0107 	add.w	r1, sp, #7
 23fd428:	4798      	blx	r3
}
 23fd42a:	b003      	add	sp, #12
 23fd42c:	f85d fb04 	ldr.w	pc, [sp], #4

023fd430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd434:	f04f 0a14 	mov.w	sl, #20
 23fd438:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd43c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd43e:	4645      	mov	r5, r8
 23fd440:	fb0a f404 	mul.w	r4, sl, r4
 23fd444:	9300      	str	r3, [sp, #0]
 23fd446:	4b17      	ldr	r3, [pc, #92]	; (23fd4a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd448:	10a4      	asrs	r4, r4, #2
 23fd44a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd44c:	2c00      	cmp	r4, #0
 23fd44e:	dd21      	ble.n	23fd494 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd450:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd452:	fb0a f006 	mul.w	r0, sl, r6
 23fd456:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd45a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd45e:	463a      	mov	r2, r7
 23fd460:	455f      	cmp	r7, fp
 23fd462:	bf28      	it	cs
 23fd464:	465a      	movcs	r2, fp
 23fd466:	5828      	ldr	r0, [r5, r0]
 23fd468:	9101      	str	r1, [sp, #4]
 23fd46a:	f002 f8c4 	bl	23ff5f6 <strncmp>
                if (cmp == 0) {
 23fd46e:	2800      	cmp	r0, #0
 23fd470:	f04f 0301 	mov.w	r3, #1
 23fd474:	9901      	ldr	r1, [sp, #4]
 23fd476:	d10b      	bne.n	23fd490 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd478:	455f      	cmp	r7, fp
 23fd47a:	d103      	bne.n	23fd484 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd47c:	9a00      	ldr	r2, [sp, #0]
 23fd47e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd480:	4634      	mov	r4, r6
 23fd482:	e7e3      	b.n	23fd44c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd484:	d9fc      	bls.n	23fd480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd486:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd488:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd48c:	3e01      	subs	r6, #1
 23fd48e:	e7f7      	b.n	23fd480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd490:	dbf9      	blt.n	23fd486 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd492:	e7f5      	b.n	23fd480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd494:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd498:	4802      	ldr	r0, [pc, #8]	; (23fd4a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd49a:	10ad      	asrs	r5, r5, #2
 23fd49c:	4368      	muls	r0, r5
 23fd49e:	b003      	add	sp, #12
 23fd4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd4a4:	cccccccd 	.word	0xcccccccd

023fd4a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd4a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd4aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd4ac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd4ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd4b0:	b303      	cbz	r3, 23fd4f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd4b2:	b1f9      	cbz	r1, 23fd4f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd4b4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd4b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd4ba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd4bc:	a903      	add	r1, sp, #12
 23fd4be:	a801      	add	r0, sp, #4
 23fd4c0:	f7ff ff35 	bl	23fd32e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd4c4:	4601      	mov	r1, r0
 23fd4c6:	b1a8      	cbz	r0, 23fd4f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd4c8:	f10d 030b 	add.w	r3, sp, #11
 23fd4cc:	4620      	mov	r0, r4
 23fd4ce:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd4d0:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd4d4:	f7ff ffac 	bl	23fd430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd4d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd4dc:	b153      	cbz	r3, 23fd4f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd4de:	6823      	ldr	r3, [r4, #0]
 23fd4e0:	2414      	movs	r4, #20
 23fd4e2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd4e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd4ea:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd4ec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd4ee:	bfa8      	it	ge
 23fd4f0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd4f2:	e7e3      	b.n	23fd4bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd4f4:	4628      	mov	r0, r5
 23fd4f6:	b004      	add	sp, #16
 23fd4f8:	bd70      	pop	{r4, r5, r6, pc}

023fd4fa <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd4fa:	b40e      	push	{r1, r2, r3}
 23fd4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd4fe:	b08c      	sub	sp, #48	; 0x30
 23fd500:	af00      	add	r7, sp, #0
 23fd502:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd506:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd50a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd50c:	462b      	mov	r3, r5
 23fd50e:	2120      	movs	r1, #32
 23fd510:	f107 0010 	add.w	r0, r7, #16
 23fd514:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd516:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd518:	f7ff fb36 	bl	23fcb88 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd51c:	281f      	cmp	r0, #31
 23fd51e:	687a      	ldr	r2, [r7, #4]
 23fd520:	d91a      	bls.n	23fd558 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd522:	f100 0308 	add.w	r3, r0, #8
 23fd526:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd52a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd52c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd530:	1c41      	adds	r1, r0, #1
 23fd532:	462b      	mov	r3, r5
 23fd534:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd536:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd538:	f7ff fb26 	bl	23fcb88 <vsnprintf>
        if (n > 0) {
 23fd53c:	1e02      	subs	r2, r0, #0
 23fd53e:	dd04      	ble.n	23fd54a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd540:	6823      	ldr	r3, [r4, #0]
 23fd542:	4669      	mov	r1, sp
 23fd544:	4620      	mov	r0, r4
 23fd546:	68db      	ldr	r3, [r3, #12]
 23fd548:	4798      	blx	r3
 23fd54a:	46b5      	mov	sp, r6
}
 23fd54c:	3730      	adds	r7, #48	; 0x30
 23fd54e:	46bd      	mov	sp, r7
 23fd550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd554:	b003      	add	sp, #12
 23fd556:	4770      	bx	lr
    } else if (n > 0) {
 23fd558:	2800      	cmp	r0, #0
 23fd55a:	d0f7      	beq.n	23fd54c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd55c:	6823      	ldr	r3, [r4, #0]
 23fd55e:	4602      	mov	r2, r0
 23fd560:	68db      	ldr	r3, [r3, #12]
 23fd562:	4620      	mov	r0, r4
 23fd564:	f107 0110 	add.w	r1, r7, #16
 23fd568:	4798      	blx	r3
}
 23fd56a:	e7ef      	b.n	23fd54c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd56c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd56c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd56e:	4c08      	ldr	r4, [pc, #32]	; (23fd590 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd570:	e8d4 3f8f 	ldab	r3, [r4]
 23fd574:	07db      	lsls	r3, r3, #31
 23fd576:	d409      	bmi.n	23fd58c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd578:	4620      	mov	r0, r4
 23fd57a:	f7fe fbcf 	bl	23fbd1c <__cxa_guard_acquire>
 23fd57e:	b128      	cbz	r0, 23fd58c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd580:	4620      	mov	r0, r4
 23fd582:	f7fe fbd0 	bl	23fbd26 <__cxa_guard_release>
 23fd586:	4803      	ldr	r0, [pc, #12]	; (23fd594 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd588:	f001 ffaa 	bl	23ff4e0 <atexit>
}
 23fd58c:	4802      	ldr	r0, [pc, #8]	; (23fd598 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd58e:	bd10      	pop	{r4, pc}
 23fd590:	1007ae70 	.word	0x1007ae70
 23fd594:	023fd327 	.word	0x023fd327
 23fd598:	1007ac88 	.word	0x1007ac88

023fd59c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd59c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd59e:	4c08      	ldr	r4, [pc, #32]	; (23fd5c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd5a0:	e8d4 3f8f 	ldab	r3, [r4]
 23fd5a4:	07db      	lsls	r3, r3, #31
 23fd5a6:	d409      	bmi.n	23fd5bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd5a8:	4620      	mov	r0, r4
 23fd5aa:	f7fe fbb7 	bl	23fbd1c <__cxa_guard_acquire>
 23fd5ae:	b128      	cbz	r0, 23fd5bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd5b0:	4620      	mov	r0, r4
 23fd5b2:	f7fe fbb8 	bl	23fbd26 <__cxa_guard_release>
 23fd5b6:	4803      	ldr	r0, [pc, #12]	; (23fd5c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd5b8:	f001 ff92 	bl	23ff4e0 <atexit>
    return &factory;
}
 23fd5bc:	4802      	ldr	r0, [pc, #8]	; (23fd5c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd5be:	bd10      	pop	{r4, pc}
 23fd5c0:	1007ae74 	.word	0x1007ae74
 23fd5c4:	023fd38f 	.word	0x023fd38f
 23fd5c8:	1007ac8c 	.word	0x1007ac8c

023fd5cc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd5cc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd5ce:	2500      	movs	r5, #0
 23fd5d0:	4604      	mov	r4, r0
 23fd5d2:	e9c0 5500 	strd	r5, r5, [r0]
 23fd5d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd5da:	6085      	str	r5, [r0, #8]
 23fd5dc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd5de:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd5e2:	f7fe fe71 	bl	23fc2c8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd5e6:	f7ff ffc1 	bl	23fd56c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd5ea:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd5ec:	f7ff ffd6 	bl	23fd59c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd5f0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd5f2:	6220      	str	r0, [r4, #32]
}
 23fd5f4:	4620      	mov	r0, r4
 23fd5f6:	bd38      	pop	{r3, r4, r5, pc}

023fd5f8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd5f8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd5fa:	4c0a      	ldr	r4, [pc, #40]	; (23fd624 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd5fc:	e8d4 3f8f 	ldab	r3, [r4]
 23fd600:	07db      	lsls	r3, r3, #31
 23fd602:	d40c      	bmi.n	23fd61e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd604:	4620      	mov	r0, r4
 23fd606:	f7fe fb89 	bl	23fbd1c <__cxa_guard_acquire>
 23fd60a:	b140      	cbz	r0, 23fd61e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd60c:	4806      	ldr	r0, [pc, #24]	; (23fd628 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd60e:	f7ff ffdd 	bl	23fd5cc <_ZN5spark10LogManagerC1Ev>
 23fd612:	4620      	mov	r0, r4
 23fd614:	f7fe fb87 	bl	23fbd26 <__cxa_guard_release>
 23fd618:	4804      	ldr	r0, [pc, #16]	; (23fd62c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd61a:	f001 ff61 	bl	23ff4e0 <atexit>
    return &mgr;
}
 23fd61e:	4802      	ldr	r0, [pc, #8]	; (23fd628 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd620:	bd10      	pop	{r4, pc}
 23fd622:	bf00      	nop
 23fd624:	1007ae6c 	.word	0x1007ae6c
 23fd628:	1007ae7c 	.word	0x1007ae7c
 23fd62c:	023fdb6d 	.word	0x023fdb6d

023fd630 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd630:	2300      	movs	r3, #0
 23fd632:	4a02      	ldr	r2, [pc, #8]	; (23fd63c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd634:	4902      	ldr	r1, [pc, #8]	; (23fd640 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd636:	4803      	ldr	r0, [pc, #12]	; (23fd644 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd638:	f7ff b948 	b.w	23fc8cc <log_set_callbacks>
 23fd63c:	023fd955 	.word	0x023fd955
 23fd640:	023fd8e1 	.word	0x023fd8e1
 23fd644:	023fd861 	.word	0x023fd861

023fd648 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd648:	2300      	movs	r3, #0
 23fd64a:	461a      	mov	r2, r3
 23fd64c:	4619      	mov	r1, r3
 23fd64e:	4618      	mov	r0, r3
 23fd650:	f7ff b93c 	b.w	23fc8cc <log_set_callbacks>

023fd654 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd656:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd658:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd65a:	4668      	mov	r0, sp
 23fd65c:	f7ff feb6 	bl	23fd3cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd660:	466a      	mov	r2, sp
 23fd662:	4629      	mov	r1, r5
 23fd664:	4620      	mov	r0, r4
 23fd666:	f7ff fd1b 	bl	23fd0a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd66a:	a801      	add	r0, sp, #4
 23fd66c:	f7ff fac7 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd670:	4620      	mov	r0, r4
 23fd672:	b003      	add	sp, #12
 23fd674:	bd30      	pop	{r4, r5, pc}

023fd676 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd676:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd678:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd67a:	68cd      	ldr	r5, [r1, #12]
 23fd67c:	4668      	mov	r0, sp
 23fd67e:	f7ff fea5 	bl	23fd3cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd682:	466a      	mov	r2, sp
 23fd684:	4629      	mov	r1, r5
 23fd686:	4620      	mov	r0, r4
 23fd688:	f7ff fce6 	bl	23fd058 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd68c:	a801      	add	r0, sp, #4
 23fd68e:	f7ff fab6 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd692:	4620      	mov	r0, r4
 23fd694:	b003      	add	sp, #12
 23fd696:	bd30      	pop	{r4, r5, pc}

023fd698 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd69a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd69c:	690d      	ldr	r5, [r1, #16]
 23fd69e:	4668      	mov	r0, sp
 23fd6a0:	f7ff fe94 	bl	23fd3cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd6a4:	466a      	mov	r2, sp
 23fd6a6:	4629      	mov	r1, r5
 23fd6a8:	4620      	mov	r0, r4
 23fd6aa:	f7ff fc7e 	bl	23fcfaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd6ae:	a801      	add	r0, sp, #4
 23fd6b0:	f7ff faa5 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6b4:	4620      	mov	r0, r4
 23fd6b6:	b003      	add	sp, #12
 23fd6b8:	bd30      	pop	{r4, r5, pc}
	...

023fd6bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd6bc:	b570      	push	{r4, r5, r6, lr}
 23fd6be:	b08a      	sub	sp, #40	; 0x28
 23fd6c0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd6c2:	4601      	mov	r1, r0
 23fd6c4:	a804      	add	r0, sp, #16
 23fd6c6:	f7ff ffc5 	bl	23fd654 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd6ca:	4e14      	ldr	r6, [pc, #80]	; (23fd71c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd6cc:	a804      	add	r0, sp, #16
 23fd6ce:	f7ff fcff 	bl	23fd0d0 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd6d2:	b1e8      	cbz	r0, 23fd710 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd6d4:	4668      	mov	r0, sp
 23fd6d6:	a904      	add	r1, sp, #16
 23fd6d8:	f7ff ffcd 	bl	23fd676 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd6dc:	4631      	mov	r1, r6
 23fd6de:	9802      	ldr	r0, [sp, #8]
 23fd6e0:	f7ff fe4e 	bl	23fd380 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd6e4:	4604      	mov	r4, r0
 23fd6e6:	b110      	cbz	r0, 23fd6ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd6e8:	1e2c      	subs	r4, r5, #0
 23fd6ea:	bf18      	it	ne
 23fd6ec:	2401      	movne	r4, #1
 23fd6ee:	a801      	add	r0, sp, #4
 23fd6f0:	f7ff fa85 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd6f4:	2c00      	cmp	r4, #0
 23fd6f6:	d0e9      	beq.n	23fd6cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd6f8:	4668      	mov	r0, sp
 23fd6fa:	a904      	add	r1, sp, #16
 23fd6fc:	f7ff ffcc 	bl	23fd698 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd700:	4668      	mov	r0, sp
 23fd702:	f7ff fc88 	bl	23fd016 <_ZNK5spark9JSONValue5toIntEv>
 23fd706:	6028      	str	r0, [r5, #0]
 23fd708:	a801      	add	r0, sp, #4
 23fd70a:	f7ff fa78 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd70e:	e7dd      	b.n	23fd6cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd710:	a805      	add	r0, sp, #20
 23fd712:	f7ff fa74 	bl	23fcbfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd716:	b00a      	add	sp, #40	; 0x28
 23fd718:	bd70      	pop	{r4, r5, r6, pc}
 23fd71a:	bf00      	nop
 23fd71c:	023ffae1 	.word	0x023ffae1

023fd720 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd722:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd724:	4913      	ldr	r1, [pc, #76]	; (23fd774 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd726:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd728:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd72a:	f7fe fab5 	bl	23fbc98 <strcmp>
 23fd72e:	b950      	cbnz	r0, 23fd746 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd730:	f001 fb4c 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fd734:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd738:	f001 fb36 	bl	23feda8 <_ZN9USBSerial5beginEl>
}
 23fd73c:	b003      	add	sp, #12
 23fd73e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd742:	f001 bb43 	b.w	23fedcc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd746:	4620      	mov	r0, r4
 23fd748:	490b      	ldr	r1, [pc, #44]	; (23fd778 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd74a:	f7fe faa5 	bl	23fbc98 <strcmp>
 23fd74e:	b978      	cbnz	r0, 23fd770 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd750:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd754:	a901      	add	r1, sp, #4
 23fd756:	4628      	mov	r0, r5
        int baud = 9600;
 23fd758:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd75a:	f7ff ffaf 	bl	23fd6bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd75e:	f001 fd19 	bl	23ff194 <_Z22__fetch_global_Serial1v>
 23fd762:	9901      	ldr	r1, [sp, #4]
 23fd764:	f001 fac4 	bl	23fecf0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd768:	f001 fd14 	bl	23ff194 <_Z22__fetch_global_Serial1v>
}
 23fd76c:	b003      	add	sp, #12
 23fd76e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd770:	2000      	movs	r0, #0
 23fd772:	e7fb      	b.n	23fd76c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd774:	023ffae6 	.word	0x023ffae6
 23fd778:	023ffaed 	.word	0x023ffaed

023fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd77c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd77e:	2614      	movs	r6, #20
 23fd780:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd784:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd786:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd78a:	42ae      	cmp	r6, r5
 23fd78c:	d005      	beq.n	23fd79a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd78e:	f105 0008 	add.w	r0, r5, #8
 23fd792:	f7ff fff3 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd796:	3514      	adds	r5, #20
 23fd798:	e7f7      	b.n	23fd78a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd79a:	6820      	ldr	r0, [r4, #0]
 23fd79c:	f7ff f9d8 	bl	23fcb50 <free>
}
 23fd7a0:	4620      	mov	r0, r4
 23fd7a2:	bd70      	pop	{r4, r5, r6, pc}

023fd7a4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd7a4:	b510      	push	{r4, lr}
 23fd7a6:	4604      	mov	r4, r0
 23fd7a8:	300c      	adds	r0, #12
 23fd7aa:	f7ff ffe7 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd7ae:	4620      	mov	r0, r4
 23fd7b0:	f7ff fa4f 	bl	23fcc52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd7b4:	4620      	mov	r0, r4
 23fd7b6:	bd10      	pop	{r4, pc}

023fd7b8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd7b8:	b510      	push	{r4, lr}
 23fd7ba:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd7bc:	4b03      	ldr	r3, [pc, #12]	; (23fd7cc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd7be:	f840 3b04 	str.w	r3, [r0], #4
 23fd7c2:	f7ff ffef 	bl	23fd7a4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd7c6:	4620      	mov	r0, r4
 23fd7c8:	bd10      	pop	{r4, pc}
 23fd7ca:	bf00      	nop
 23fd7cc:	023ff9dc 	.word	0x023ff9dc

023fd7d0 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd7d0:	b510      	push	{r4, lr}
 23fd7d2:	4604      	mov	r4, r0
 23fd7d4:	f7ff fff0 	bl	23fd7b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd7d8:	4620      	mov	r0, r4
 23fd7da:	2124      	movs	r1, #36	; 0x24
 23fd7dc:	f7fe fa8f 	bl	23fbcfe <_ZdlPvj>
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	bd10      	pop	{r4, pc}

023fd7e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd7e4:	b510      	push	{r4, lr}
 23fd7e6:	4604      	mov	r4, r0
 23fd7e8:	4b02      	ldr	r3, [pc, #8]	; (23fd7f4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd7ea:	6003      	str	r3, [r0, #0]
 23fd7ec:	f7ff ffe4 	bl	23fd7b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd7f0:	4620      	mov	r0, r4
 23fd7f2:	bd10      	pop	{r4, pc}
 23fd7f4:	023ffb8c 	.word	0x023ffb8c

023fd7f8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd7f8:	b510      	push	{r4, lr}
 23fd7fa:	4604      	mov	r4, r0
 23fd7fc:	f7ff fff2 	bl	23fd7e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd800:	4620      	mov	r0, r4
 23fd802:	2124      	movs	r1, #36	; 0x24
 23fd804:	f7fe fa7b 	bl	23fbcfe <_ZdlPvj>
 23fd808:	4620      	mov	r0, r4
 23fd80a:	bd10      	pop	{r4, pc}

023fd80c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd80c:	680a      	ldr	r2, [r1, #0]
 23fd80e:	b510      	push	{r4, lr}
 23fd810:	6002      	str	r2, [r0, #0]
 23fd812:	684a      	ldr	r2, [r1, #4]
 23fd814:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd816:	2200      	movs	r2, #0
 23fd818:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd81c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd81e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd820:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd822:	6084      	str	r4, [r0, #8]
 23fd824:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd826:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd828:	60c4      	str	r4, [r0, #12]
 23fd82a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd82c:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd82e:	6104      	str	r4, [r0, #16]
 23fd830:	bd10      	pop	{r4, pc}

023fd832 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fd832:	2200      	movs	r2, #0
 23fd834:	e9c0 2200 	strd	r2, r2, [r0]
 23fd838:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd83a:	b510      	push	{r4, lr}
 23fd83c:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd83e:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd840:	6004      	str	r4, [r0, #0]
 23fd842:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd844:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd846:	6044      	str	r4, [r0, #4]
 23fd848:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd84a:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd84c:	6084      	str	r4, [r0, #8]
}
 23fd84e:	bd10      	pop	{r4, pc}

023fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd850:	b510      	push	{r4, lr}
 23fd852:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd854:	6803      	ldr	r3, [r0, #0]
 23fd856:	6818      	ldr	r0, [r3, #0]
 23fd858:	f7fe fd60 	bl	23fc31c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd85c:	4620      	mov	r0, r4
 23fd85e:	bd10      	pop	{r4, pc}

023fd860 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd864:	b087      	sub	sp, #28
 23fd866:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd868:	4b1c      	ldr	r3, [pc, #112]	; (23fd8dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd86a:	4680      	mov	r8, r0
 23fd86c:	685b      	ldr	r3, [r3, #4]
 23fd86e:	4689      	mov	r9, r1
 23fd870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd874:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd876:	b96b      	cbnz	r3, 23fd894 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd878:	f7ff febe 	bl	23fd5f8 <_ZN5spark10LogManager8instanceEv>
 23fd87c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd87e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd882:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd884:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd886:	f7ff fd79 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd88a:	7b23      	ldrb	r3, [r4, #12]
 23fd88c:	b12b      	cbz	r3, 23fd89a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd88e:	a805      	add	r0, sp, #20
 23fd890:	f7ff ffde 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd894:	b007      	add	sp, #28
 23fd896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd89a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd89c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd8a0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd8a2:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd8a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd8aa:	45aa      	cmp	sl, r5
 23fd8ac:	d012      	beq.n	23fd8d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd8ae:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd8b2:	4631      	mov	r1, r6
 23fd8b4:	1d38      	adds	r0, r7, #4
 23fd8b6:	f7ff fdf7 	bl	23fd4a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd8ba:	4581      	cmp	r9, r0
 23fd8bc:	d3f5      	bcc.n	23fd8aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd8be:	9a03      	ldr	r2, [sp, #12]
 23fd8c0:	683b      	ldr	r3, [r7, #0]
 23fd8c2:	9200      	str	r2, [sp, #0]
 23fd8c4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd8c8:	464a      	mov	r2, r9
 23fd8ca:	4633      	mov	r3, r6
 23fd8cc:	4641      	mov	r1, r8
 23fd8ce:	4638      	mov	r0, r7
 23fd8d0:	47d8      	blx	fp
 23fd8d2:	e7ea      	b.n	23fd8aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd8d4:	2300      	movs	r3, #0
 23fd8d6:	7323      	strb	r3, [r4, #12]
 23fd8d8:	e7d9      	b.n	23fd88e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd8da:	bf00      	nop
 23fd8dc:	e000ed00 	.word	0xe000ed00

023fd8e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd8e4:	469b      	mov	fp, r3
 23fd8e6:	4b1a      	ldr	r3, [pc, #104]	; (23fd950 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd8e8:	4680      	mov	r8, r0
 23fd8ea:	685b      	ldr	r3, [r3, #4]
 23fd8ec:	4689      	mov	r9, r1
 23fd8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd8f2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd8f4:	b96b      	cbnz	r3, 23fd912 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd8f6:	f7ff fe7f 	bl	23fd5f8 <_ZN5spark10LogManager8instanceEv>
 23fd8fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd8fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd900:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd902:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd904:	f7ff fd3a 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd908:	7b23      	ldrb	r3, [r4, #12]
 23fd90a:	b12b      	cbz	r3, 23fd918 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd90c:	a801      	add	r0, sp, #4
 23fd90e:	f7ff ff9f 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd912:	b003      	add	sp, #12
 23fd914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd918:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd91a:	b2f6      	uxtb	r6, r6
 23fd91c:	7323      	strb	r3, [r4, #12]
 23fd91e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd922:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd926:	4555      	cmp	r5, sl
 23fd928:	d00e      	beq.n	23fd948 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd92a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd92e:	4659      	mov	r1, fp
 23fd930:	1d38      	adds	r0, r7, #4
 23fd932:	f7ff fdb9 	bl	23fd4a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd936:	4286      	cmp	r6, r0
 23fd938:	d3f5      	bcc.n	23fd926 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd93a:	683b      	ldr	r3, [r7, #0]
 23fd93c:	464a      	mov	r2, r9
 23fd93e:	4641      	mov	r1, r8
 23fd940:	4638      	mov	r0, r7
 23fd942:	68db      	ldr	r3, [r3, #12]
 23fd944:	4798      	blx	r3
 23fd946:	e7ee      	b.n	23fd926 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd948:	2300      	movs	r3, #0
 23fd94a:	7323      	strb	r3, [r4, #12]
 23fd94c:	e7de      	b.n	23fd90c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd94e:	bf00      	nop
 23fd950:	e000ed00 	.word	0xe000ed00

023fd954 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd958:	4b16      	ldr	r3, [pc, #88]	; (23fd9b4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd95a:	4605      	mov	r5, r0
 23fd95c:	685b      	ldr	r3, [r3, #4]
 23fd95e:	460f      	mov	r7, r1
 23fd960:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd964:	bb1b      	cbnz	r3, 23fd9ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd966:	f7ff fe47 	bl	23fd5f8 <_ZN5spark10LogManager8instanceEv>
 23fd96a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd96c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd970:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd972:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd974:	f7ff fd02 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd978:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd97c:	2446      	movs	r4, #70	; 0x46
 23fd97e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd982:	45b0      	cmp	r8, r6
 23fd984:	d109      	bne.n	23fd99a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd986:	a801      	add	r0, sp, #4
 23fd988:	f7ff ff62 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd98c:	42a5      	cmp	r5, r4
 23fd98e:	bfb4      	ite	lt
 23fd990:	2000      	movlt	r0, #0
 23fd992:	2001      	movge	r0, #1
}
 23fd994:	b002      	add	sp, #8
 23fd996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd99a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd99e:	4639      	mov	r1, r7
 23fd9a0:	3004      	adds	r0, #4
 23fd9a2:	f7ff fd81 	bl	23fd4a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd9a6:	4284      	cmp	r4, r0
 23fd9a8:	bfa8      	it	ge
 23fd9aa:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd9ac:	e7e9      	b.n	23fd982 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd9ae:	2000      	movs	r0, #0
 23fd9b0:	e7f0      	b.n	23fd994 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd9b2:	bf00      	nop
 23fd9b4:	e000ed00 	.word	0xe000ed00

023fd9b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd9ba:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd9be:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd9c0:	4604      	mov	r4, r0
 23fd9c2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd9c4:	db0d      	blt.n	23fd9e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd9c6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd9c8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd9ca:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd9cc:	dd04      	ble.n	23fd9d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd9ce:	00b9      	lsls	r1, r7, #2
 23fd9d0:	f7ff f8cc 	bl	23fcb6c <realloc>
            if (!d) {
 23fd9d4:	b918      	cbnz	r0, 23fd9de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd9d8:	f7ff f8ba 	bl	23fcb50 <free>
        T* d = nullptr;
 23fd9dc:	2000      	movs	r0, #0
        data_ = d;
 23fd9de:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd9e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd9e2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd9e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd9e6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd9ea:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd9ec:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd9f0:	1d08      	adds	r0, r1, #4
 23fd9f2:	f001 fd90 	bl	23ff516 <memmove>
    new(p) T(std::move(value));
 23fd9f6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd9fa:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd9fc:	2001      	movs	r0, #1
    ++size_;
 23fd9fe:	3301      	adds	r3, #1
 23fda00:	6063      	str	r3, [r4, #4]
    return true;
 23fda02:	e7e8      	b.n	23fd9d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fda04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fda04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fda06:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fda08:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fda0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fda0e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fda10:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fda12:	f7ff fcb3 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fda16:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fda1a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fda1e:	4293      	cmp	r3, r2
 23fda20:	4619      	mov	r1, r3
 23fda22:	d00a      	beq.n	23fda3a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fda24:	6809      	ldr	r1, [r1, #0]
 23fda26:	3304      	adds	r3, #4
 23fda28:	42a9      	cmp	r1, r5
 23fda2a:	d1f8      	bne.n	23fda1e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fda2c:	a801      	add	r0, sp, #4
 23fda2e:	f7ff ff0f 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fda32:	2500      	movs	r5, #0
}
 23fda34:	4628      	mov	r0, r5
 23fda36:	b003      	add	sp, #12
 23fda38:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fda3a:	4629      	mov	r1, r5
 23fda3c:	4620      	mov	r0, r4
 23fda3e:	f7ff ffbb 	bl	23fd9b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fda42:	4605      	mov	r5, r0
 23fda44:	2800      	cmp	r0, #0
 23fda46:	d0f1      	beq.n	23fda2c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fda48:	6863      	ldr	r3, [r4, #4]
 23fda4a:	2b01      	cmp	r3, #1
 23fda4c:	d101      	bne.n	23fda52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fda4e:	f7ff fdef 	bl	23fd630 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fda52:	a801      	add	r0, sp, #4
 23fda54:	f7ff fefc 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fda58:	e7ec      	b.n	23fda34 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fda5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fda5a:	460b      	mov	r3, r1
 23fda5c:	b570      	push	{r4, r5, r6, lr}
 23fda5e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fda60:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fda64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fda68:	4282      	cmp	r2, r0
 23fda6a:	d00f      	beq.n	23fda8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fda6c:	4601      	mov	r1, r0
            if (*p == value) {
 23fda6e:	681d      	ldr	r5, [r3, #0]
 23fda70:	f851 6b04 	ldr.w	r6, [r1], #4
 23fda74:	42ae      	cmp	r6, r5
 23fda76:	d107      	bne.n	23fda88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fda78:	1a52      	subs	r2, r2, r1
 23fda7a:	f001 fd4c 	bl	23ff516 <memmove>
    return true;
 23fda7e:	2001      	movs	r0, #1
    --size_;
 23fda80:	6863      	ldr	r3, [r4, #4]
 23fda82:	3b01      	subs	r3, #1
 23fda84:	6063      	str	r3, [r4, #4]
}
 23fda86:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fda88:	4608      	mov	r0, r1
 23fda8a:	e7ed      	b.n	23fda68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fda8c:	2000      	movs	r0, #0
 23fda8e:	e7fa      	b.n	23fda86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fda90 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fda90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fda92:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fda94:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fda98:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fda9a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fda9c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fda9e:	f7ff fc6d 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdaa2:	4620      	mov	r0, r4
 23fdaa4:	a901      	add	r1, sp, #4
 23fdaa6:	f7ff ffd8 	bl	23fda5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdaaa:	b118      	cbz	r0, 23fdab4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdaac:	6863      	ldr	r3, [r4, #4]
 23fdaae:	b90b      	cbnz	r3, 23fdab4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdab0:	f7ff fdca 	bl	23fd648 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdab4:	a803      	add	r0, sp, #12
 23fdab6:	f7ff fecb 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdaba:	b004      	add	sp, #16
 23fdabc:	bd10      	pop	{r4, pc}

023fdabe <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdabe:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdac0:	b570      	push	{r4, r5, r6, lr}
 23fdac2:	4604      	mov	r4, r0
 23fdac4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdac8:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdacc:	42ae      	cmp	r6, r5
 23fdace:	d015      	beq.n	23fdafc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdad0:	4620      	mov	r0, r4
 23fdad2:	f105 0110 	add.w	r1, r5, #16
 23fdad6:	f7ff ffc0 	bl	23fda5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdada:	6863      	ldr	r3, [r4, #4]
 23fdadc:	b90b      	cbnz	r3, 23fdae2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdade:	f7ff fdb3 	bl	23fd648 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdae2:	69e0      	ldr	r0, [r4, #28]
 23fdae4:	6929      	ldr	r1, [r5, #16]
 23fdae6:	6803      	ldr	r3, [r0, #0]
 23fdae8:	68db      	ldr	r3, [r3, #12]
 23fdaea:	4798      	blx	r3
        if (h.stream) {
 23fdaec:	6969      	ldr	r1, [r5, #20]
 23fdaee:	b119      	cbz	r1, 23fdaf8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdaf0:	6a20      	ldr	r0, [r4, #32]
 23fdaf2:	6803      	ldr	r3, [r0, #0]
 23fdaf4:	68db      	ldr	r3, [r3, #12]
 23fdaf6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdaf8:	3518      	adds	r5, #24
 23fdafa:	e7e7      	b.n	23fdacc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdafc:	2618      	movs	r6, #24
 23fdafe:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdb02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdb06:	42ae      	cmp	r6, r5
 23fdb08:	d004      	beq.n	23fdb14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdb0a:	4628      	mov	r0, r5
 23fdb0c:	f000 fd04 	bl	23fe518 <_ZN6StringD1Ev>
 23fdb10:	3518      	adds	r5, #24
 23fdb12:	e7f8      	b.n	23fdb06 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdb14:	2300      	movs	r3, #0
 23fdb16:	6163      	str	r3, [r4, #20]
}
 23fdb18:	bd70      	pop	{r4, r5, r6, pc}

023fdb1a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdb1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdb1c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdb1e:	f7ff fd93 	bl	23fd648 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdb22:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdb26:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb28:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb2a:	f7ff fc27 	bl	23fd37c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdb2e:	4620      	mov	r0, r4
 23fdb30:	f7ff ffc5 	bl	23fdabe <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fdb34:	a801      	add	r0, sp, #4
 23fdb36:	f7ff fe8b 	bl	23fd850 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fdb3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fdb3c:	b108      	cbz	r0, 23fdb42 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fdb3e:	f7fe fbd1 	bl	23fc2e4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fdb42:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdb46:	2618      	movs	r6, #24
 23fdb48:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdb4c:	42ae      	cmp	r6, r5
 23fdb4e:	d004      	beq.n	23fdb5a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fdb50:	4628      	mov	r0, r5
 23fdb52:	f000 fce1 	bl	23fe518 <_ZN6StringD1Ev>
 23fdb56:	3518      	adds	r5, #24
 23fdb58:	e7f8      	b.n	23fdb4c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fdb5a:	6920      	ldr	r0, [r4, #16]
 23fdb5c:	f7fe fff8 	bl	23fcb50 <free>
 23fdb60:	6820      	ldr	r0, [r4, #0]
 23fdb62:	f7fe fff5 	bl	23fcb50 <free>
}
 23fdb66:	4620      	mov	r0, r4
 23fdb68:	b002      	add	sp, #8
 23fdb6a:	bd70      	pop	{r4, r5, r6, pc}

023fdb6c <__tcf_2>:
    static LogManager mgr;
 23fdb6c:	4801      	ldr	r0, [pc, #4]	; (23fdb74 <__tcf_2+0x8>)
 23fdb6e:	f7ff bfd4 	b.w	23fdb1a <_ZN5spark10LogManagerD1Ev>
 23fdb72:	bf00      	nop
 23fdb74:	1007ae7c 	.word	0x1007ae7c

023fdb78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fdb78:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fdb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdb7c:	4604      	mov	r4, r0
 23fdb7e:	460d      	mov	r5, r1
 23fdb80:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdb82:	d915      	bls.n	23fdbb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fdb84:	4290      	cmp	r0, r2
 23fdb86:	d214      	bcs.n	23fdbb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fdb88:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fdb8c:	1a75      	subs	r5, r6, r1
 23fdb8e:	f1a1 0714 	sub.w	r7, r1, #20
 23fdb92:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdb94:	42b7      	cmp	r7, r6
 23fdb96:	d01a      	beq.n	23fdbce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fdb98:	b11c      	cbz	r4, 23fdba2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fdb9a:	4631      	mov	r1, r6
 23fdb9c:	4620      	mov	r0, r4
 23fdb9e:	f7ff fe35 	bl	23fd80c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fdba2:	f106 0008 	add.w	r0, r6, #8
 23fdba6:	f7ff fde9 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fdbaa:	3e14      	subs	r6, #20
 23fdbac:	3c14      	subs	r4, #20
 23fdbae:	e7f1      	b.n	23fdb94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fdbb0:	d00d      	beq.n	23fdbce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fdbb2:	42b5      	cmp	r5, r6
 23fdbb4:	d00b      	beq.n	23fdbce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fdbb6:	b11c      	cbz	r4, 23fdbc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fdbb8:	4629      	mov	r1, r5
 23fdbba:	4620      	mov	r0, r4
 23fdbbc:	f7ff fe26 	bl	23fd80c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fdbc0:	f105 0008 	add.w	r0, r5, #8
 23fdbc4:	f7ff fdda 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fdbc8:	3514      	adds	r5, #20
 23fdbca:	3414      	adds	r4, #20
 23fdbcc:	e7f1      	b.n	23fdbb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fdbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdbd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdbd4:	4690      	mov	r8, r2
        capacity_(0) {
 23fdbd6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdbd8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdbda:	b095      	sub	sp, #84	; 0x54
 23fdbdc:	9103      	str	r1, [sp, #12]
    return size_;
 23fdbde:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fdbe2:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fdbe4:	4299      	cmp	r1, r3
        capacity_(0) {
 23fdbe6:	e9c0 3300 	strd	r3, r3, [r0]
 23fdbea:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fdbee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fdbf2:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdbf6:	7602      	strb	r2, [r0, #24]
 23fdbf8:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fdbfa:	dc23      	bgt.n	23fdc44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fdbfc:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdc00:	2314      	movs	r3, #20
 23fdc02:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdc06:	42af      	cmp	r7, r5
 23fdc08:	d03b      	beq.n	23fdc82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdc0a:	4629      	mov	r1, r5
 23fdc0c:	a80b      	add	r0, sp, #44	; 0x2c
 23fdc0e:	f000 fcec 	bl	23fe5ea <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdc12:	a90b      	add	r1, sp, #44	; 0x2c
 23fdc14:	a80f      	add	r0, sp, #60	; 0x3c
 23fdc16:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdc18:	f000 fce7 	bl	23fe5ea <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc1c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdc20:	4299      	cmp	r1, r3
 23fdc22:	da1b      	bge.n	23fdc5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdc24:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdc28:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdc2c:	4631      	mov	r1, r6
 23fdc2e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fdc32:	f106 0010 	add.w	r0, r6, #16
 23fdc36:	f7ff fb23 	bl	23fd280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdc3a:	b9ee      	cbnz	r6, 23fdc78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdc3e:	3301      	adds	r3, #1
 23fdc40:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdc42:	e011      	b.n	23fdc68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdc44:	a808      	add	r0, sp, #32
 23fdc46:	f7ff fb45 	bl	23fd2d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdc4a:	2800      	cmp	r0, #0
 23fdc4c:	d1d6      	bne.n	23fdbfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdc4e:	a808      	add	r0, sp, #32
 23fdc50:	f7fe ffff 	bl	23fcc52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdc54:	4620      	mov	r0, r4
 23fdc56:	b015      	add	sp, #84	; 0x54
 23fdc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc5c:	3101      	adds	r1, #1
 23fdc5e:	a808      	add	r0, sp, #32
 23fdc60:	f7ff fb38 	bl	23fd2d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdc64:	2800      	cmp	r0, #0
 23fdc66:	d1dd      	bne.n	23fdc24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdc68:	a80f      	add	r0, sp, #60	; 0x3c
 23fdc6a:	f000 fc55 	bl	23fe518 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdc6e:	a80b      	add	r0, sp, #44	; 0x2c
 23fdc70:	f000 fc52 	bl	23fe518 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdc74:	3514      	adds	r5, #20
 23fdc76:	e7c6      	b.n	23fdc06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdc78:	4630      	mov	r0, r6
 23fdc7a:	a90f      	add	r1, sp, #60	; 0x3c
 23fdc7c:	f000 fcb5 	bl	23fe5ea <_ZN6StringC1EOS_>
 23fdc80:	e7dc      	b.n	23fdc3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdc82:	2600      	movs	r6, #0
 23fdc84:	f04f 0914 	mov.w	r9, #20
 23fdc88:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdc8c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdc8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdc92:	429e      	cmp	r6, r3
 23fdc94:	da7c      	bge.n	23fdd90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fdc96:	0133      	lsls	r3, r6, #4
 23fdc98:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdc9a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdc9c:	b90b      	cbnz	r3, 23fdca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdc9e:	3601      	adds	r6, #1
 23fdca0:	e7f5      	b.n	23fdc8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdca2:	2300      	movs	r3, #0
 23fdca4:	9307      	str	r3, [sp, #28]
 23fdca6:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdcaa:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdcac:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdcae:	a907      	add	r1, sp, #28
 23fdcb0:	a806      	add	r0, sp, #24
 23fdcb2:	f7ff fb3c 	bl	23fd32e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdcb6:	4682      	mov	sl, r0
 23fdcb8:	2800      	cmp	r0, #0
 23fdcba:	d0f0      	beq.n	23fdc9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fdcbc:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdcc0:	4601      	mov	r1, r0
            bool found = false;
 23fdcc2:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdcc6:	4628      	mov	r0, r5
 23fdcc8:	9a07      	ldr	r2, [sp, #28]
 23fdcca:	f10d 0317 	add.w	r3, sp, #23
 23fdcce:	f7ff fbaf 	bl	23fd430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdcd2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdcd6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdcd8:	2f00      	cmp	r7, #0
 23fdcda:	d14a      	bne.n	23fdd72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fdcdc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fdce0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fdce4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fdce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdcec:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fdcf0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fdcf4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcf6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fdcfa:	4293      	cmp	r3, r2
 23fdcfc:	db17      	blt.n	23fdd2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fdcfe:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fdd02:	f1ba 0f00 	cmp.w	sl, #0
 23fdd06:	dd30      	ble.n	23fdd6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fdd08:	fb09 f00a 	mul.w	r0, r9, sl
 23fdd0c:	f7fe ff12 	bl	23fcb34 <malloc>
            if (!d) {
 23fdd10:	4683      	mov	fp, r0
 23fdd12:	b360      	cbz	r0, 23fdd6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fdd14:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdd18:	fb09 1202 	mla	r2, r9, r2, r1
 23fdd1c:	f7ff ff2c 	bl	23fdb78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fdd20:	6828      	ldr	r0, [r5, #0]
 23fdd22:	f7fe ff15 	bl	23fcb50 <free>
        data_ = d;
 23fdd26:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fdd2a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fdd2e:	682b      	ldr	r3, [r5, #0]
 23fdd30:	9a01      	ldr	r2, [sp, #4]
 23fdd32:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fdd36:	686a      	ldr	r2, [r5, #4]
 23fdd38:	4651      	mov	r1, sl
 23fdd3a:	fb09 3202 	mla	r2, r9, r2, r3
 23fdd3e:	f10a 0014 	add.w	r0, sl, #20
 23fdd42:	f7ff ff19 	bl	23fdb78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fdd46:	f1ba 0f00 	cmp.w	sl, #0
 23fdd4a:	d003      	beq.n	23fdd54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fdd4c:	4650      	mov	r0, sl
 23fdd4e:	a90f      	add	r1, sp, #60	; 0x3c
 23fdd50:	f7ff fd5c 	bl	23fd80c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fdd54:	686b      	ldr	r3, [r5, #4]
 23fdd56:	3301      	adds	r3, #1
 23fdd58:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fdd5a:	a811      	add	r0, sp, #68	; 0x44
 23fdd5c:	f7ff fd0e 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdd60:	b13f      	cbz	r7, 23fdd72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fdd62:	a80b      	add	r0, sp, #44	; 0x2c
 23fdd64:	f7ff fd0a 	bl	23fd77c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdd68:	e771      	b.n	23fdc4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fdd6a:	46bb      	mov	fp, r7
 23fdd6c:	e7d8      	b.n	23fdd20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdd6e:	2701      	movs	r7, #1
 23fdd70:	e7f3      	b.n	23fdd5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fdd72:	9b01      	ldr	r3, [sp, #4]
 23fdd74:	682d      	ldr	r5, [r5, #0]
 23fdd76:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fdd7a:	9b06      	ldr	r3, [sp, #24]
 23fdd7c:	781b      	ldrb	r3, [r3, #0]
 23fdd7e:	b92b      	cbnz	r3, 23fdd8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fdd80:	f8d8 3000 	ldr.w	r3, [r8]
 23fdd84:	9a02      	ldr	r2, [sp, #8]
 23fdd86:	4413      	add	r3, r2
 23fdd88:	7c1b      	ldrb	r3, [r3, #16]
 23fdd8a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fdd8c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fdd8e:	e78e      	b.n	23fdcae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdd90:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdd92:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdd94:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdd96:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdd98:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd9a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fdd9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd9e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdda0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdda2:	60a2      	str	r2, [r4, #8]
 23fdda4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fdda6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdda8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fddaa:	60e2      	str	r2, [r4, #12]
 23fddac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fddae:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fddb0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fddb2:	6122      	str	r2, [r4, #16]
 23fddb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fddb6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fddb8:	9b03      	ldr	r3, [sp, #12]
 23fddba:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fddbc:	6162      	str	r2, [r4, #20]
 23fddbe:	7623      	strb	r3, [r4, #24]
 23fddc0:	e7cf      	b.n	23fdd62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fddc4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fddc6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fddc8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fddca:	4617      	mov	r7, r2
 23fddcc:	b087      	sub	sp, #28
 23fddce:	460d      	mov	r5, r1
        stream_(&stream) {
 23fddd0:	4668      	mov	r0, sp
 23fddd2:	4619      	mov	r1, r3
 23fddd4:	f7fe f8bf 	bl	23fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fddd8:	4b0b      	ldr	r3, [pc, #44]	; (23fde08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fddda:	4669      	mov	r1, sp
 23fdddc:	f846 3b04 	str.w	r3, [r6], #4
 23fdde0:	a803      	add	r0, sp, #12
 23fdde2:	f7fe f8b8 	bl	23fbf56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fdde6:	4639      	mov	r1, r7
 23fdde8:	aa03      	add	r2, sp, #12
 23fddea:	4630      	mov	r0, r6
 23fddec:	f7ff fef0 	bl	23fdbd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fddf0:	a803      	add	r0, sp, #12
 23fddf2:	f7fe f86f 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fddf6:	4668      	mov	r0, sp
 23fddf8:	f7fe f86c 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fddfc:	4620      	mov	r0, r4
        stream_(&stream) {
 23fddfe:	4b03      	ldr	r3, [pc, #12]	; (23fde0c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fde00:	6225      	str	r5, [r4, #32]
 23fde02:	6023      	str	r3, [r4, #0]
}
 23fde04:	b007      	add	sp, #28
 23fde06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fde08:	023ff9dc 	.word	0x023ff9dc
 23fde0c:	023ffb74 	.word	0x023ffb74

023fde10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fde10:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fde12:	460f      	mov	r7, r1
 23fde14:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fde16:	4638      	mov	r0, r7
 23fde18:	491c      	ldr	r1, [pc, #112]	; (23fde8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fde1a:	4616      	mov	r6, r2
 23fde1c:	461d      	mov	r5, r3
 23fde1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fde20:	f7fd ff3a 	bl	23fbc98 <strcmp>
 23fde24:	b9c0      	cbnz	r0, 23fde58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fde26:	b1a4      	cbz	r4, 23fde52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fde28:	4629      	mov	r1, r5
 23fde2a:	a801      	add	r0, sp, #4
 23fde2c:	f7ff fd01 	bl	23fd832 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fde30:	2024      	movs	r0, #36	; 0x24
 23fde32:	4917      	ldr	r1, [pc, #92]	; (23fde90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fde34:	f001 fa3e 	bl	23ff2b4 <_ZnwjRKSt9nothrow_t>
 23fde38:	4605      	mov	r5, r0
 23fde3a:	b130      	cbz	r0, 23fde4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fde3c:	ab01      	add	r3, sp, #4
 23fde3e:	4632      	mov	r2, r6
 23fde40:	4621      	mov	r1, r4
 23fde42:	f7ff ffbf 	bl	23fddc4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fde46:	4b13      	ldr	r3, [pc, #76]	; (23fde94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fde48:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fde4a:	a801      	add	r0, sp, #4
 23fde4c:	f7fe f842 	bl	23fbed4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fde50:	462c      	mov	r4, r5
}
 23fde52:	4620      	mov	r0, r4
 23fde54:	b005      	add	sp, #20
 23fde56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fde58:	4638      	mov	r0, r7
 23fde5a:	490f      	ldr	r1, [pc, #60]	; (23fde98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fde5c:	f7fd ff1c 	bl	23fbc98 <strcmp>
 23fde60:	b990      	cbnz	r0, 23fde88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fde62:	2c00      	cmp	r4, #0
 23fde64:	d0f5      	beq.n	23fde52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fde66:	4629      	mov	r1, r5
 23fde68:	a801      	add	r0, sp, #4
 23fde6a:	f7ff fce2 	bl	23fd832 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fde6e:	2024      	movs	r0, #36	; 0x24
 23fde70:	4907      	ldr	r1, [pc, #28]	; (23fde90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fde72:	f001 fa1f 	bl	23ff2b4 <_ZnwjRKSt9nothrow_t>
 23fde76:	4605      	mov	r5, r0
 23fde78:	2800      	cmp	r0, #0
 23fde7a:	d0e6      	beq.n	23fde4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fde7c:	4632      	mov	r2, r6
 23fde7e:	4621      	mov	r1, r4
 23fde80:	ab01      	add	r3, sp, #4
 23fde82:	f7ff ff9f 	bl	23fddc4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fde86:	e7e0      	b.n	23fde4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fde88:	2400      	movs	r4, #0
 23fde8a:	e7e2      	b.n	23fde52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fde8c:	023ffaf5 	.word	0x023ffaf5
 23fde90:	023ffd68 	.word	0x023ffd68
 23fde94:	023ffb8c 	.word	0x023ffb8c
 23fde98:	023ffaf9 	.word	0x023ffaf9

023fde9c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fde9c:	4b01      	ldr	r3, [pc, #4]	; (23fdea4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fde9e:	4a02      	ldr	r2, [pc, #8]	; (23fdea8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fdea0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fdea2:	4770      	bx	lr
 23fdea4:	1007ae78 	.word	0x1007ae78
 23fdea8:	023ffb0a 	.word	0x023ffb0a

023fdeac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdeb0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fdeb2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdeb6:	4604      	mov	r4, r0
 23fdeb8:	460e      	mov	r6, r1
 23fdeba:	4617      	mov	r7, r2
 23fdebc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fdebe:	f000 ff85 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fdec2:	4581      	cmp	r9, r0
 23fdec4:	d04d      	beq.n	23fdf62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fdec6:	792b      	ldrb	r3, [r5, #4]
 23fdec8:	0719      	lsls	r1, r3, #28
 23fdeca:	d504      	bpl.n	23fded6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fdecc:	4620      	mov	r0, r4
 23fdece:	696a      	ldr	r2, [r5, #20]
 23fded0:	4954      	ldr	r1, [pc, #336]	; (23fe024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fded2:	f7ff fb12 	bl	23fd4fa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fded6:	f1b8 0f00 	cmp.w	r8, #0
 23fdeda:	d00d      	beq.n	23fdef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fdedc:	215b      	movs	r1, #91	; 0x5b
 23fdede:	4620      	mov	r0, r4
 23fdee0:	f7ff fa9a 	bl	23fd418 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fdee4:	4641      	mov	r1, r8
 23fdee6:	4620      	mov	r0, r4
 23fdee8:	f7ff fa87 	bl	23fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fdeec:	6823      	ldr	r3, [r4, #0]
 23fdeee:	2202      	movs	r2, #2
 23fdef0:	4620      	mov	r0, r4
 23fdef2:	68db      	ldr	r3, [r3, #12]
 23fdef4:	494c      	ldr	r1, [pc, #304]	; (23fe028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fdef6:	4798      	blx	r3
    if (attr.has_file) {
 23fdef8:	792b      	ldrb	r3, [r5, #4]
 23fdefa:	07da      	lsls	r2, r3, #31
 23fdefc:	d524      	bpl.n	23fdf48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fdefe:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fdf02:	212f      	movs	r1, #47	; 0x2f
 23fdf04:	4640      	mov	r0, r8
 23fdf06:	f001 fb8a 	bl	23ff61e <strrchr>
    if (s1) {
 23fdf0a:	b108      	cbz	r0, 23fdf10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fdf0c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdf10:	4641      	mov	r1, r8
 23fdf12:	4620      	mov	r0, r4
 23fdf14:	f7ff fa71 	bl	23fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdf18:	792b      	ldrb	r3, [r5, #4]
 23fdf1a:	079b      	lsls	r3, r3, #30
 23fdf1c:	d508      	bpl.n	23fdf30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdf1e:	213a      	movs	r1, #58	; 0x3a
 23fdf20:	4620      	mov	r0, r4
 23fdf22:	f7ff fa79 	bl	23fd418 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdf26:	4620      	mov	r0, r4
 23fdf28:	68ea      	ldr	r2, [r5, #12]
 23fdf2a:	4940      	ldr	r1, [pc, #256]	; (23fe02c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdf2c:	f7ff fae5 	bl	23fd4fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdf30:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdf32:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdf34:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdf38:	4620      	mov	r0, r4
            write(", ", 2);
 23fdf3a:	f04f 0202 	mov.w	r2, #2
 23fdf3e:	68db      	ldr	r3, [r3, #12]
 23fdf40:	bf14      	ite	ne
 23fdf42:	493b      	ldrne	r1, [pc, #236]	; (23fe030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fdf44:	493b      	ldreq	r1, [pc, #236]	; (23fe034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdf46:	4798      	blx	r3
    if (attr.has_function) {
 23fdf48:	792b      	ldrb	r3, [r5, #4]
 23fdf4a:	0758      	lsls	r0, r3, #29
 23fdf4c:	d51d      	bpl.n	23fdf8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdf4e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdf50:	460b      	mov	r3, r1
 23fdf52:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fdf54:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdf58:	b160      	cbz	r0, 23fdf74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fdf5a:	2820      	cmp	r0, #32
 23fdf5c:	d108      	bne.n	23fdf70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fdf5e:	4619      	mov	r1, r3
 23fdf60:	e7f7      	b.n	23fdf52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fdf62:	4835      	ldr	r0, [pc, #212]	; (23fe038 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fdf64:	f000 f983 	bl	23fe26e <_ZN5spark12NetworkClass9listeningEv>
 23fdf68:	2800      	cmp	r0, #0
 23fdf6a:	d0ac      	beq.n	23fdec6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fdf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fdf70:	2828      	cmp	r0, #40	; 0x28
 23fdf72:	d1ee      	bne.n	23fdf52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fdf74:	6823      	ldr	r3, [r4, #0]
 23fdf76:	1a52      	subs	r2, r2, r1
 23fdf78:	4620      	mov	r0, r4
 23fdf7a:	68db      	ldr	r3, [r3, #12]
 23fdf7c:	4798      	blx	r3
        write("(): ", 4);
 23fdf7e:	6823      	ldr	r3, [r4, #0]
 23fdf80:	2204      	movs	r2, #4
 23fdf82:	4620      	mov	r0, r4
 23fdf84:	68db      	ldr	r3, [r3, #12]
 23fdf86:	492d      	ldr	r1, [pc, #180]	; (23fe03c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fdf88:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fdf8a:	2100      	movs	r1, #0
 23fdf8c:	4638      	mov	r0, r7
 23fdf8e:	f7fe fc8f 	bl	23fc8b0 <log_level_name>
 23fdf92:	4601      	mov	r1, r0
    write(s);
 23fdf94:	4620      	mov	r0, r4
 23fdf96:	f7ff fa30 	bl	23fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fdf9a:	6823      	ldr	r3, [r4, #0]
 23fdf9c:	2202      	movs	r2, #2
 23fdf9e:	4620      	mov	r0, r4
 23fdfa0:	68db      	ldr	r3, [r3, #12]
 23fdfa2:	4924      	ldr	r1, [pc, #144]	; (23fe034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdfa4:	4798      	blx	r3
    if (msg) {
 23fdfa6:	b11e      	cbz	r6, 23fdfb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fdfa8:	4631      	mov	r1, r6
 23fdfaa:	4620      	mov	r0, r4
 23fdfac:	f7ff fa25 	bl	23fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fdfb0:	792b      	ldrb	r3, [r5, #4]
 23fdfb2:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fdfb6:	d02c      	beq.n	23fe012 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fdfb8:	6823      	ldr	r3, [r4, #0]
 23fdfba:	4921      	ldr	r1, [pc, #132]	; (23fe040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fdfbc:	68db      	ldr	r3, [r3, #12]
 23fdfbe:	2202      	movs	r2, #2
 23fdfc0:	4620      	mov	r0, r4
 23fdfc2:	4798      	blx	r3
        if (attr.has_code) {
 23fdfc4:	792b      	ldrb	r3, [r5, #4]
 23fdfc6:	06d9      	lsls	r1, r3, #27
 23fdfc8:	d50a      	bpl.n	23fdfe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fdfca:	6823      	ldr	r3, [r4, #0]
 23fdfcc:	2207      	movs	r2, #7
 23fdfce:	4620      	mov	r0, r4
 23fdfd0:	491c      	ldr	r1, [pc, #112]	; (23fe044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fdfd2:	68db      	ldr	r3, [r3, #12]
 23fdfd4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fdfd6:	4620      	mov	r0, r4
 23fdfd8:	69aa      	ldr	r2, [r5, #24]
 23fdfda:	491b      	ldr	r1, [pc, #108]	; (23fe048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fdfdc:	f7ff fa8d 	bl	23fd4fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fdfe0:	792b      	ldrb	r3, [r5, #4]
 23fdfe2:	069a      	lsls	r2, r3, #26
 23fdfe4:	d511      	bpl.n	23fe00a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fdfe6:	06db      	lsls	r3, r3, #27
 23fdfe8:	d505      	bpl.n	23fdff6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fdfea:	6823      	ldr	r3, [r4, #0]
 23fdfec:	2202      	movs	r2, #2
 23fdfee:	4620      	mov	r0, r4
 23fdff0:	68db      	ldr	r3, [r3, #12]
 23fdff2:	490f      	ldr	r1, [pc, #60]	; (23fe030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fdff4:	4798      	blx	r3
            write("details = ", 10);
 23fdff6:	6823      	ldr	r3, [r4, #0]
 23fdff8:	4620      	mov	r0, r4
 23fdffa:	4914      	ldr	r1, [pc, #80]	; (23fe04c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fdffc:	220a      	movs	r2, #10
 23fdffe:	68db      	ldr	r3, [r3, #12]
 23fe000:	4798      	blx	r3
            write(attr.details);
 23fe002:	4620      	mov	r0, r4
 23fe004:	69e9      	ldr	r1, [r5, #28]
 23fe006:	f7ff f9f8 	bl	23fd3fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe00a:	215d      	movs	r1, #93	; 0x5d
 23fe00c:	4620      	mov	r0, r4
 23fe00e:	f7ff fa03 	bl	23fd418 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe012:	6823      	ldr	r3, [r4, #0]
 23fe014:	4620      	mov	r0, r4
}
 23fe016:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe01a:	2202      	movs	r2, #2
 23fe01c:	68db      	ldr	r3, [r3, #12]
 23fe01e:	490c      	ldr	r1, [pc, #48]	; (23fe050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe020:	4718      	bx	r3
 23fe022:	bf00      	nop
 23fe024:	023ffb0e 	.word	0x023ffb0e
 23fe028:	023ffb15 	.word	0x023ffb15
 23fe02c:	023ffc30 	.word	0x023ffc30
 23fe030:	023ffb18 	.word	0x023ffb18
 23fe034:	023ffb1d 	.word	0x023ffb1d
 23fe038:	1007aea4 	.word	0x1007aea4
 23fe03c:	023ffb1b 	.word	0x023ffb1b
 23fe040:	023ffb20 	.word	0x023ffb20
 23fe044:	023ffb23 	.word	0x023ffb23
 23fe048:	023ffb2b 	.word	0x023ffb2b
 23fe04c:	023ffb2e 	.word	0x023ffb2e
 23fe050:	023ffb39 	.word	0x023ffb39

023fe054 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe058:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe05a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe05c:	460d      	mov	r5, r1
 23fe05e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe060:	f000 feb4 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fe064:	4287      	cmp	r7, r0
 23fe066:	d007      	beq.n	23fe078 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe068:	6a20      	ldr	r0, [r4, #32]
 23fe06a:	4632      	mov	r2, r6
 23fe06c:	6803      	ldr	r3, [r0, #0]
 23fe06e:	4629      	mov	r1, r5
}
 23fe070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe074:	68db      	ldr	r3, [r3, #12]
 23fe076:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe078:	4803      	ldr	r0, [pc, #12]	; (23fe088 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe07a:	f000 f8f8 	bl	23fe26e <_ZN5spark12NetworkClass9listeningEv>
 23fe07e:	2800      	cmp	r0, #0
 23fe080:	d0f2      	beq.n	23fe068 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe086:	bf00      	nop
 23fe088:	1007aea4 	.word	0x1007aea4

023fe08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe090:	b085      	sub	sp, #20
    return stream_;
 23fe092:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe096:	4605      	mov	r5, r0
 23fe098:	460f      	mov	r7, r1
 23fe09a:	4690      	mov	r8, r2
 23fe09c:	461e      	mov	r6, r3
 23fe09e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe0a0:	f000 fe94 	bl	23fedcc <_Z16_fetch_usbserialv>
 23fe0a4:	4581      	cmp	r9, r0
 23fe0a6:	d105      	bne.n	23fe0b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe0a8:	4849      	ldr	r0, [pc, #292]	; (23fe1d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe0aa:	f000 f8e0 	bl	23fe26e <_ZN5spark12NetworkClass9listeningEv>
 23fe0ae:	2800      	cmp	r0, #0
 23fe0b0:	f040 808a 	bne.w	23fe1c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe0b4:	f04f 0900 	mov.w	r9, #0
 23fe0b8:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fe0ba:	4a46      	ldr	r2, [pc, #280]	; (23fe1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe0bc:	4668      	mov	r0, sp
 23fe0be:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fe0c2:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fe0c4:	f88d 9004 	strb.w	r9, [sp, #4]
 23fe0c8:	f7ff f82b 	bl	23fd122 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe0cc:	4649      	mov	r1, r9
 23fe0ce:	4640      	mov	r0, r8
 23fe0d0:	f7fe fbee 	bl	23fc8b0 <log_level_name>
 23fe0d4:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe0d6:	4940      	ldr	r1, [pc, #256]	; (23fe1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe0d8:	2201      	movs	r2, #1
 23fe0da:	4668      	mov	r0, sp
 23fe0dc:	f7ff f8b0 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe0e0:	4641      	mov	r1, r8
 23fe0e2:	f7ff f97c 	bl	23fd3de <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe0e6:	b13f      	cbz	r7, 23fe0f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fe0e8:	493c      	ldr	r1, [pc, #240]	; (23fe1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe0ea:	2201      	movs	r2, #1
 23fe0ec:	4668      	mov	r0, sp
 23fe0ee:	f7ff f8a7 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe0f2:	4639      	mov	r1, r7
 23fe0f4:	f7ff f973 	bl	23fd3de <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe0f8:	b13e      	cbz	r6, 23fe10a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fe0fa:	4939      	ldr	r1, [pc, #228]	; (23fe1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe0fc:	2201      	movs	r2, #1
 23fe0fe:	4668      	mov	r0, sp
 23fe100:	f7ff f89e 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe104:	4631      	mov	r1, r6
 23fe106:	f7ff f96a 	bl	23fd3de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe10a:	7923      	ldrb	r3, [r4, #4]
 23fe10c:	07df      	lsls	r7, r3, #31
 23fe10e:	d50e      	bpl.n	23fe12e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fe110:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe112:	212f      	movs	r1, #47	; 0x2f
 23fe114:	4630      	mov	r0, r6
 23fe116:	f001 fa82 	bl	23ff61e <strrchr>
    if (s1) {
 23fe11a:	b100      	cbz	r0, 23fe11e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fe11c:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe11e:	4931      	ldr	r1, [pc, #196]	; (23fe1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe120:	2201      	movs	r2, #1
 23fe122:	4668      	mov	r0, sp
 23fe124:	f7ff f88c 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe128:	4631      	mov	r1, r6
 23fe12a:	f7ff f958 	bl	23fd3de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe12e:	7923      	ldrb	r3, [r4, #4]
 23fe130:	079e      	lsls	r6, r3, #30
 23fe132:	d507      	bpl.n	23fe144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fe134:	492c      	ldr	r1, [pc, #176]	; (23fe1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe136:	2202      	movs	r2, #2
 23fe138:	4668      	mov	r0, sp
 23fe13a:	f7ff f881 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe13e:	68e1      	ldr	r1, [r4, #12]
 23fe140:	f7fe fffc 	bl	23fd13c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe144:	7923      	ldrb	r3, [r4, #4]
 23fe146:	0758      	lsls	r0, r3, #29
 23fe148:	d514      	bpl.n	23fe174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe14a:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe14c:	4633      	mov	r3, r6
 23fe14e:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe150:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe154:	b12a      	cbz	r2, 23fe162 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fe156:	2a20      	cmp	r2, #32
 23fe158:	d101      	bne.n	23fe15e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fe15a:	461e      	mov	r6, r3
 23fe15c:	e7f7      	b.n	23fe14e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fe15e:	2a28      	cmp	r2, #40	; 0x28
 23fe160:	d1f5      	bne.n	23fe14e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fe162:	2202      	movs	r2, #2
 23fe164:	4921      	ldr	r1, [pc, #132]	; (23fe1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe166:	4668      	mov	r0, sp
 23fe168:	f7ff f86a 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe16c:	4631      	mov	r1, r6
 23fe16e:	1bba      	subs	r2, r7, r6
 23fe170:	f7ff f876 	bl	23fd260 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe174:	7923      	ldrb	r3, [r4, #4]
 23fe176:	0719      	lsls	r1, r3, #28
 23fe178:	d507      	bpl.n	23fe18a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fe17a:	491d      	ldr	r1, [pc, #116]	; (23fe1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe17c:	2201      	movs	r2, #1
 23fe17e:	4668      	mov	r0, sp
 23fe180:	f7ff f85e 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe184:	6961      	ldr	r1, [r4, #20]
 23fe186:	f7fe ffeb 	bl	23fd160 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe18a:	7923      	ldrb	r3, [r4, #4]
 23fe18c:	06da      	lsls	r2, r3, #27
 23fe18e:	d507      	bpl.n	23fe1a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe190:	4918      	ldr	r1, [pc, #96]	; (23fe1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe192:	2204      	movs	r2, #4
 23fe194:	4668      	mov	r0, sp
 23fe196:	f7ff f853 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe19a:	69a1      	ldr	r1, [r4, #24]
 23fe19c:	f7fe ffce 	bl	23fd13c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe1a0:	7923      	ldrb	r3, [r4, #4]
 23fe1a2:	069b      	lsls	r3, r3, #26
 23fe1a4:	d507      	bpl.n	23fe1b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe1a6:	4914      	ldr	r1, [pc, #80]	; (23fe1f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe1a8:	2206      	movs	r2, #6
 23fe1aa:	4668      	mov	r0, sp
 23fe1ac:	f7ff f848 	bl	23fd240 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe1b0:	69e1      	ldr	r1, [r4, #28]
 23fe1b2:	f7ff f914 	bl	23fd3de <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe1b6:	4668      	mov	r0, sp
 23fe1b8:	f7fe ff9d 	bl	23fd0f6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe1bc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe1be:	2202      	movs	r2, #2
 23fe1c0:	6803      	ldr	r3, [r0, #0]
 23fe1c2:	490e      	ldr	r1, [pc, #56]	; (23fe1fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe1c4:	68db      	ldr	r3, [r3, #12]
 23fe1c6:	4798      	blx	r3
}
 23fe1c8:	b005      	add	sp, #20
 23fe1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe1ce:	bf00      	nop
 23fe1d0:	1007aea4 	.word	0x1007aea4
 23fe1d4:	023ffb5c 	.word	0x023ffb5c
 23fe1d8:	023ffaeb 	.word	0x023ffaeb
 23fe1dc:	023ff979 	.word	0x023ff979
 23fe1e0:	023ffecb 	.word	0x023ffecb
 23fe1e4:	023ffb3c 	.word	0x023ffb3c
 23fe1e8:	023ffb3e 	.word	0x023ffb3e
 23fe1ec:	023ffb41 	.word	0x023ffb41
 23fe1f0:	023ffb44 	.word	0x023ffb44
 23fe1f4:	023ffb46 	.word	0x023ffb46
 23fe1f8:	023ffb4b 	.word	0x023ffb4b
 23fe1fc:	023ffb39 	.word	0x023ffb39

023fe200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe200:	2300      	movs	r3, #0
 23fe202:	6840      	ldr	r0, [r0, #4]
 23fe204:	461a      	mov	r2, r3
 23fe206:	f7fe bbd1 	b.w	23fc9ac <network_connect>

023fe20a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe20a:	2200      	movs	r2, #0
 23fe20c:	2102      	movs	r1, #2
 23fe20e:	6840      	ldr	r0, [r0, #4]
 23fe210:	f7fe bbe8 	b.w	23fc9e4 <network_disconnect>

023fe214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe214:	2200      	movs	r2, #0
 23fe216:	6840      	ldr	r0, [r0, #4]
 23fe218:	4611      	mov	r1, r2
 23fe21a:	f7fe bbd5 	b.w	23fc9c8 <network_connecting>

023fe21e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe21e:	2200      	movs	r2, #0
 23fe220:	6840      	ldr	r0, [r0, #4]
 23fe222:	4611      	mov	r1, r2
 23fe224:	f7fe bbec 	b.w	23fca00 <network_ready>

023fe228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe228:	2300      	movs	r3, #0
 23fe22a:	6840      	ldr	r0, [r0, #4]
 23fe22c:	461a      	mov	r2, r3
 23fe22e:	4619      	mov	r1, r3
 23fe230:	f7fe bbf4 	b.w	23fca1c <network_on>

023fe234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe234:	2300      	movs	r3, #0
 23fe236:	6840      	ldr	r0, [r0, #4]
 23fe238:	461a      	mov	r2, r3
 23fe23a:	4619      	mov	r1, r3
 23fe23c:	f7fe bbfc 	b.w	23fca38 <network_off>

023fe240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe240:	2100      	movs	r1, #0
 23fe242:	6840      	ldr	r0, [r0, #4]
 23fe244:	f7fe bc3e 	b.w	23fcac4 <network_is_on>

023fe248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe248:	2100      	movs	r1, #0
 23fe24a:	6840      	ldr	r0, [r0, #4]
 23fe24c:	f7fe bc48 	b.w	23fcae0 <network_is_off>

023fe250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe250:	2200      	movs	r2, #0
 23fe252:	6840      	ldr	r0, [r0, #4]
 23fe254:	f081 0101 	eor.w	r1, r1, #1
 23fe258:	f7fe bbfc 	b.w	23fca54 <network_listen>

023fe25c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe25c:	2200      	movs	r2, #0
 23fe25e:	6840      	ldr	r0, [r0, #4]
 23fe260:	f7fe bc14 	b.w	23fca8c <network_set_listen_timeout>

023fe264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe264:	2200      	movs	r2, #0
 23fe266:	6840      	ldr	r0, [r0, #4]
 23fe268:	4611      	mov	r1, r2
 23fe26a:	f7fe bc1d 	b.w	23fcaa8 <network_get_listen_timeout>

023fe26e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe26e:	2200      	movs	r2, #0
 23fe270:	6840      	ldr	r0, [r0, #4]
 23fe272:	4611      	mov	r1, r2
 23fe274:	f7fe bbfc 	b.w	23fca70 <network_listening>

023fe278 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fe278:	2100      	movs	r1, #0
 23fe27a:	6840      	ldr	r0, [r0, #4]
 23fe27c:	f7fe bc4c 	b.w	23fcb18 <network_is_preferred>

023fe280 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe284:	b095      	sub	sp, #84	; 0x54
 23fe286:	4614      	mov	r4, r2
 23fe288:	460d      	mov	r5, r1
 23fe28a:	4607      	mov	r7, r0
    IPAddress addr;
 23fe28c:	f7fe fdcc 	bl	23fce28 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe290:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe292:	221c      	movs	r2, #28
 23fe294:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe296:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe298:	f001 f957 	bl	23ff54a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe29c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe29e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe2a0:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe2a2:	2100      	movs	r1, #0
 23fe2a4:	466b      	mov	r3, sp
 23fe2a6:	aa0c      	add	r2, sp, #48	; 0x30
 23fe2a8:	f7fe f95e 	bl	23fc568 <netdb_getaddrinfo>
    if (!r) {
 23fe2ac:	4604      	mov	r4, r0
 23fe2ae:	2800      	cmp	r0, #0
 23fe2b0:	d14b      	bne.n	23fe34a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe2b2:	4602      	mov	r2, r0
 23fe2b4:	2101      	movs	r1, #1
 23fe2b6:	6868      	ldr	r0, [r5, #4]
 23fe2b8:	f7fe fba2 	bl	23fca00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe2be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2c0:	4622      	mov	r2, r4
 23fe2c2:	6868      	ldr	r0, [r5, #4]
 23fe2c4:	f7fe fb9c 	bl	23fca00 <network_ready>
        bool ok = false;
 23fe2c8:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2ca:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe2cc:	9e00      	ldr	r6, [sp, #0]
 23fe2ce:	2e00      	cmp	r6, #0
 23fe2d0:	d03b      	beq.n	23fe34a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe2d2:	2900      	cmp	r1, #0
 23fe2d4:	d139      	bne.n	23fe34a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe2d6:	6873      	ldr	r3, [r6, #4]
 23fe2d8:	2b02      	cmp	r3, #2
 23fe2da:	d003      	beq.n	23fe2e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe2dc:	2b0a      	cmp	r3, #10
 23fe2de:	d011      	beq.n	23fe304 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe2e0:	69f6      	ldr	r6, [r6, #28]
 23fe2e2:	e7f4      	b.n	23fe2ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe2e4:	f1b8 0f00 	cmp.w	r8, #0
 23fe2e8:	d0fa      	beq.n	23fe2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe2ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe2ec:	a806      	add	r0, sp, #24
 23fe2ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe2f0:	1d3c      	adds	r4, r7, #4
 23fe2f2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe2f4:	f7fe fddc 	bl	23fceb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe2fc:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe2fe:	4641      	mov	r1, r8
 23fe300:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe302:	e7ed      	b.n	23fe2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe304:	f1b9 0f00 	cmp.w	r9, #0
 23fe308:	d0ea      	beq.n	23fe2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe30a:	2210      	movs	r2, #16
 23fe30c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe30e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe310:	f001 f91b 	bl	23ff54a <memset>
                    a.v = 6;
 23fe314:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe316:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe318:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe31c:	f104 0308 	add.w	r3, r4, #8
 23fe320:	3418      	adds	r4, #24
 23fe322:	462a      	mov	r2, r5
 23fe324:	6818      	ldr	r0, [r3, #0]
 23fe326:	6859      	ldr	r1, [r3, #4]
 23fe328:	3308      	adds	r3, #8
 23fe32a:	c203      	stmia	r2!, {r0, r1}
 23fe32c:	42a3      	cmp	r3, r4
 23fe32e:	4615      	mov	r5, r2
 23fe330:	d1f7      	bne.n	23fe322 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe332:	a901      	add	r1, sp, #4
 23fe334:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe336:	1d3c      	adds	r4, r7, #4
 23fe338:	ad07      	add	r5, sp, #28
 23fe33a:	f7fe fd83 	bl	23fce44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe33e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe342:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe344:	4649      	mov	r1, r9
 23fe346:	7023      	strb	r3, [r4, #0]
                    break;
 23fe348:	e7ca      	b.n	23fe2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe34a:	9800      	ldr	r0, [sp, #0]
 23fe34c:	f7fe f8fe 	bl	23fc54c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe350:	4638      	mov	r0, r7
 23fe352:	b015      	add	sp, #84	; 0x54
 23fe354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe358 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fe358:	3803      	subs	r0, #3
 23fe35a:	2802      	cmp	r0, #2
 23fe35c:	bf9a      	itte	ls
 23fe35e:	4b02      	ldrls	r3, [pc, #8]	; (23fe368 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fe360:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fe364:	4801      	ldrhi	r0, [pc, #4]	; (23fe36c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fe366:	4770      	bx	lr
 23fe368:	023ffbcc 	.word	0x023ffbcc
 23fe36c:	1007aea4 	.word	0x1007aea4

023fe370 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fe370:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fe372:	2200      	movs	r2, #0
 23fe374:	6840      	ldr	r0, [r0, #4]
 23fe376:	f7fe fbc1 	bl	23fcafc <network_prefer>
}
 23fe37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fe37e:	f7ff bfeb 	b.w	23fe358 <_ZN5spark12NetworkClass4fromEm>
	...

023fe384 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe384:	4b02      	ldr	r3, [pc, #8]	; (23fe390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe386:	4a03      	ldr	r2, [pc, #12]	; (23fe394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe388:	601a      	str	r2, [r3, #0]
 23fe38a:	2200      	movs	r2, #0
 23fe38c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe38e:	4770      	bx	lr
 23fe390:	1007aea4 	.word	0x1007aea4
 23fe394:	023ffbe0 	.word	0x023ffbe0

023fe398 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe39a:	4606      	mov	r6, r0
 23fe39c:	460d      	mov	r5, r1
  size_t n = 0;
 23fe39e:	2400      	movs	r4, #0
 23fe3a0:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe3a2:	42bd      	cmp	r5, r7
 23fe3a4:	d00c      	beq.n	23fe3c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe3a6:	6833      	ldr	r3, [r6, #0]
 23fe3a8:	4630      	mov	r0, r6
 23fe3aa:	689b      	ldr	r3, [r3, #8]
 23fe3ac:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe3b0:	4798      	blx	r3
     if (chunk>=0)
 23fe3b2:	1e03      	subs	r3, r0, #0
 23fe3b4:	db01      	blt.n	23fe3ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe3b6:	441c      	add	r4, r3
  while (size--) {
 23fe3b8:	e7f3      	b.n	23fe3a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe3ba:	2c00      	cmp	r4, #0
 23fe3bc:	bf08      	it	eq
 23fe3be:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe3c0:	4620      	mov	r0, r4
 23fe3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe3c4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe3c4:	b513      	push	{r0, r1, r4, lr}
 23fe3c6:	4604      	mov	r4, r0
    }
 23fe3c8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe3ca:	b159      	cbz	r1, 23fe3e4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe3cc:	9101      	str	r1, [sp, #4]
 23fe3ce:	f7fd fc6d 	bl	23fbcac <strlen>
 23fe3d2:	4602      	mov	r2, r0
 23fe3d4:	4620      	mov	r0, r4
 23fe3d6:	6823      	ldr	r3, [r4, #0]
 23fe3d8:	9901      	ldr	r1, [sp, #4]
 23fe3da:	68db      	ldr	r3, [r3, #12]
    }
 23fe3dc:	b002      	add	sp, #8
 23fe3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe3e2:	4718      	bx	r3
    }
 23fe3e4:	b002      	add	sp, #8
 23fe3e6:	bd10      	pop	{r4, pc}

023fe3e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe3e8:	6803      	ldr	r3, [r0, #0]
 23fe3ea:	689b      	ldr	r3, [r3, #8]
 23fe3ec:	4718      	bx	r3

023fe3ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fe3ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fe3f0:	210d      	movs	r1, #13
{
 23fe3f2:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fe3f4:	f7ff fff8 	bl	23fe3e8 <_ZN5Print5printEc>
  n += print('\n');
 23fe3f8:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fe3fa:	4604      	mov	r4, r0
  n += print('\n');
 23fe3fc:	4628      	mov	r0, r5
 23fe3fe:	f7ff fff3 	bl	23fe3e8 <_ZN5Print5printEc>
  return n;
}
 23fe402:	4420      	add	r0, r4
 23fe404:	bd38      	pop	{r3, r4, r5, pc}

023fe406 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe406:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe408:	2a01      	cmp	r2, #1
 23fe40a:	bf98      	it	ls
 23fe40c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe40e:	b530      	push	{r4, r5, lr}
 23fe410:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe412:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe416:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe418:	460d      	mov	r5, r1
 23fe41a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe41e:	fb01 5312 	mls	r3, r1, r2, r5
 23fe422:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe426:	2b09      	cmp	r3, #9
 23fe428:	bf94      	ite	ls
 23fe42a:	3330      	addls	r3, #48	; 0x30
 23fe42c:	3337      	addhi	r3, #55	; 0x37
 23fe42e:	b2db      	uxtb	r3, r3
  } while(n);
 23fe430:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe432:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe436:	d9ef      	bls.n	23fe418 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe438:	4621      	mov	r1, r4
 23fe43a:	f7ff ffc3 	bl	23fe3c4 <_ZN5Print5writeEPKc>
}
 23fe43e:	b00b      	add	sp, #44	; 0x2c
 23fe440:	bd30      	pop	{r4, r5, pc}

023fe442 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fe442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe446:	b086      	sub	sp, #24
 23fe448:	af00      	add	r7, sp, #0
 23fe44a:	4605      	mov	r5, r0
 23fe44c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe44e:	1d38      	adds	r0, r7, #4
 23fe450:	2114      	movs	r1, #20
{
 23fe452:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fe454:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe456:	f7fe fb97 	bl	23fcb88 <vsnprintf>

    if (n<bufsize)
 23fe45a:	2813      	cmp	r0, #19
 23fe45c:	d80e      	bhi.n	23fe47c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fe45e:	4628      	mov	r0, r5
 23fe460:	1d39      	adds	r1, r7, #4
 23fe462:	f7ff ffaf 	bl	23fe3c4 <_ZN5Print5writeEPKc>
 23fe466:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fe468:	b11e      	cbz	r6, 23fe472 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fe46a:	4628      	mov	r0, r5
 23fe46c:	f7ff ffbf 	bl	23fe3ee <_ZN5Print7printlnEv>
 23fe470:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fe472:	4620      	mov	r0, r4
 23fe474:	3718      	adds	r7, #24
 23fe476:	46bd      	mov	sp, r7
 23fe478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fe47c:	f100 0308 	add.w	r3, r0, #8
 23fe480:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fe484:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fe486:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fe48a:	4622      	mov	r2, r4
 23fe48c:	1c41      	adds	r1, r0, #1
 23fe48e:	683b      	ldr	r3, [r7, #0]
 23fe490:	4668      	mov	r0, sp
 23fe492:	f7fe fb79 	bl	23fcb88 <vsnprintf>
  return write(str);
 23fe496:	4669      	mov	r1, sp
 23fe498:	4628      	mov	r0, r5
 23fe49a:	f7ff ff93 	bl	23fe3c4 <_ZN5Print5writeEPKc>
 23fe49e:	4604      	mov	r4, r0
 23fe4a0:	46c5      	mov	sp, r8
 23fe4a2:	e7e1      	b.n	23fe468 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fe4a4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe4a4:	2200      	movs	r2, #0
 23fe4a6:	4b01      	ldr	r3, [pc, #4]	; (23fe4ac <_GLOBAL__sub_I_RGB+0x8>)
 23fe4a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe4aa:	4770      	bx	lr
 23fe4ac:	1007aeac 	.word	0x1007aeac

023fe4b0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe4b0:	b510      	push	{r4, lr}
 23fe4b2:	4604      	mov	r4, r0
 23fe4b4:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe4b6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe4b8:	f7fe f8b8 	bl	23fc62c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe4bc:	2300      	movs	r3, #0
}
 23fe4be:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe4c0:	6063      	str	r3, [r4, #4]
}
 23fe4c2:	bd10      	pop	{r4, pc}

023fe4c4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fe4c4:	b510      	push	{r4, lr}
 23fe4c6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fe4c8:	f7fd ff52 	bl	23fc370 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fe4cc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fe4ce:	6823      	ldr	r3, [r4, #0]
 23fe4d0:	4620      	mov	r0, r4
 23fe4d2:	695b      	ldr	r3, [r3, #20]
 23fe4d4:	4798      	blx	r3
    if (c >= 0) return c;
 23fe4d6:	2800      	cmp	r0, #0
 23fe4d8:	da08      	bge.n	23fe4ec <_ZN6Stream9timedReadEv+0x28>
 23fe4da:	f7fd ff49 	bl	23fc370 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fe4de:	68e3      	ldr	r3, [r4, #12]
 23fe4e0:	1ac0      	subs	r0, r0, r3
 23fe4e2:	68a3      	ldr	r3, [r4, #8]
 23fe4e4:	4298      	cmp	r0, r3
 23fe4e6:	d3f2      	bcc.n	23fe4ce <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fe4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23fe4ec:	bd10      	pop	{r4, pc}

023fe4ee <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fe4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe4f2:	4607      	mov	r7, r0
 23fe4f4:	460c      	mov	r4, r1
 23fe4f6:	460d      	mov	r5, r1
 23fe4f8:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fe4fa:	42b5      	cmp	r5, r6
 23fe4fc:	eba5 0804 	sub.w	r8, r5, r4
 23fe500:	d007      	beq.n	23fe512 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fe502:	4638      	mov	r0, r7
 23fe504:	f7ff ffde 	bl	23fe4c4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fe508:	1e03      	subs	r3, r0, #0
 23fe50a:	db02      	blt.n	23fe512 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fe50c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fe510:	e7f3      	b.n	23fe4fa <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fe512:	4640      	mov	r0, r8
 23fe514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe518 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fe518:	b510      	push	{r4, lr}
 23fe51a:	4604      	mov	r4, r0
{
    free(buffer);
 23fe51c:	6800      	ldr	r0, [r0, #0]
 23fe51e:	f7fe fb17 	bl	23fcb50 <free>
}
 23fe522:	4620      	mov	r0, r4
 23fe524:	bd10      	pop	{r4, pc}

023fe526 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fe526:	b510      	push	{r4, lr}
 23fe528:	4604      	mov	r4, r0
    if (buffer) {
 23fe52a:	6800      	ldr	r0, [r0, #0]
 23fe52c:	b108      	cbz	r0, 23fe532 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fe52e:	f7fe fb0f 	bl	23fcb50 <free>
    }
    buffer = nullptr;
 23fe532:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fe534:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fe538:	6023      	str	r3, [r4, #0]
}
 23fe53a:	bd10      	pop	{r4, pc}

023fe53c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe53c:	b538      	push	{r3, r4, r5, lr}
 23fe53e:	4604      	mov	r4, r0
 23fe540:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe542:	6800      	ldr	r0, [r0, #0]
 23fe544:	3101      	adds	r1, #1
 23fe546:	f7fe fb11 	bl	23fcb6c <realloc>
    if (newbuffer) {
 23fe54a:	b110      	cbz	r0, 23fe552 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fe54c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fe550:	2001      	movs	r0, #1
    }
    return 0;
}
 23fe552:	bd38      	pop	{r3, r4, r5, pc}

023fe554 <_ZN6String7reserveEj>:
{
 23fe554:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fe556:	6803      	ldr	r3, [r0, #0]
{
 23fe558:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fe55a:	b123      	cbz	r3, 23fe566 <_ZN6String7reserveEj+0x12>
 23fe55c:	6843      	ldr	r3, [r0, #4]
 23fe55e:	428b      	cmp	r3, r1
 23fe560:	d301      	bcc.n	23fe566 <_ZN6String7reserveEj+0x12>
 23fe562:	2001      	movs	r0, #1
}
 23fe564:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fe566:	4620      	mov	r0, r4
 23fe568:	f7ff ffe8 	bl	23fe53c <_ZN6String12changeBufferEj>
 23fe56c:	2800      	cmp	r0, #0
 23fe56e:	d0f9      	beq.n	23fe564 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fe570:	68a3      	ldr	r3, [r4, #8]
 23fe572:	2b00      	cmp	r3, #0
 23fe574:	d1f5      	bne.n	23fe562 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fe576:	6822      	ldr	r2, [r4, #0]
 23fe578:	7013      	strb	r3, [r2, #0]
 23fe57a:	e7f2      	b.n	23fe562 <_ZN6String7reserveEj+0xe>

023fe57c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe57e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fe580:	4611      	mov	r1, r2
 23fe582:	9201      	str	r2, [sp, #4]
{
 23fe584:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fe586:	f7ff ffe5 	bl	23fe554 <_ZN6String7reserveEj>
 23fe58a:	9a01      	ldr	r2, [sp, #4]
 23fe58c:	b928      	cbnz	r0, 23fe59a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fe58e:	4620      	mov	r0, r4
 23fe590:	f7ff ffc9 	bl	23fe526 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fe594:	4620      	mov	r0, r4
 23fe596:	b003      	add	sp, #12
 23fe598:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fe59a:	4629      	mov	r1, r5
    len = length;
 23fe59c:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fe59e:	6820      	ldr	r0, [r4, #0]
 23fe5a0:	f000 ffac 	bl	23ff4fc <memcpy>
    buffer[len] = 0;
 23fe5a4:	2100      	movs	r1, #0
 23fe5a6:	6822      	ldr	r2, [r4, #0]
 23fe5a8:	68a3      	ldr	r3, [r4, #8]
 23fe5aa:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fe5ac:	e7f2      	b.n	23fe594 <_ZN6String4copyEPKcj+0x18>

023fe5ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe5ae:	b538      	push	{r3, r4, r5, lr}
 23fe5b0:	4605      	mov	r5, r0
    if (buffer) {
 23fe5b2:	6800      	ldr	r0, [r0, #0]
{
 23fe5b4:	460c      	mov	r4, r1
    if (buffer) {
 23fe5b6:	b170      	cbz	r0, 23fe5d6 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fe5b8:	686a      	ldr	r2, [r5, #4]
 23fe5ba:	688b      	ldr	r3, [r1, #8]
 23fe5bc:	429a      	cmp	r2, r3
 23fe5be:	d308      	bcc.n	23fe5d2 <_ZN6String4moveERS_+0x24>
 23fe5c0:	6809      	ldr	r1, [r1, #0]
 23fe5c2:	b131      	cbz	r1, 23fe5d2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fe5c4:	f001 f80f 	bl	23ff5e6 <strcpy>
            len = rhs.len;
 23fe5c8:	68a3      	ldr	r3, [r4, #8]
 23fe5ca:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fe5cc:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fe5ce:	60a3      	str	r3, [r4, #8]
}
 23fe5d0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fe5d2:	f7fe fabd 	bl	23fcb50 <free>
    buffer = rhs.buffer;
 23fe5d6:	6823      	ldr	r3, [r4, #0]
 23fe5d8:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fe5da:	6863      	ldr	r3, [r4, #4]
 23fe5dc:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fe5de:	68a3      	ldr	r3, [r4, #8]
 23fe5e0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fe5e2:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fe5e4:	e9c4 3300 	strd	r3, r3, [r4]
 23fe5e8:	e7f1      	b.n	23fe5ce <_ZN6String4moveERS_+0x20>

023fe5ea <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fe5ea:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe5ec:	b510      	push	{r4, lr}
 23fe5ee:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe5f0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe5f4:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe5f6:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fe5f8:	f7ff ffd9 	bl	23fe5ae <_ZN6String4moveERS_>
}
 23fe5fc:	4620      	mov	r0, r4
 23fe5fe:	bd10      	pop	{r4, pc}

023fe600 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fe600:	4288      	cmp	r0, r1
{
 23fe602:	b510      	push	{r4, lr}
 23fe604:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fe606:	d005      	beq.n	23fe614 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fe608:	680b      	ldr	r3, [r1, #0]
 23fe60a:	b12b      	cbz	r3, 23fe618 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fe60c:	688a      	ldr	r2, [r1, #8]
 23fe60e:	4619      	mov	r1, r3
 23fe610:	f7ff ffb4 	bl	23fe57c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fe614:	4620      	mov	r0, r4
 23fe616:	bd10      	pop	{r4, pc}
        invalidate();
 23fe618:	f7ff ff85 	bl	23fe526 <_ZN6String10invalidateEv>
 23fe61c:	e7fa      	b.n	23fe614 <_ZN6StringaSERKS_+0x14>

023fe61e <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fe61e:	2300      	movs	r3, #0
String::String(const String &value)
 23fe620:	b510      	push	{r4, lr}
 23fe622:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe624:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe628:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe62a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fe62c:	f7ff ffe8 	bl	23fe600 <_ZN6StringaSERKS_>
}
 23fe630:	4620      	mov	r0, r4
 23fe632:	bd10      	pop	{r4, pc}

023fe634 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe634:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe636:	2000      	movs	r0, #0
 23fe638:	4b04      	ldr	r3, [pc, #16]	; (23fe64c <_GLOBAL__sub_I_System+0x18>)
 23fe63a:	601a      	str	r2, [r3, #0]
 23fe63c:	4b04      	ldr	r3, [pc, #16]	; (23fe650 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe63e:	4a05      	ldr	r2, [pc, #20]	; (23fe654 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe640:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe644:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe646:	f7fe b94f 	b.w	23fc8e8 <set_system_mode>
 23fe64a:	bf00      	nop
 23fe64c:	1007aec8 	.word	0x1007aec8
 23fe650:	1007aebc 	.word	0x1007aebc
 23fe654:	ffff0000 	.word	0xffff0000

023fe658 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fe658:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe65a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fe65c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe660:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe662:	2201      	movs	r2, #1
 23fe664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fe668:	f10d 0107 	add.w	r1, sp, #7
 23fe66c:	47a0      	blx	r4
}
 23fe66e:	b002      	add	sp, #8
 23fe670:	bd10      	pop	{r4, pc}

023fe672 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fe672:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe674:	6803      	ldr	r3, [r0, #0]
 23fe676:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fe67c:	46a4      	mov	ip, r4
}
 23fe67e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe682:	4760      	bx	ip

023fe684 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe684:	b513      	push	{r0, r1, r4, lr}
 23fe686:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fe688:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe68a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fe68e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fe690:	f10d 0107 	add.w	r1, sp, #7
 23fe694:	2201      	movs	r2, #1
 23fe696:	47a0      	blx	r4
}
 23fe698:	b002      	add	sp, #8
 23fe69a:	bd10      	pop	{r4, pc}

023fe69c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fe69c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe69e:	6943      	ldr	r3, [r0, #20]
 23fe6a0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe6a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe6a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe6aa:	429a      	cmp	r2, r3
 23fe6ac:	d008      	beq.n	23fe6c0 <_ZN9TCPClient4readEv+0x24>
 23fe6ae:	6963      	ldr	r3, [r4, #20]
 23fe6b0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe6b4:	1c51      	adds	r1, r2, #1
 23fe6b6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fe6ba:	4413      	add	r3, r2
 23fe6bc:	7918      	ldrb	r0, [r3, #4]
}
 23fe6be:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe6c0:	6803      	ldr	r3, [r0, #0]
 23fe6c2:	691b      	ldr	r3, [r3, #16]
 23fe6c4:	4798      	blx	r3
 23fe6c6:	2800      	cmp	r0, #0
 23fe6c8:	d1f1      	bne.n	23fe6ae <_ZN9TCPClient4readEv+0x12>
 23fe6ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe6ce:	e7f6      	b.n	23fe6be <_ZN9TCPClient4readEv+0x22>

023fe6d0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fe6d0:	4770      	bx	lr

023fe6d2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fe6d2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fe6d4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fe6d6:	43c0      	mvns	r0, r0
 23fe6d8:	0fc0      	lsrs	r0, r0, #31
 23fe6da:	4770      	bx	lr

023fe6dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe6dc:	4770      	bx	lr
	...

023fe6e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fe6e0:	4b06      	ldr	r3, [pc, #24]	; (23fe6fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fe6e2:	b510      	push	{r4, lr}
	    ||
 23fe6e4:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fe6e6:	f100 040c 	add.w	r4, r0, #12
 23fe6ea:	d005      	beq.n	23fe6f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fe6ec:	4608      	mov	r0, r1
 23fe6ee:	f000 fde5 	bl	23ff2bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fe6f2:	2800      	cmp	r0, #0
 23fe6f4:	bf08      	it	eq
 23fe6f6:	2400      	moveq	r4, #0
      }
 23fe6f8:	4620      	mov	r0, r4
 23fe6fa:	bd10      	pop	{r4, pc}
 23fe6fc:	023ffa4c 	.word	0x023ffa4c

023fe700 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe700:	b510      	push	{r4, lr}
 23fe702:	4604      	mov	r4, r0
 23fe704:	21ac      	movs	r1, #172	; 0xac
 23fe706:	f7fd fafa 	bl	23fbcfe <_ZdlPvj>
 23fe70a:	4620      	mov	r0, r4
 23fe70c:	bd10      	pop	{r4, pc}

023fe70e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fe70e:	21ac      	movs	r1, #172	; 0xac
 23fe710:	f7fd baf5 	b.w	23fbcfe <_ZdlPvj>

023fe714 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fe714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fe718:	f04f 0800 	mov.w	r8, #0
 23fe71c:	461c      	mov	r4, r3
 23fe71e:	b086      	sub	sp, #24
 23fe720:	f8c0 8004 	str.w	r8, [r0, #4]
 23fe724:	4605      	mov	r5, r0
 23fe726:	460e      	mov	r6, r1
 23fe728:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fe72a:	4641      	mov	r1, r8
 23fe72c:	2210      	movs	r2, #16
 23fe72e:	a802      	add	r0, sp, #8
 23fe730:	f000 ff0b 	bl	23ff54a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fe734:	1c63      	adds	r3, r4, #1
 23fe736:	d009      	beq.n	23fe74c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fe738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe73c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe740:	fb03 4412 	mls	r4, r3, r2, r4
 23fe744:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fe746:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe74a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fe74c:	2310      	movs	r3, #16
 23fe74e:	6968      	ldr	r0, [r5, #20]
 23fe750:	9300      	str	r3, [sp, #0]
 23fe752:	f241 0205 	movw	r2, #4101	; 0x1005
 23fe756:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe75a:	6800      	ldr	r0, [r0, #0]
 23fe75c:	ab02      	add	r3, sp, #8
 23fe75e:	f7fd ff11 	bl	23fc584 <sock_setsockopt>
    if (ret < 0) {
 23fe762:	2800      	cmp	r0, #0
 23fe764:	da07      	bge.n	23fe776 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fe766:	f7fe fa1d 	bl	23fcba4 <__errno>
 23fe76a:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fe76c:	2000      	movs	r0, #0
 23fe76e:	606b      	str	r3, [r5, #4]
}
 23fe770:	b006      	add	sp, #24
 23fe772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fe776:	6968      	ldr	r0, [r5, #20]
 23fe778:	2300      	movs	r3, #0
 23fe77a:	463a      	mov	r2, r7
 23fe77c:	4631      	mov	r1, r6
 23fe77e:	6800      	ldr	r0, [r0, #0]
 23fe780:	f7fd ff38 	bl	23fc5f4 <sock_send>
    if (ret < 0) {
 23fe784:	1e03      	subs	r3, r0, #0
 23fe786:	dbee      	blt.n	23fe766 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fe788:	4618      	mov	r0, r3
 23fe78a:	e7f1      	b.n	23fe770 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fe78c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fe78c:	b538      	push	{r3, r4, r5, lr}
 23fe78e:	4b0b      	ldr	r3, [pc, #44]	; (23fe7bc <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 23fe790:	6984      	ldr	r4, [r0, #24]
 23fe792:	4605      	mov	r5, r0
 23fe794:	6003      	str	r3, [r0, #0]
 23fe796:	b17c      	cbz	r4, 23fe7b8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fe798:	6863      	ldr	r3, [r4, #4]
 23fe79a:	3b01      	subs	r3, #1
 23fe79c:	6063      	str	r3, [r4, #4]
 23fe79e:	b95b      	cbnz	r3, 23fe7b8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 23fe7a0:	6823      	ldr	r3, [r4, #0]
 23fe7a2:	4620      	mov	r0, r4
 23fe7a4:	689b      	ldr	r3, [r3, #8]
 23fe7a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe7a8:	68a3      	ldr	r3, [r4, #8]
 23fe7aa:	3b01      	subs	r3, #1
 23fe7ac:	60a3      	str	r3, [r4, #8]
 23fe7ae:	b91b      	cbnz	r3, 23fe7b8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 23fe7b0:	6823      	ldr	r3, [r4, #0]
 23fe7b2:	4620      	mov	r0, r4
 23fe7b4:	68db      	ldr	r3, [r3, #12]
 23fe7b6:	4798      	blx	r3
 23fe7b8:	4628      	mov	r0, r5
 23fe7ba:	bd38      	pop	{r3, r4, r5, pc}
 23fe7bc:	023ffc58 	.word	0x023ffc58

023fe7c0 <_ZN9TCPClientD0Ev>:
 23fe7c0:	b510      	push	{r4, lr}
 23fe7c2:	4604      	mov	r4, r0
 23fe7c4:	f7ff ffe2 	bl	23fe78c <_ZN9TCPClientD1Ev>
 23fe7c8:	4620      	mov	r0, r4
 23fe7ca:	211c      	movs	r1, #28
 23fe7cc:	f7fd fa97 	bl	23fbcfe <_ZdlPvj>
 23fe7d0:	4620      	mov	r0, r4
 23fe7d2:	bd10      	pop	{r4, pc}

023fe7d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fe7d4:	b530      	push	{r4, r5, lr}
 23fe7d6:	4604      	mov	r4, r0
 23fe7d8:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fe7da:	4668      	mov	r0, sp
 23fe7dc:	f7fe fb68 	bl	23fceb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe7e0:	ad01      	add	r5, sp, #4
 23fe7e2:	3404      	adds	r4, #4
 23fe7e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe7e8:	682b      	ldr	r3, [r5, #0]
 23fe7ea:	7023      	strb	r3, [r4, #0]
    }
 23fe7ec:	b007      	add	sp, #28
 23fe7ee:	bd30      	pop	{r4, r5, pc}

023fe7f0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fe7f0:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fe7f2:	4604      	mov	r4, r0
 23fe7f4:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fe7f6:	694d      	ldr	r5, [r1, #20]
 23fe7f8:	4b04      	ldr	r3, [pc, #16]	; (23fe80c <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fe7fa:	358c      	adds	r5, #140	; 0x8c
 23fe7fc:	f844 3b04 	str.w	r3, [r4], #4
 23fe800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe804:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fe806:	4630      	mov	r0, r6
 23fe808:	7023      	strb	r3, [r4, #0]
 23fe80a:	bd70      	pop	{r4, r5, r6, pc}
 23fe80c:	023ffacc 	.word	0x023ffacc

023fe810 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe814:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fe816:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe818:	4698      	mov	r8, r3
    stop();
 23fe81a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe81c:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fe81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe820:	4606      	mov	r6, r0
 23fe822:	4617      	mov	r7, r2
    stop();
 23fe824:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe826:	4628      	mov	r0, r5
 23fe828:	466b      	mov	r3, sp
 23fe82a:	4622      	mov	r2, r4
 23fe82c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fe82e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe830:	f7fd fe9a 	bl	23fc568 <netdb_getaddrinfo>
 23fe834:	4605      	mov	r5, r0
 23fe836:	2800      	cmp	r0, #0
 23fe838:	d163      	bne.n	23fe902 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fe83a:	9b00      	ldr	r3, [sp, #0]
 23fe83c:	2b00      	cmp	r3, #0
 23fe83e:	d04b      	beq.n	23fe8d8 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe840:	695b      	ldr	r3, [r3, #20]
 23fe842:	2b00      	cmp	r3, #0
 23fe844:	d048      	beq.n	23fe8d8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fe846:	a806      	add	r0, sp, #24
 23fe848:	f7fe faee 	bl	23fce28 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fe84c:	9b00      	ldr	r3, [sp, #0]
 23fe84e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fe850:	7863      	ldrb	r3, [r4, #1]
 23fe852:	2b02      	cmp	r3, #2
 23fe854:	d104      	bne.n	23fe860 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fe856:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fe858:	a806      	add	r0, sp, #24
 23fe85a:	f7ff ffbb 	bl	23fe7d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fe85e:	e026      	b.n	23fe8ae <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fe860:	2b0a      	cmp	r3, #10
 23fe862:	d124      	bne.n	23fe8ae <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fe864:	2211      	movs	r2, #17
 23fe866:	4629      	mov	r1, r5
 23fe868:	a801      	add	r0, sp, #4
 23fe86a:	f000 fe6e 	bl	23ff54a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe86e:	68a3      	ldr	r3, [r4, #8]
 23fe870:	2b00      	cmp	r3, #0
 23fe872:	d038      	beq.n	23fe8e6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe874:	f104 0308 	add.w	r3, r4, #8
 23fe878:	f10d 0c04 	add.w	ip, sp, #4
 23fe87c:	3418      	adds	r4, #24
 23fe87e:	4662      	mov	r2, ip
 23fe880:	6818      	ldr	r0, [r3, #0]
 23fe882:	6859      	ldr	r1, [r3, #4]
 23fe884:	3308      	adds	r3, #8
 23fe886:	c203      	stmia	r2!, {r0, r1}
 23fe888:	42a3      	cmp	r3, r4
 23fe88a:	4694      	mov	ip, r2
 23fe88c:	d1f7      	bne.n	23fe87e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fe88e:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fe890:	a901      	add	r1, sp, #4
 23fe892:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fe894:	f88d 3014 	strb.w	r3, [sp, #20]
 23fe898:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fe89a:	f7fe fad3 	bl	23fce44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe89e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fe8a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe8a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe8a8:	f8dc 3000 	ldr.w	r3, [ip]
 23fe8ac:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23fe8ae:	a806      	add	r0, sp, #24
 23fe8b0:	f7fe fada 	bl	23fce68 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23fe8b4:	b180      	cbz	r0, 23fe8d8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23fe8b6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23fe8b8:	ac0d      	add	r4, sp, #52	; 0x34
 23fe8ba:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 23fe8be:	4b12      	ldr	r3, [pc, #72]	; (23fe908 <_ZN9TCPClient7connectEPKctm+0xf8>)
 23fe8c0:	ad07      	add	r5, sp, #28
 23fe8c2:	930c      	str	r3, [sp, #48]	; 0x30
 23fe8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe8c8:	682b      	ldr	r3, [r5, #0]
 23fe8ca:	463a      	mov	r2, r7
 23fe8cc:	7023      	strb	r3, [r4, #0]
 23fe8ce:	4630      	mov	r0, r6
 23fe8d0:	4643      	mov	r3, r8
 23fe8d2:	a90c      	add	r1, sp, #48	; 0x30
 23fe8d4:	47c8      	blx	r9
 23fe8d6:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23fe8d8:	9800      	ldr	r0, [sp, #0]
 23fe8da:	f7fd fe37 	bl	23fc54c <netdb_freeaddrinfo>
}
 23fe8de:	4628      	mov	r0, r5
 23fe8e0:	b013      	add	sp, #76	; 0x4c
 23fe8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe8e6:	68e3      	ldr	r3, [r4, #12]
 23fe8e8:	2b00      	cmp	r3, #0
 23fe8ea:	d1c3      	bne.n	23fe874 <_ZN9TCPClient7connectEPKctm+0x64>
 23fe8ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fe8f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23fe8f4:	f7fd fe0e 	bl	23fc514 <inet_htonl>
 23fe8f8:	4581      	cmp	r9, r0
 23fe8fa:	d1bb      	bne.n	23fe874 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23fe8fc:	f104 0114 	add.w	r1, r4, #20
 23fe900:	e7aa      	b.n	23fe858 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe902:	4625      	mov	r5, r4
 23fe904:	e7e8      	b.n	23fe8d8 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe906:	bf00      	nop
 23fe908:	023ffacc 	.word	0x023ffacc

023fe90c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23fe90c:	b538      	push	{r3, r4, r5, lr}
 23fe90e:	6943      	ldr	r3, [r0, #20]
 23fe910:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23fe912:	681a      	ldr	r2, [r3, #0]
 23fe914:	2a00      	cmp	r2, #0
 23fe916:	da10      	bge.n	23fe93a <_ZN9TCPClient9connectedEv+0x2e>
 23fe918:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe91c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe920:	429a      	cmp	r2, r3
 23fe922:	d10a      	bne.n	23fe93a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23fe924:	6803      	ldr	r3, [r0, #0]
 23fe926:	691b      	ldr	r3, [r3, #16]
 23fe928:	4798      	blx	r3
        if (!rv) {
 23fe92a:	4604      	mov	r4, r0
 23fe92c:	b928      	cbnz	r0, 23fe93a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23fe92e:	682b      	ldr	r3, [r5, #0]
 23fe930:	4628      	mov	r0, r5
 23fe932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe934:	4798      	blx	r3
        rv = available();
 23fe936:	4620      	mov	r0, r4
}
 23fe938:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23fe93a:	2001      	movs	r0, #1
 23fe93c:	e7fc      	b.n	23fe938 <_ZN9TCPClient9connectedEv+0x2c>

023fe93e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23fe93e:	b510      	push	{r4, lr}
 23fe940:	6943      	ldr	r3, [r0, #20]
 23fe942:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe944:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe948:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe94c:	429a      	cmp	r2, r3
 23fe94e:	d005      	beq.n	23fe95c <_ZN9TCPClient4peekEv+0x1e>
 23fe950:	6963      	ldr	r3, [r4, #20]
 23fe952:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe956:	4413      	add	r3, r2
 23fe958:	7918      	ldrb	r0, [r3, #4]
}
 23fe95a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe95c:	6803      	ldr	r3, [r0, #0]
 23fe95e:	691b      	ldr	r3, [r3, #16]
 23fe960:	4798      	blx	r3
 23fe962:	2800      	cmp	r0, #0
 23fe964:	d1f4      	bne.n	23fe950 <_ZN9TCPClient4peekEv+0x12>
 23fe966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe96a:	e7f6      	b.n	23fe95a <_ZN9TCPClient4peekEv+0x1c>

023fe96c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe96e:	6943      	ldr	r3, [r0, #20]
 23fe970:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23fe972:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe976:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe97a:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23fe97c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe97e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23fe980:	d016      	beq.n	23fe9b0 <_ZN9TCPClient4readEPhj+0x44>
 23fe982:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe984:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23fe986:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23fe98a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23fe98e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23fe990:	42bc      	cmp	r4, r7
 23fe992:	bf28      	it	cs
 23fe994:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe996:	3304      	adds	r3, #4
 23fe998:	4622      	mov	r2, r4
 23fe99a:	4419      	add	r1, r3
 23fe99c:	f000 fdae 	bl	23ff4fc <memcpy>
 23fe9a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23fe9a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23fe9a6:	4423      	add	r3, r4
 23fe9a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fe9ac:	4620      	mov	r0, r4
 23fe9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fe9b0:	6803      	ldr	r3, [r0, #0]
 23fe9b2:	691b      	ldr	r3, [r3, #16]
 23fe9b4:	4798      	blx	r3
 23fe9b6:	2800      	cmp	r0, #0
 23fe9b8:	d1e3      	bne.n	23fe982 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fe9ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23fe9be:	e7f5      	b.n	23fe9ac <_ZN9TCPClient4readEPhj+0x40>

023fe9c0 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fe9c0:	2300      	movs	r3, #0
 23fe9c2:	6942      	ldr	r2, [r0, #20]
 23fe9c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fe9c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fe9ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fe9ce:	4770      	bx	lr

023fe9d0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe9d2:	460c      	mov	r4, r1
 23fe9d4:	461f      	mov	r7, r3
    stop();
 23fe9d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe9d8:	b08b      	sub	sp, #44	; 0x2c
    stop();
 23fe9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe9dc:	4605      	mov	r5, r0
 23fe9de:	4616      	mov	r6, r2
    stop();
 23fe9e0:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fe9e2:	7d23      	ldrb	r3, [r4, #20]
 23fe9e4:	2206      	movs	r2, #6
 23fe9e6:	2b04      	cmp	r3, #4
 23fe9e8:	bf0c      	ite	eq
 23fe9ea:	2002      	moveq	r0, #2
 23fe9ec:	200a      	movne	r0, #10
 23fe9ee:	2101      	movs	r1, #1
 23fe9f0:	f7fd fe0e 	bl	23fc610 <sock_socket>
 23fe9f4:	696b      	ldr	r3, [r5, #20]
 23fe9f6:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fe9f8:	696b      	ldr	r3, [r5, #20]
 23fe9fa:	681b      	ldr	r3, [r3, #0]
 23fe9fc:	2b00      	cmp	r3, #0
 23fe9fe:	da07      	bge.n	23fea10 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
 23fea00:	682b      	ldr	r3, [r5, #0]
 23fea02:	4628      	mov	r0, r5
 23fea04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fea06:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fea08:	4798      	blx	r3
}
 23fea0a:	4620      	mov	r0, r4
 23fea0c:	b00b      	add	sp, #44	; 0x2c
 23fea0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
 23fea10:	4628      	mov	r0, r5
 23fea12:	f7ff ffd5 	bl	23fe9c0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fea16:	b1b7      	cbz	r7, 23fea46 <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
 23fea18:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fea1a:	a903      	add	r1, sp, #12
 23fea1c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fea1e:	9303      	str	r3, [sp, #12]
 23fea20:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fea24:	f7fd fd5a 	bl	23fc4dc <if_index_to_name>
 23fea28:	2800      	cmp	r0, #0
 23fea2a:	d1e9      	bne.n	23fea00 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fea2c:	2306      	movs	r3, #6
 23fea2e:	6968      	ldr	r0, [r5, #20]
 23fea30:	9300      	str	r3, [sp, #0]
 23fea32:	f241 020b 	movw	r2, #4107	; 0x100b
 23fea36:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fea3a:	6800      	ldr	r0, [r0, #0]
 23fea3c:	ab03      	add	r3, sp, #12
 23fea3e:	f7fd fda1 	bl	23fc584 <sock_setsockopt>
 23fea42:	2800      	cmp	r0, #0
 23fea44:	d1dc      	bne.n	23fea00 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
 23fea46:	221c      	movs	r2, #28
 23fea48:	2100      	movs	r1, #0
 23fea4a:	a803      	add	r0, sp, #12
 23fea4c:	f000 fd7d 	bl	23ff54a <memset>
    if (ip.version() == 4) {
 23fea50:	7d23      	ldrb	r3, [r4, #20]
 23fea52:	2b04      	cmp	r3, #4
 23fea54:	d11d      	bne.n	23fea92 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
 23fea56:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fea5a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fea5c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fea60:	f7fd fd66 	bl	23fc530 <inet_htons>
 23fea64:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fea68:	6860      	ldr	r0, [r4, #4]
 23fea6a:	f7fd fd53 	bl	23fc514 <inet_htonl>
 23fea6e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fea70:	696b      	ldr	r3, [r5, #20]
 23fea72:	221c      	movs	r2, #28
 23fea74:	6818      	ldr	r0, [r3, #0]
 23fea76:	a903      	add	r1, sp, #12
 23fea78:	f7fd fda0 	bl	23fc5bc <sock_connect>
 23fea7c:	2800      	cmp	r0, #0
 23fea7e:	d1bf      	bne.n	23fea00 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
 23fea80:	696d      	ldr	r5, [r5, #20]
 23fea82:	3404      	adds	r4, #4
 23fea84:	358c      	adds	r5, #140	; 0x8c
 23fea86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fea88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fea8a:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fea8c:	2401      	movs	r4, #1
 23fea8e:	702b      	strb	r3, [r5, #0]
 23fea90:	e7bb      	b.n	23fea0a <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
 23fea92:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fea96:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fea98:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fea9c:	f7fd fd48 	bl	23fc530 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23feaa0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23feaa2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23feaa6:	1d23      	adds	r3, r4, #4
 23feaa8:	f104 0714 	add.w	r7, r4, #20
 23feaac:	4632      	mov	r2, r6
 23feaae:	6818      	ldr	r0, [r3, #0]
 23feab0:	6859      	ldr	r1, [r3, #4]
 23feab2:	3308      	adds	r3, #8
 23feab4:	c203      	stmia	r2!, {r0, r1}
 23feab6:	42bb      	cmp	r3, r7
 23feab8:	4616      	mov	r6, r2
 23feaba:	d1f7      	bne.n	23feaac <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
 23feabc:	e7d8      	b.n	23fea70 <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

023feac0 <_ZN9TCPClient9availableEv>:
{
 23feac0:	b530      	push	{r4, r5, lr}
 23feac2:	6942      	ldr	r2, [r0, #20]
 23feac4:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23feac6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23feaca:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23feacc:	b12b      	cbz	r3, 23feada <_ZN9TCPClient9availableEv+0x1a>
 23feace:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fead2:	429a      	cmp	r2, r3
 23fead4:	d101      	bne.n	23feada <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fead6:	f7ff ff73 	bl	23fe9c0 <_ZN9TCPClient12flush_bufferEv>
 23feada:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23feadc:	6808      	ldr	r0, [r1, #0]
 23feade:	2800      	cmp	r0, #0
 23feae0:	db18      	blt.n	23feb14 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23feae2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23feae6:	2d7f      	cmp	r5, #127	; 0x7f
 23feae8:	d814      	bhi.n	23feb14 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23feaea:	3104      	adds	r1, #4
 23feaec:	2308      	movs	r3, #8
 23feaee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23feaf2:	4429      	add	r1, r5
 23feaf4:	f7fd fd70 	bl	23fc5d8 <sock_recv>
            if (ret > 0) {
 23feaf8:	2800      	cmp	r0, #0
 23feafa:	dd13      	ble.n	23feb24 <_ZN9TCPClient9availableEv+0x64>
 23feafc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23feafe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23feb02:	b90a      	cbnz	r2, 23feb08 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23feb04:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23feb08:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23feb0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23feb0e:	4410      	add	r0, r2
 23feb10:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23feb14:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23feb16:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23feb1a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23feb1e:	1ac0      	subs	r0, r0, r3
 23feb20:	b00b      	add	sp, #44	; 0x2c
 23feb22:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23feb24:	f7fe f83e 	bl	23fcba4 <__errno>
 23feb28:	6803      	ldr	r3, [r0, #0]
 23feb2a:	2b0b      	cmp	r3, #11
 23feb2c:	d0f2      	beq.n	23feb14 <_ZN9TCPClient9availableEv+0x54>
 23feb2e:	f7fe f839 	bl	23fcba4 <__errno>
 23feb32:	6803      	ldr	r3, [r0, #0]
 23feb34:	2b0b      	cmp	r3, #11
 23feb36:	d0ed      	beq.n	23feb14 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23feb38:	2320      	movs	r3, #32
 23feb3a:	2500      	movs	r5, #0
 23feb3c:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23feb40:	f7fe f830 	bl	23fcba4 <__errno>
 23feb44:	6803      	ldr	r3, [r0, #0]
 23feb46:	aa02      	add	r2, sp, #8
 23feb48:	9301      	str	r3, [sp, #4]
 23feb4a:	4b08      	ldr	r3, [pc, #32]	; (23feb6c <_ZN9TCPClient9availableEv+0xac>)
 23feb4c:	2032      	movs	r0, #50	; 0x32
 23feb4e:	4908      	ldr	r1, [pc, #32]	; (23feb70 <_ZN9TCPClient9availableEv+0xb0>)
 23feb50:	9300      	str	r3, [sp, #0]
 23feb52:	462b      	mov	r3, r5
 23feb54:	f7fd fe9e 	bl	23fc894 <log_message>
                    sock_close(d_->sock);
 23feb58:	6963      	ldr	r3, [r4, #20]
 23feb5a:	6818      	ldr	r0, [r3, #0]
 23feb5c:	f7fd fd20 	bl	23fc5a0 <sock_close>
                    d_->sock = -1;
 23feb60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23feb64:	6963      	ldr	r3, [r4, #20]
 23feb66:	601a      	str	r2, [r3, #0]
 23feb68:	e7d4      	b.n	23feb14 <_ZN9TCPClient9availableEv+0x54>
 23feb6a:	bf00      	nop
 23feb6c:	023ffc23 	.word	0x023ffc23
 23feb70:	023ffc1c 	.word	0x023ffc1c

023feb74 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23feb74:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23feb76:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23feb78:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23feb7a:	6818      	ldr	r0, [r3, #0]
 23feb7c:	2800      	cmp	r0, #0
 23feb7e:	db01      	blt.n	23feb84 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23feb80:	f7fd fd0e 	bl	23fc5a0 <sock_close>
    d_->sock = -1;
 23feb84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23feb88:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23feb8a:	2100      	movs	r1, #0
 23feb8c:	601a      	str	r2, [r3, #0]
 23feb8e:	6960      	ldr	r0, [r4, #20]
 23feb90:	2211      	movs	r2, #17
 23feb92:	308c      	adds	r0, #140	; 0x8c
 23feb94:	f000 fcd9 	bl	23ff54a <memset>
    flush_buffer();
 23feb98:	4620      	mov	r0, r4
}
 23feb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23feb9e:	f7ff bf0f 	b.w	23fe9c0 <_ZN9TCPClient12flush_bufferEv>

023feba2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23feba2:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23feba4:	b510      	push	{r4, lr}
 23feba6:	4604      	mov	r4, r0
          total(0) {
 23feba8:	6001      	str	r1, [r0, #0]
 23febaa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23febae:	3088      	adds	r0, #136	; 0x88
 23febb0:	f7fe f93a 	bl	23fce28 <_ZN9IPAddressC1Ev>
}
 23febb4:	4620      	mov	r0, r4
 23febb6:	bd10      	pop	{r4, pc}

023febb8 <_ZN9TCPClientC1Ei>:
 23febb8:	2300      	movs	r3, #0
 23febba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23febbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23febc0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23febc4:	4a0e      	ldr	r2, [pc, #56]	; (23fec00 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23febc6:	6103      	str	r3, [r0, #16]
 23febc8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23febca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23febcc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23febce:	20ac      	movs	r0, #172	; 0xac
 23febd0:	9101      	str	r1, [sp, #4]
 23febd2:	f7fd f890 	bl	23fbcf6 <_Znwj>
	  auto __pi = ::new (__mem)
 23febd6:	1e05      	subs	r5, r0, #0
 23febd8:	f105 060c 	add.w	r6, r5, #12
 23febdc:	d008      	beq.n	23febf0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23febde:	2301      	movs	r3, #1
 23febe0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23febe4:	4b07      	ldr	r3, [pc, #28]	; (23fec04 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23febe6:	4630      	mov	r0, r6
 23febe8:	9901      	ldr	r1, [sp, #4]
 23febea:	602b      	str	r3, [r5, #0]
 23febec:	f7ff ffd9 	bl	23feba2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23febf0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23febf2:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23febf6:	f7ff fee3 	bl	23fe9c0 <_ZN9TCPClient12flush_bufferEv>
}
 23febfa:	b002      	add	sp, #8
 23febfc:	bd70      	pop	{r4, r5, r6, pc}
 23febfe:	bf00      	nop
 23fec00:	023ffc58 	.word	0x023ffc58
 23fec04:	023ffc3c 	.word	0x023ffc3c

023fec08 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fec08:	b510      	push	{r4, lr}
 23fec0a:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fec0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fec10:	f7ff ffd2 	bl	23febb8 <_ZN9TCPClientC1Ei>
}
 23fec14:	4620      	mov	r0, r4
 23fec16:	bd10      	pop	{r4, pc}

023fec18 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fec18:	b510      	push	{r4, lr}
 23fec1a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fec1c:	6800      	ldr	r0, [r0, #0]
 23fec1e:	2800      	cmp	r0, #0
 23fec20:	db01      	blt.n	23fec26 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fec22:	f7fd fcbd 	bl	23fc5a0 <sock_close>
    }
}
 23fec26:	4620      	mov	r0, r4
 23fec28:	bd10      	pop	{r4, pc}

023fec2a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fec2a:	300c      	adds	r0, #12
 23fec2c:	f7ff bff4 	b.w	23fec18 <_ZN9TCPClient4DataD1Ev>

023fec30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fec30:	4b02      	ldr	r3, [pc, #8]	; (23fec3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fec32:	681a      	ldr	r2, [r3, #0]
 23fec34:	4b02      	ldr	r3, [pc, #8]	; (23fec40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fec36:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fec38:	4770      	bx	lr
 23fec3a:	bf00      	nop
 23fec3c:	1007ac90 	.word	0x1007ac90
 23fec40:	1007aecc 	.word	0x1007aecc

023fec44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fec44:	4770      	bx	lr

023fec46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fec46:	7441      	strb	r1, [r0, #17]
}
 23fec48:	4770      	bx	lr

023fec4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fec4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fec4c:	7c00      	ldrb	r0, [r0, #16]
 23fec4e:	f7fd fd6b 	bl	23fc728 <hal_usart_available_data_for_write>
}
 23fec52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec56:	bd08      	pop	{r3, pc}

023fec58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fec58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fec5a:	7c00      	ldrb	r0, [r0, #16]
 23fec5c:	f7fd fd1e 	bl	23fc69c <hal_usart_available>
}
 23fec60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec64:	bd08      	pop	{r3, pc}

023fec66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fec66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fec68:	7c00      	ldrb	r0, [r0, #16]
 23fec6a:	f7fd fd33 	bl	23fc6d4 <hal_usart_peek>
}
 23fec6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec72:	bd08      	pop	{r3, pc}

023fec74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fec74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fec76:	7c00      	ldrb	r0, [r0, #16]
 23fec78:	f7fd fd1e 	bl	23fc6b8 <hal_usart_read>
}
 23fec7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec80:	bd08      	pop	{r3, pc}

023fec82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fec82:	7c00      	ldrb	r0, [r0, #16]
 23fec84:	f7fd bd34 	b.w	23fc6f0 <hal_usart_flush>

023fec88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fec88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fec8a:	7c45      	ldrb	r5, [r0, #17]
{
 23fec8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fec8e:	b12d      	cbz	r5, 23fec9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fec90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fec92:	b003      	add	sp, #12
 23fec94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fec98:	f7fd bcf2 	b.w	23fc680 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fec9c:	7c00      	ldrb	r0, [r0, #16]
 23fec9e:	9101      	str	r1, [sp, #4]
 23feca0:	f7fd fd42 	bl	23fc728 <hal_usart_available_data_for_write>
 23feca4:	2800      	cmp	r0, #0
 23feca6:	9901      	ldr	r1, [sp, #4]
 23feca8:	dcf2      	bgt.n	23fec90 <_ZN11USARTSerial5writeEh+0x8>
}
 23fecaa:	4628      	mov	r0, r5
 23fecac:	b003      	add	sp, #12
 23fecae:	bd30      	pop	{r4, r5, pc}

023fecb0 <_ZN11USARTSerialD0Ev>:
 23fecb0:	b510      	push	{r4, lr}
 23fecb2:	4604      	mov	r4, r0
 23fecb4:	2114      	movs	r1, #20
 23fecb6:	f7fd f822 	bl	23fbcfe <_ZdlPvj>
 23fecba:	4620      	mov	r0, r4
 23fecbc:	bd10      	pop	{r4, pc}
	...

023fecc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fecc0:	b510      	push	{r4, lr}
 23fecc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fecc6:	4604      	mov	r4, r0
 23fecc8:	4608      	mov	r0, r1
 23fecca:	4611      	mov	r1, r2
 23feccc:	2200      	movs	r2, #0
 23fecce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fecd2:	4b04      	ldr	r3, [pc, #16]	; (23fece4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fecd4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fecd6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fecd8:	2301      	movs	r3, #1
 23fecda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fecdc:	f7fd fd40 	bl	23fc760 <hal_usart_init_ex>
}
 23fece0:	4620      	mov	r0, r4
 23fece2:	bd10      	pop	{r4, pc}
 23fece4:	023ffcc4 	.word	0x023ffcc4

023fece8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fece8:	2300      	movs	r3, #0
 23fecea:	7c00      	ldrb	r0, [r0, #16]
 23fecec:	f7fd bd2a 	b.w	23fc744 <hal_usart_begin_config>

023fecf0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fecf0:	2200      	movs	r2, #0
 23fecf2:	f7ff bff9 	b.w	23fece8 <_ZN11USARTSerial5beginEmm>

023fecf6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fecf6:	7c00      	ldrb	r0, [r0, #16]
 23fecf8:	f7fd bcb4 	b.w	23fc664 <hal_usart_end>

023fecfc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fecfc:	7c00      	ldrb	r0, [r0, #16]
 23fecfe:	f7fd bd05 	b.w	23fc70c <hal_usart_is_enabled>

023fed02 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed02:	7441      	strb	r1, [r0, #17]
}
 23fed04:	4770      	bx	lr

023fed06 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fed06:	4770      	bx	lr

023fed08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fed08:	4770      	bx	lr

023fed0a <_ZN9USBSerial4readEv>:
{
 23fed0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fed0c:	2100      	movs	r1, #0
 23fed0e:	7c00      	ldrb	r0, [r0, #16]
 23fed10:	f7fd fd7a 	bl	23fc808 <HAL_USB_USART_Receive_Data>
}
 23fed14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed18:	bd08      	pop	{r3, pc}

023fed1a <_ZN9USBSerial4peekEv>:
{
 23fed1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fed1c:	2101      	movs	r1, #1
 23fed1e:	7c00      	ldrb	r0, [r0, #16]
 23fed20:	f7fd fd72 	bl	23fc808 <HAL_USB_USART_Receive_Data>
}
 23fed24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed28:	bd08      	pop	{r3, pc}

023fed2a <_ZN9USBSerial17availableForWriteEv>:
{
 23fed2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fed2c:	7c00      	ldrb	r0, [r0, #16]
 23fed2e:	f7fd fd5d 	bl	23fc7ec <HAL_USB_USART_Available_Data_For_Write>
}
 23fed32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed36:	bd08      	pop	{r3, pc}

023fed38 <_ZN9USBSerial9availableEv>:
{
 23fed38:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fed3a:	7c00      	ldrb	r0, [r0, #16]
 23fed3c:	f7fd fd48 	bl	23fc7d0 <HAL_USB_USART_Available_Data>
}
 23fed40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed44:	bd08      	pop	{r3, pc}

023fed46 <_ZN9USBSerial5writeEh>:
{
 23fed46:	b513      	push	{r0, r1, r4, lr}
 23fed48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed4a:	7c00      	ldrb	r0, [r0, #16]
{
 23fed4c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed4e:	f7fd fd4d 	bl	23fc7ec <HAL_USB_USART_Available_Data_For_Write>
 23fed52:	2800      	cmp	r0, #0
 23fed54:	9901      	ldr	r1, [sp, #4]
 23fed56:	dc01      	bgt.n	23fed5c <_ZN9USBSerial5writeEh+0x16>
 23fed58:	7c60      	ldrb	r0, [r4, #17]
 23fed5a:	b120      	cbz	r0, 23fed66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fed5c:	7c20      	ldrb	r0, [r4, #16]
 23fed5e:	f7fd fd61 	bl	23fc824 <HAL_USB_USART_Send_Data>
 23fed62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fed66:	b002      	add	sp, #8
 23fed68:	bd10      	pop	{r4, pc}

023fed6a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fed6a:	7c00      	ldrb	r0, [r0, #16]
 23fed6c:	f7fd bd68 	b.w	23fc840 <HAL_USB_USART_Flush_Data>

023fed70 <_ZN9USBSerialD0Ev>:
 23fed70:	b510      	push	{r4, lr}
 23fed72:	4604      	mov	r4, r0
 23fed74:	2114      	movs	r1, #20
 23fed76:	f7fc ffc2 	bl	23fbcfe <_ZdlPvj>
 23fed7a:	4620      	mov	r0, r4
 23fed7c:	bd10      	pop	{r4, pc}
	...

023fed80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fed80:	b510      	push	{r4, lr}
 23fed82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fed86:	4604      	mov	r4, r0
 23fed88:	4608      	mov	r0, r1
 23fed8a:	2100      	movs	r1, #0
 23fed8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fed90:	4b04      	ldr	r3, [pc, #16]	; (23feda4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fed92:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fed94:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fed96:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fed98:	4611      	mov	r1, r2
  _blocking = true;
 23fed9a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fed9c:	f7fd fcee 	bl	23fc77c <HAL_USB_USART_Init>
}
 23feda0:	4620      	mov	r0, r4
 23feda2:	bd10      	pop	{r4, pc}
 23feda4:	023ffcf8 	.word	0x023ffcf8

023feda8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23feda8:	2200      	movs	r2, #0
 23fedaa:	7c00      	ldrb	r0, [r0, #16]
 23fedac:	f7fd bcf4 	b.w	23fc798 <HAL_USB_USART_Begin>

023fedb0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fedb0:	7c00      	ldrb	r0, [r0, #16]
 23fedb2:	f7fd bcff 	b.w	23fc7b4 <HAL_USB_USART_End>

023fedb6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fedb6:	7c00      	ldrb	r0, [r0, #16]
 23fedb8:	f7fd bd50 	b.w	23fc85c <HAL_USB_USART_Is_Connected>

023fedbc <_Z19acquireSerialBufferv>:
{
 23fedbc:	b510      	push	{r4, lr}
 23fedbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fedc0:	2214      	movs	r2, #20
 23fedc2:	2100      	movs	r1, #0
 23fedc4:	f000 fbc1 	bl	23ff54a <memset>
}
 23fedc8:	4620      	mov	r0, r4
 23fedca:	bd10      	pop	{r4, pc}

023fedcc <_Z16_fetch_usbserialv>:
{
 23fedcc:	b510      	push	{r4, lr}
 23fedce:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fedd0:	a803      	add	r0, sp, #12
 23fedd2:	f7ff fff3 	bl	23fedbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fedd6:	4c0c      	ldr	r4, [pc, #48]	; (23fee08 <_Z16_fetch_usbserialv+0x3c>)
 23fedd8:	e8d4 1f8f 	ldab	r1, [r4]
 23feddc:	f011 0101 	ands.w	r1, r1, #1
 23fede0:	d10f      	bne.n	23fee02 <_Z16_fetch_usbserialv+0x36>
 23fede2:	4620      	mov	r0, r4
 23fede4:	9101      	str	r1, [sp, #4]
 23fede6:	f7fc ff99 	bl	23fbd1c <__cxa_guard_acquire>
 23fedea:	9901      	ldr	r1, [sp, #4]
 23fedec:	b148      	cbz	r0, 23fee02 <_Z16_fetch_usbserialv+0x36>
 23fedee:	aa03      	add	r2, sp, #12
 23fedf0:	4806      	ldr	r0, [pc, #24]	; (23fee0c <_Z16_fetch_usbserialv+0x40>)
 23fedf2:	f7ff ffc5 	bl	23fed80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fedf6:	4620      	mov	r0, r4
 23fedf8:	f7fc ff95 	bl	23fbd26 <__cxa_guard_release>
 23fedfc:	4804      	ldr	r0, [pc, #16]	; (23fee10 <_Z16_fetch_usbserialv+0x44>)
 23fedfe:	f000 fb6f 	bl	23ff4e0 <atexit>
	return _usbserial;
}
 23fee02:	4802      	ldr	r0, [pc, #8]	; (23fee0c <_Z16_fetch_usbserialv+0x40>)
 23fee04:	b008      	add	sp, #32
 23fee06:	bd10      	pop	{r4, pc}
 23fee08:	1007aed0 	.word	0x1007aed0
 23fee0c:	1007aed4 	.word	0x1007aed4
 23fee10:	023fed07 	.word	0x023fed07

023fee14 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fee14:	2200      	movs	r2, #0
 23fee16:	6840      	ldr	r0, [r0, #4]
 23fee18:	4611      	mov	r1, r2
 23fee1a:	f7fd bdf1 	b.w	23fca00 <network_ready>

023fee1e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee1e:	2200      	movs	r2, #0
 23fee20:	6840      	ldr	r0, [r0, #4]
 23fee22:	4611      	mov	r1, r2
 23fee24:	f7fd be24 	b.w	23fca70 <network_listening>

023fee28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee28:	2200      	movs	r2, #0
 23fee2a:	6840      	ldr	r0, [r0, #4]
 23fee2c:	4611      	mov	r1, r2
 23fee2e:	f7fd be3b 	b.w	23fcaa8 <network_get_listen_timeout>

023fee32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee32:	2200      	movs	r2, #0
 23fee34:	6840      	ldr	r0, [r0, #4]
 23fee36:	f7fd be29 	b.w	23fca8c <network_set_listen_timeout>

023fee3a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee3a:	2200      	movs	r2, #0
 23fee3c:	6840      	ldr	r0, [r0, #4]
 23fee3e:	f081 0101 	eor.w	r1, r1, #1
 23fee42:	f7fd be07 	b.w	23fca54 <network_listen>

023fee46 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fee46:	2300      	movs	r3, #0
 23fee48:	6840      	ldr	r0, [r0, #4]
 23fee4a:	461a      	mov	r2, r3
 23fee4c:	4619      	mov	r1, r3
 23fee4e:	f7fd bdf3 	b.w	23fca38 <network_off>

023fee52 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fee52:	2300      	movs	r3, #0
 23fee54:	6840      	ldr	r0, [r0, #4]
 23fee56:	461a      	mov	r2, r3
 23fee58:	4619      	mov	r1, r3
 23fee5a:	f7fd bddf 	b.w	23fca1c <network_on>

023fee5e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fee5e:	2200      	movs	r2, #0
 23fee60:	6840      	ldr	r0, [r0, #4]
 23fee62:	4611      	mov	r1, r2
 23fee64:	f7fd bdb0 	b.w	23fc9c8 <network_connecting>

023fee68 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fee68:	2200      	movs	r2, #0
 23fee6a:	2102      	movs	r1, #2
 23fee6c:	6840      	ldr	r0, [r0, #4]
 23fee6e:	f7fd bdb9 	b.w	23fc9e4 <network_disconnect>

023fee72 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fee72:	2300      	movs	r3, #0
 23fee74:	6840      	ldr	r0, [r0, #4]
 23fee76:	461a      	mov	r2, r3
 23fee78:	f7fd bd98 	b.w	23fc9ac <network_connect>

023fee7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fee7c:	2204      	movs	r2, #4
 23fee7e:	4b02      	ldr	r3, [pc, #8]	; (23fee88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fee80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fee82:	4a02      	ldr	r2, [pc, #8]	; (23fee8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fee84:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fee86:	4770      	bx	lr
 23fee88:	1007aee8 	.word	0x1007aee8
 23fee8c:	023ffd2c 	.word	0x023ffd2c

023fee90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fee90:	4b01      	ldr	r3, [pc, #4]	; (23fee98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fee92:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fee94:	4770      	bx	lr
 23fee96:	bf00      	nop
 23fee98:	1007ac94 	.word	0x1007ac94

023fee9c <serialEventRun>:
{
 23fee9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fee9e:	4b0f      	ldr	r3, [pc, #60]	; (23feedc <serialEventRun+0x40>)
 23feea0:	b143      	cbz	r3, 23feeb4 <serialEventRun+0x18>
 23feea2:	f7ff ff93 	bl	23fedcc <_Z16_fetch_usbserialv>
 23feea6:	6803      	ldr	r3, [r0, #0]
 23feea8:	691b      	ldr	r3, [r3, #16]
 23feeaa:	4798      	blx	r3
 23feeac:	2800      	cmp	r0, #0
 23feeae:	dd01      	ble.n	23feeb4 <serialEventRun+0x18>
        serialEvent();
 23feeb0:	e000      	b.n	23feeb4 <serialEventRun+0x18>
 23feeb2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feeb4:	4b0a      	ldr	r3, [pc, #40]	; (23feee0 <serialEventRun+0x44>)
 23feeb6:	b143      	cbz	r3, 23feeca <serialEventRun+0x2e>
 23feeb8:	f000 f96c 	bl	23ff194 <_Z22__fetch_global_Serial1v>
 23feebc:	6803      	ldr	r3, [r0, #0]
 23feebe:	691b      	ldr	r3, [r3, #16]
 23feec0:	4798      	blx	r3
 23feec2:	2800      	cmp	r0, #0
 23feec4:	dd01      	ble.n	23feeca <serialEventRun+0x2e>
        serialEvent1();
 23feec6:	e000      	b.n	23feeca <serialEventRun+0x2e>
 23feec8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23feeca:	4b06      	ldr	r3, [pc, #24]	; (23feee4 <serialEventRun+0x48>)
 23feecc:	b10b      	cbz	r3, 23feed2 <serialEventRun+0x36>
 23feece:	f000 f9a7 	bl	23ff220 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23feed2:	4b05      	ldr	r3, [pc, #20]	; (23feee8 <serialEventRun+0x4c>)
 23feed4:	b10b      	cbz	r3, 23feeda <serialEventRun+0x3e>
 23feed6:	f000 f9d9 	bl	23ff28c <_Z15serialEventRun3v>
}
 23feeda:	bd08      	pop	{r3, pc}
	...

023feeec <_post_loop>:
{
 23feeec:	b508      	push	{r3, lr}
	serialEventRun();
 23feeee:	f7ff ffd5 	bl	23fee9c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23feef2:	f7fd fa3d 	bl	23fc370 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23feef6:	4b01      	ldr	r3, [pc, #4]	; (23feefc <_post_loop+0x10>)
 23feef8:	6018      	str	r0, [r3, #0]
}
 23feefa:	bd08      	pop	{r3, pc}
 23feefc:	1007af04 	.word	0x1007af04

023fef00 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fef00:	4805      	ldr	r0, [pc, #20]	; (23fef18 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fef02:	4a06      	ldr	r2, [pc, #24]	; (23fef1c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fef04:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fef06:	1a12      	subs	r2, r2, r0
 23fef08:	4905      	ldr	r1, [pc, #20]	; (23fef20 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fef0a:	f000 faf7 	bl	23ff4fc <memcpy>
    __backup_sram_signature = signature;
 23fef0e:	4b05      	ldr	r3, [pc, #20]	; (23fef24 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fef10:	4a05      	ldr	r2, [pc, #20]	; (23fef28 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fef12:	601a      	str	r2, [r3, #0]
}
 23fef14:	bd08      	pop	{r3, pc}
 23fef16:	bf00      	nop
 23fef18:	1007b400 	.word	0x1007b400
 23fef1c:	1007b404 	.word	0x1007b404
 23fef20:	085ff800 	.word	0x085ff800
 23fef24:	1007b400 	.word	0x1007b400
 23fef28:	9a271c1e 	.word	0x9a271c1e

023fef2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef2c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fef2e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef30:	461a      	mov	r2, r3
 23fef32:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fef36:	9300      	str	r3, [sp, #0]
 23fef38:	f7fd fd0e 	bl	23fc958 <system_ctrl_set_result>
}
 23fef3c:	b003      	add	sp, #12
 23fef3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fef44 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fef44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fef46:	8843      	ldrh	r3, [r0, #2]
 23fef48:	2b0a      	cmp	r3, #10
 23fef4a:	d008      	beq.n	23fef5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fef4c:	2b50      	cmp	r3, #80	; 0x50
 23fef4e:	d10b      	bne.n	23fef68 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fef50:	4b09      	ldr	r3, [pc, #36]	; (23fef78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fef52:	681b      	ldr	r3, [r3, #0]
 23fef54:	b14b      	cbz	r3, 23fef6a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fef56:	b003      	add	sp, #12
 23fef58:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fef5c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fef5e:	f7ff ffe5 	bl	23fef2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fef62:	b003      	add	sp, #12
 23fef64:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef68:	2300      	movs	r3, #0
 23fef6a:	461a      	mov	r2, r3
 23fef6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fef70:	9300      	str	r3, [sp, #0]
 23fef72:	f7fd fcf1 	bl	23fc958 <system_ctrl_set_result>
}
 23fef76:	e7f4      	b.n	23fef62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fef78:	1007aef4 	.word	0x1007aef4

023fef7c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fef7c:	2100      	movs	r1, #0
{
 23fef7e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fef80:	4811      	ldr	r0, [pc, #68]	; (23fefc8 <module_user_init_hook+0x4c>)
 23fef82:	f7fd fe2b 	bl	23fcbdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fef86:	4b11      	ldr	r3, [pc, #68]	; (23fefcc <module_user_init_hook+0x50>)
 23fef88:	681a      	ldr	r2, [r3, #0]
 23fef8a:	4b11      	ldr	r3, [pc, #68]	; (23fefd0 <module_user_init_hook+0x54>)
 23fef8c:	429a      	cmp	r2, r3
 23fef8e:	bf0c      	ite	eq
 23fef90:	2201      	moveq	r2, #1
 23fef92:	2200      	movne	r2, #0
 23fef94:	4b0f      	ldr	r3, [pc, #60]	; (23fefd4 <module_user_init_hook+0x58>)
 23fef96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fef98:	d001      	beq.n	23fef9e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fef9a:	f7ff ffb1 	bl	23fef00 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fef9e:	f7fd f9cb 	bl	23fc338 <HAL_RNG_GetRandomNumber>
 23fefa2:	4604      	mov	r4, r0
    srand(seed);
 23fefa4:	f000 fada 	bl	23ff55c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fefa8:	4b0b      	ldr	r3, [pc, #44]	; (23fefd8 <module_user_init_hook+0x5c>)
 23fefaa:	b113      	cbz	r3, 23fefb2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fefac:	4620      	mov	r0, r4
 23fefae:	e000      	b.n	23fefb2 <module_user_init_hook+0x36>
 23fefb0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fefb2:	2100      	movs	r1, #0
 23fefb4:	4808      	ldr	r0, [pc, #32]	; (23fefd8 <module_user_init_hook+0x5c>)
 23fefb6:	f7fd fceb 	bl	23fc990 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fefba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fefbe:	2100      	movs	r1, #0
 23fefc0:	4806      	ldr	r0, [pc, #24]	; (23fefdc <module_user_init_hook+0x60>)
 23fefc2:	f7fd bcbb 	b.w	23fc93c <system_ctrl_set_app_request_handler>
 23fefc6:	bf00      	nop
 23fefc8:	023fee91 	.word	0x023fee91
 23fefcc:	1007b400 	.word	0x1007b400
 23fefd0:	9a271c1e 	.word	0x9a271c1e
 23fefd4:	1007aef0 	.word	0x1007aef0
 23fefd8:	00000000 	.word	0x00000000
 23fefdc:	023fef45 	.word	0x023fef45

023fefe0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fefe0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fefe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fefe4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fefe6:	d902      	bls.n	23fefee <pinAvailable+0xe>
    return false;
 23fefe8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fefea:	b003      	add	sp, #12
 23fefec:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fefee:	f1a0 030f 	sub.w	r3, r0, #15
 23feff2:	2b02      	cmp	r3, #2
 23feff4:	d90b      	bls.n	23ff00e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23feff6:	2801      	cmp	r0, #1
 23feff8:	d821      	bhi.n	23ff03e <pinAvailable+0x5e>
 23feffa:	f000 f877 	bl	23ff0ec <_Z19__fetch_global_Wirev>
 23feffe:	2100      	movs	r1, #0
 23ff000:	7c00      	ldrb	r0, [r0, #16]
 23ff002:	f7fd fa4f 	bl	23fc4a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff006:	f080 0001 	eor.w	r0, r0, #1
 23ff00a:	b2c0      	uxtb	r0, r0
 23ff00c:	e7ed      	b.n	23fefea <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff00e:	4d11      	ldr	r5, [pc, #68]	; (23ff054 <pinAvailable+0x74>)
 23ff010:	e8d5 1f8f 	ldab	r1, [r5]
 23ff014:	f011 0101 	ands.w	r1, r1, #1
 23ff018:	d10b      	bne.n	23ff032 <pinAvailable+0x52>
 23ff01a:	4628      	mov	r0, r5
 23ff01c:	9101      	str	r1, [sp, #4]
 23ff01e:	f7fc fe7d 	bl	23fbd1c <__cxa_guard_acquire>
 23ff022:	9901      	ldr	r1, [sp, #4]
 23ff024:	b128      	cbz	r0, 23ff032 <pinAvailable+0x52>
 23ff026:	480c      	ldr	r0, [pc, #48]	; (23ff058 <pinAvailable+0x78>)
 23ff028:	f7ff fa42 	bl	23fe4b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff02c:	4628      	mov	r0, r5
 23ff02e:	f7fc fe7a 	bl	23fbd26 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff032:	4b09      	ldr	r3, [pc, #36]	; (23ff058 <pinAvailable+0x78>)
 23ff034:	7818      	ldrb	r0, [r3, #0]
 23ff036:	f7fd fb07 	bl	23fc648 <hal_spi_is_enabled>
 23ff03a:	2800      	cmp	r0, #0
 23ff03c:	d1d4      	bne.n	23fefe8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff03e:	3c08      	subs	r4, #8
 23ff040:	2c01      	cmp	r4, #1
 23ff042:	d805      	bhi.n	23ff050 <pinAvailable+0x70>
 23ff044:	f000 f8a6 	bl	23ff194 <_Z22__fetch_global_Serial1v>
 23ff048:	7c00      	ldrb	r0, [r0, #16]
 23ff04a:	f7fd fb5f 	bl	23fc70c <hal_usart_is_enabled>
 23ff04e:	e7da      	b.n	23ff006 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff050:	2001      	movs	r0, #1
 23ff052:	e7ca      	b.n	23fefea <pinAvailable+0xa>
 23ff054:	1007aef8 	.word	0x1007aef8
 23ff058:	1007aefc 	.word	0x1007aefc

023ff05c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff05c:	281b      	cmp	r0, #27
{
 23ff05e:	b538      	push	{r3, r4, r5, lr}
 23ff060:	4604      	mov	r4, r0
 23ff062:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff064:	d80a      	bhi.n	23ff07c <pinMode+0x20>
 23ff066:	29ff      	cmp	r1, #255	; 0xff
 23ff068:	d008      	beq.n	23ff07c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff06a:	f7ff ffb9 	bl	23fefe0 <pinAvailable>
 23ff06e:	b128      	cbz	r0, 23ff07c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff070:	4629      	mov	r1, r5
 23ff072:	4620      	mov	r0, r4
}
 23ff074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff078:	f7fd b996 	b.w	23fc3a8 <hal_gpio_mode>
}
 23ff07c:	bd38      	pop	{r3, r4, r5, pc}

023ff07e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff07e:	b538      	push	{r3, r4, r5, lr}
 23ff080:	4604      	mov	r4, r0
 23ff082:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff084:	f7fd f99e 	bl	23fc3c4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff088:	28ff      	cmp	r0, #255	; 0xff
 23ff08a:	d010      	beq.n	23ff0ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff08c:	2806      	cmp	r0, #6
 23ff08e:	d804      	bhi.n	23ff09a <digitalWrite+0x1c>
 23ff090:	234d      	movs	r3, #77	; 0x4d
 23ff092:	fa23 f000 	lsr.w	r0, r3, r0
 23ff096:	07c3      	lsls	r3, r0, #31
 23ff098:	d409      	bmi.n	23ff0ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff09a:	4620      	mov	r0, r4
 23ff09c:	f7ff ffa0 	bl	23fefe0 <pinAvailable>
 23ff0a0:	b128      	cbz	r0, 23ff0ae <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff0a2:	4629      	mov	r1, r5
 23ff0a4:	4620      	mov	r0, r4
}
 23ff0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff0aa:	f7fd b999 	b.w	23fc3e0 <hal_gpio_write>
}
 23ff0ae:	bd38      	pop	{r3, r4, r5, pc}

023ff0b0 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
 23ff0b0:	f7fd b9a4 	b.w	23fc3fc <hal_gpio_pulse_in>

023ff0b4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff0b4:	4770      	bx	lr
	...

023ff0b8 <_Z17acquireWireBufferv>:
{
 23ff0b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff0ba:	4b0a      	ldr	r3, [pc, #40]	; (23ff0e4 <_Z17acquireWireBufferv+0x2c>)
{
 23ff0bc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff0be:	6003      	str	r3, [r0, #0]
 23ff0c0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff0c2:	4909      	ldr	r1, [pc, #36]	; (23ff0e8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff0c4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff0c6:	2020      	movs	r0, #32
 23ff0c8:	f000 f8f6 	bl	23ff2b8 <_ZnajRKSt9nothrow_t>
	};
 23ff0cc:	2520      	movs	r5, #32
 23ff0ce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff0d0:	4905      	ldr	r1, [pc, #20]	; (23ff0e8 <_Z17acquireWireBufferv+0x30>)
 23ff0d2:	4628      	mov	r0, r5
	};
 23ff0d4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff0d6:	f000 f8ef 	bl	23ff2b8 <_ZnajRKSt9nothrow_t>
	};
 23ff0da:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff0de:	4620      	mov	r0, r4
 23ff0e0:	bd38      	pop	{r3, r4, r5, pc}
 23ff0e2:	bf00      	nop
 23ff0e4:	00010018 	.word	0x00010018
 23ff0e8:	023ffd68 	.word	0x023ffd68

023ff0ec <_Z19__fetch_global_Wirev>:
{
 23ff0ec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff0ee:	4d0e      	ldr	r5, [pc, #56]	; (23ff128 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff0f0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff0f2:	e8d5 1f8f 	ldab	r1, [r5]
 23ff0f6:	f011 0401 	ands.w	r4, r1, #1
 23ff0fa:	d111      	bne.n	23ff120 <_Z19__fetch_global_Wirev+0x34>
 23ff0fc:	4628      	mov	r0, r5
 23ff0fe:	f7fc fe0d 	bl	23fbd1c <__cxa_guard_acquire>
 23ff102:	b168      	cbz	r0, 23ff120 <_Z19__fetch_global_Wirev+0x34>
 23ff104:	4668      	mov	r0, sp
 23ff106:	f7ff ffd7 	bl	23ff0b8 <_Z17acquireWireBufferv>
 23ff10a:	466a      	mov	r2, sp
 23ff10c:	4621      	mov	r1, r4
 23ff10e:	4807      	ldr	r0, [pc, #28]	; (23ff12c <_Z19__fetch_global_Wirev+0x40>)
 23ff110:	f7fd fe24 	bl	23fcd5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff114:	4628      	mov	r0, r5
 23ff116:	f7fc fe06 	bl	23fbd26 <__cxa_guard_release>
 23ff11a:	4805      	ldr	r0, [pc, #20]	; (23ff130 <_Z19__fetch_global_Wirev+0x44>)
 23ff11c:	f000 f9e0 	bl	23ff4e0 <atexit>
	return wire;
}
 23ff120:	4802      	ldr	r0, [pc, #8]	; (23ff12c <_Z19__fetch_global_Wirev+0x40>)
 23ff122:	b007      	add	sp, #28
 23ff124:	bd30      	pop	{r4, r5, pc}
 23ff126:	bf00      	nop
 23ff128:	1007af08 	.word	0x1007af08
 23ff12c:	1007af0c 	.word	0x1007af0c
 23ff130:	023ff0b5 	.word	0x023ff0b5

023ff134 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff134:	4770      	bx	lr
	...

023ff138 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff138:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff13a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff13c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff13e:	462a      	mov	r2, r5
 23ff140:	2100      	movs	r1, #0
 23ff142:	f000 fa02 	bl	23ff54a <memset>
 23ff146:	8025      	strh	r5, [r4, #0]
 23ff148:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff14a:	4907      	ldr	r1, [pc, #28]	; (23ff168 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff14c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff14e:	8125      	strh	r5, [r4, #8]
 23ff150:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff152:	f000 f8b1 	bl	23ff2b8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff156:	4904      	ldr	r1, [pc, #16]	; (23ff168 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff158:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff15a:	4628      	mov	r0, r5
 23ff15c:	f000 f8ac 	bl	23ff2b8 <_ZnajRKSt9nothrow_t>
    };
 23ff160:	60e0      	str	r0, [r4, #12]
}
 23ff162:	4620      	mov	r0, r4
 23ff164:	bd38      	pop	{r3, r4, r5, pc}
 23ff166:	bf00      	nop
 23ff168:	023ffd68 	.word	0x023ffd68

023ff16c <__tcf_2>:
 23ff16c:	4770      	bx	lr

023ff16e <__tcf_1>:
 23ff16e:	4770      	bx	lr

023ff170 <_Z20acquireSerial1Bufferv>:
{
 23ff170:	b510      	push	{r4, lr}
 23ff172:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff174:	f7ff ffe0 	bl	23ff138 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff178:	4620      	mov	r0, r4
 23ff17a:	bd10      	pop	{r4, pc}

023ff17c <_Z20acquireSerial2Bufferv>:
 23ff17c:	b510      	push	{r4, lr}
 23ff17e:	4604      	mov	r4, r0
 23ff180:	f7ff ffda 	bl	23ff138 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff184:	4620      	mov	r0, r4
 23ff186:	bd10      	pop	{r4, pc}

023ff188 <_Z20acquireSerial3Bufferv>:
 23ff188:	b510      	push	{r4, lr}
 23ff18a:	4604      	mov	r4, r0
 23ff18c:	f7ff ffd4 	bl	23ff138 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff190:	4620      	mov	r0, r4
 23ff192:	bd10      	pop	{r4, pc}

023ff194 <_Z22__fetch_global_Serial1v>:
{
 23ff194:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff196:	4d0e      	ldr	r5, [pc, #56]	; (23ff1d0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff198:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff19a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff19e:	f011 0401 	ands.w	r4, r1, #1
 23ff1a2:	d111      	bne.n	23ff1c8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1a4:	4628      	mov	r0, r5
 23ff1a6:	f7fc fdb9 	bl	23fbd1c <__cxa_guard_acquire>
 23ff1aa:	b168      	cbz	r0, 23ff1c8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1ac:	a801      	add	r0, sp, #4
 23ff1ae:	f7ff ffdf 	bl	23ff170 <_Z20acquireSerial1Bufferv>
 23ff1b2:	4621      	mov	r1, r4
 23ff1b4:	aa01      	add	r2, sp, #4
 23ff1b6:	4807      	ldr	r0, [pc, #28]	; (23ff1d4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1b8:	f7ff fd82 	bl	23fecc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1bc:	4628      	mov	r0, r5
 23ff1be:	f7fc fdb2 	bl	23fbd26 <__cxa_guard_release>
 23ff1c2:	4805      	ldr	r0, [pc, #20]	; (23ff1d8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff1c4:	f000 f98c 	bl	23ff4e0 <atexit>
    return serial1;
}
 23ff1c8:	4802      	ldr	r0, [pc, #8]	; (23ff1d4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1ca:	b007      	add	sp, #28
 23ff1cc:	bd30      	pop	{r4, r5, pc}
 23ff1ce:	bf00      	nop
 23ff1d0:	1007af20 	.word	0x1007af20
 23ff1d4:	1007af2c 	.word	0x1007af2c
 23ff1d8:	023ff135 	.word	0x023ff135

023ff1dc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff1dc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1de:	4c0d      	ldr	r4, [pc, #52]	; (23ff214 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff1e0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1e2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1e6:	07db      	lsls	r3, r3, #31
 23ff1e8:	d411      	bmi.n	23ff20e <_Z22__fetch_global_Serial2v+0x32>
 23ff1ea:	4620      	mov	r0, r4
 23ff1ec:	f7fc fd96 	bl	23fbd1c <__cxa_guard_acquire>
 23ff1f0:	b168      	cbz	r0, 23ff20e <_Z22__fetch_global_Serial2v+0x32>
 23ff1f2:	a801      	add	r0, sp, #4
 23ff1f4:	f7ff ffc2 	bl	23ff17c <_Z20acquireSerial2Bufferv>
 23ff1f8:	2101      	movs	r1, #1
 23ff1fa:	aa01      	add	r2, sp, #4
 23ff1fc:	4806      	ldr	r0, [pc, #24]	; (23ff218 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff1fe:	f7ff fd5f 	bl	23fecc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff202:	4620      	mov	r0, r4
 23ff204:	f7fc fd8f 	bl	23fbd26 <__cxa_guard_release>
 23ff208:	4804      	ldr	r0, [pc, #16]	; (23ff21c <_Z22__fetch_global_Serial2v+0x40>)
 23ff20a:	f000 f969 	bl	23ff4e0 <atexit>
	return serial2;
}
 23ff20e:	4802      	ldr	r0, [pc, #8]	; (23ff218 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff210:	b006      	add	sp, #24
 23ff212:	bd10      	pop	{r4, pc}
 23ff214:	1007af24 	.word	0x1007af24
 23ff218:	1007af40 	.word	0x1007af40
 23ff21c:	023ff16f 	.word	0x023ff16f

023ff220 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff220:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff222:	f7ff ffdb 	bl	23ff1dc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff226:	4b07      	ldr	r3, [pc, #28]	; (23ff244 <_Z15serialEventRun2v+0x24>)
 23ff228:	4604      	mov	r4, r0
 23ff22a:	b153      	cbz	r3, 23ff242 <_Z15serialEventRun2v+0x22>
 23ff22c:	f7ff fd66 	bl	23fecfc <_ZN11USARTSerial9isEnabledEv>
 23ff230:	b138      	cbz	r0, 23ff242 <_Z15serialEventRun2v+0x22>
 23ff232:	6823      	ldr	r3, [r4, #0]
 23ff234:	4620      	mov	r0, r4
 23ff236:	691b      	ldr	r3, [r3, #16]
 23ff238:	4798      	blx	r3
 23ff23a:	2800      	cmp	r0, #0
 23ff23c:	dd01      	ble.n	23ff242 <_Z15serialEventRun2v+0x22>
        handler();
 23ff23e:	e000      	b.n	23ff242 <_Z15serialEventRun2v+0x22>
 23ff240:	bf00      	nop
}
 23ff242:	bd10      	pop	{r4, pc}
 23ff244:	00000000 	.word	0x00000000

023ff248 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff248:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff24a:	4c0d      	ldr	r4, [pc, #52]	; (23ff280 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff24c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff24e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff252:	07db      	lsls	r3, r3, #31
 23ff254:	d411      	bmi.n	23ff27a <_Z22__fetch_global_Serial3v+0x32>
 23ff256:	4620      	mov	r0, r4
 23ff258:	f7fc fd60 	bl	23fbd1c <__cxa_guard_acquire>
 23ff25c:	b168      	cbz	r0, 23ff27a <_Z22__fetch_global_Serial3v+0x32>
 23ff25e:	a801      	add	r0, sp, #4
 23ff260:	f7ff ff92 	bl	23ff188 <_Z20acquireSerial3Bufferv>
 23ff264:	2102      	movs	r1, #2
 23ff266:	aa01      	add	r2, sp, #4
 23ff268:	4806      	ldr	r0, [pc, #24]	; (23ff284 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff26a:	f7ff fd29 	bl	23fecc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff26e:	4620      	mov	r0, r4
 23ff270:	f7fc fd59 	bl	23fbd26 <__cxa_guard_release>
 23ff274:	4804      	ldr	r0, [pc, #16]	; (23ff288 <_Z22__fetch_global_Serial3v+0x40>)
 23ff276:	f000 f933 	bl	23ff4e0 <atexit>
	return serial3;
}
 23ff27a:	4802      	ldr	r0, [pc, #8]	; (23ff284 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff27c:	b006      	add	sp, #24
 23ff27e:	bd10      	pop	{r4, pc}
 23ff280:	1007af28 	.word	0x1007af28
 23ff284:	1007af54 	.word	0x1007af54
 23ff288:	023ff16d 	.word	0x023ff16d

023ff28c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff28c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff28e:	f7ff ffdb 	bl	23ff248 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff292:	4b07      	ldr	r3, [pc, #28]	; (23ff2b0 <_Z15serialEventRun3v+0x24>)
 23ff294:	4604      	mov	r4, r0
 23ff296:	b153      	cbz	r3, 23ff2ae <_Z15serialEventRun3v+0x22>
 23ff298:	f7ff fd30 	bl	23fecfc <_ZN11USARTSerial9isEnabledEv>
 23ff29c:	b138      	cbz	r0, 23ff2ae <_Z15serialEventRun3v+0x22>
 23ff29e:	6823      	ldr	r3, [r4, #0]
 23ff2a0:	4620      	mov	r0, r4
 23ff2a2:	691b      	ldr	r3, [r3, #16]
 23ff2a4:	4798      	blx	r3
 23ff2a6:	2800      	cmp	r0, #0
 23ff2a8:	dd01      	ble.n	23ff2ae <_Z15serialEventRun3v+0x22>
        handler();
 23ff2aa:	e000      	b.n	23ff2ae <_Z15serialEventRun3v+0x22>
 23ff2ac:	bf00      	nop
}
 23ff2ae:	bd10      	pop	{r4, pc}
 23ff2b0:	00000000 	.word	0x00000000

023ff2b4 <_ZnwjRKSt9nothrow_t>:
 23ff2b4:	f7fc bd1f 	b.w	23fbcf6 <_Znwj>

023ff2b8 <_ZnajRKSt9nothrow_t>:
 23ff2b8:	f7fc bd1f 	b.w	23fbcfa <_Znaj>

023ff2bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff2bc:	4901      	ldr	r1, [pc, #4]	; (23ff2c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff2be:	f000 b8f9 	b.w	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff2c2:	bf00      	nop
 23ff2c4:	023ffd84 	.word	0x023ffd84

023ff2c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff2c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff2ca:	2400      	movs	r4, #0
 23ff2cc:	2310      	movs	r3, #16
 23ff2ce:	4615      	mov	r5, r2
 23ff2d0:	6812      	ldr	r2, [r2, #0]
 23ff2d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff2d6:	6803      	ldr	r3, [r0, #0]
 23ff2d8:	e9cd 4400 	strd	r4, r4, [sp]
 23ff2dc:	699e      	ldr	r6, [r3, #24]
 23ff2de:	466b      	mov	r3, sp
 23ff2e0:	47b0      	blx	r6
 23ff2e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff2e6:	f003 0306 	and.w	r3, r3, #6
 23ff2ea:	2b06      	cmp	r3, #6
 23ff2ec:	bf05      	ittet	eq
 23ff2ee:	9b00      	ldreq	r3, [sp, #0]
 23ff2f0:	2001      	moveq	r0, #1
 23ff2f2:	4620      	movne	r0, r4
 23ff2f4:	602b      	streq	r3, [r5, #0]
 23ff2f6:	b004      	add	sp, #16
 23ff2f8:	bd70      	pop	{r4, r5, r6, pc}

023ff2fa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff2fa:	9800      	ldr	r0, [sp, #0]
 23ff2fc:	4290      	cmp	r0, r2
 23ff2fe:	bf14      	ite	ne
 23ff300:	2001      	movne	r0, #1
 23ff302:	2006      	moveq	r0, #6
 23ff304:	4770      	bx	lr
	...

023ff308 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff308:	4b03      	ldr	r3, [pc, #12]	; (23ff318 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff30a:	b510      	push	{r4, lr}
 23ff30c:	4604      	mov	r4, r0
 23ff30e:	6003      	str	r3, [r0, #0]
 23ff310:	f000 f8cd 	bl	23ff4ae <_ZNSt9type_infoD1Ev>
 23ff314:	4620      	mov	r0, r4
 23ff316:	bd10      	pop	{r4, pc}
 23ff318:	023ffdc4 	.word	0x023ffdc4

023ff31c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff31c:	b510      	push	{r4, lr}
 23ff31e:	4604      	mov	r4, r0
 23ff320:	f7ff fff2 	bl	23ff308 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff324:	2108      	movs	r1, #8
 23ff326:	4620      	mov	r0, r4
 23ff328:	f7fc fce9 	bl	23fbcfe <_ZdlPvj>
 23ff32c:	4620      	mov	r0, r4
 23ff32e:	bd10      	pop	{r4, pc}

023ff330 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff334:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff338:	461f      	mov	r7, r3
 23ff33a:	4606      	mov	r6, r0
 23ff33c:	4615      	mov	r5, r2
 23ff33e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff342:	4598      	cmp	r8, r3
 23ff344:	d107      	bne.n	23ff356 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff346:	9907      	ldr	r1, [sp, #28]
 23ff348:	f000 f8b4 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff34c:	b118      	cbz	r0, 23ff356 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff34e:	7165      	strb	r5, [r4, #5]
 23ff350:	2000      	movs	r0, #0
 23ff352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff356:	4639      	mov	r1, r7
 23ff358:	4630      	mov	r0, r6
 23ff35a:	f000 f8ab 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff35e:	2800      	cmp	r0, #0
 23ff360:	d0f6      	beq.n	23ff350 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff362:	2301      	movs	r3, #1
 23ff364:	f8c4 8000 	str.w	r8, [r4]
 23ff368:	7125      	strb	r5, [r4, #4]
 23ff36a:	71a3      	strb	r3, [r4, #6]
 23ff36c:	e7f0      	b.n	23ff350 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff36e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff36e:	b538      	push	{r3, r4, r5, lr}
 23ff370:	4615      	mov	r5, r2
 23ff372:	461c      	mov	r4, r3
 23ff374:	f000 f89e 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff378:	b120      	cbz	r0, 23ff384 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff37a:	2308      	movs	r3, #8
 23ff37c:	6025      	str	r5, [r4, #0]
 23ff37e:	60e3      	str	r3, [r4, #12]
 23ff380:	2306      	movs	r3, #6
 23ff382:	7123      	strb	r3, [r4, #4]
 23ff384:	bd38      	pop	{r3, r4, r5, pc}

023ff386 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff388:	4605      	mov	r5, r0
 23ff38a:	460c      	mov	r4, r1
 23ff38c:	461e      	mov	r6, r3
 23ff38e:	9201      	str	r2, [sp, #4]
 23ff390:	f000 f890 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff394:	b950      	cbnz	r0, 23ff3ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff396:	2e03      	cmp	r6, #3
 23ff398:	d808      	bhi.n	23ff3ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff39a:	6823      	ldr	r3, [r4, #0]
 23ff39c:	4629      	mov	r1, r5
 23ff39e:	9a01      	ldr	r2, [sp, #4]
 23ff3a0:	4620      	mov	r0, r4
 23ff3a2:	695b      	ldr	r3, [r3, #20]
 23ff3a4:	b002      	add	sp, #8
 23ff3a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff3aa:	4718      	bx	r3
 23ff3ac:	b002      	add	sp, #8
 23ff3ae:	bd70      	pop	{r4, r5, r6, pc}

023ff3b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff3b0:	4b03      	ldr	r3, [pc, #12]	; (23ff3c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff3b2:	b510      	push	{r4, lr}
 23ff3b4:	4604      	mov	r4, r0
 23ff3b6:	6003      	str	r3, [r0, #0]
 23ff3b8:	f7ff ffa6 	bl	23ff308 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff3bc:	4620      	mov	r0, r4
 23ff3be:	bd10      	pop	{r4, pc}
 23ff3c0:	023ffe24 	.word	0x023ffe24

023ff3c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff3c4:	b510      	push	{r4, lr}
 23ff3c6:	4604      	mov	r4, r0
 23ff3c8:	f7ff fff2 	bl	23ff3b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff3cc:	210c      	movs	r1, #12
 23ff3ce:	4620      	mov	r0, r4
 23ff3d0:	f7fc fc95 	bl	23fbcfe <_ZdlPvj>
 23ff3d4:	4620      	mov	r0, r4
 23ff3d6:	bd10      	pop	{r4, pc}

023ff3d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff3da:	9f08      	ldr	r7, [sp, #32]
 23ff3dc:	4605      	mov	r5, r0
 23ff3de:	460e      	mov	r6, r1
 23ff3e0:	4614      	mov	r4, r2
 23ff3e2:	4297      	cmp	r7, r2
 23ff3e4:	d00a      	beq.n	23ff3fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff3e6:	68a8      	ldr	r0, [r5, #8]
 23ff3e8:	4631      	mov	r1, r6
 23ff3ea:	6802      	ldr	r2, [r0, #0]
 23ff3ec:	9708      	str	r7, [sp, #32]
 23ff3ee:	6a15      	ldr	r5, [r2, #32]
 23ff3f0:	4622      	mov	r2, r4
 23ff3f2:	46ac      	mov	ip, r5
 23ff3f4:	b003      	add	sp, #12
 23ff3f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff3fa:	4760      	bx	ip
 23ff3fc:	4619      	mov	r1, r3
 23ff3fe:	9301      	str	r3, [sp, #4]
 23ff400:	f000 f858 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff404:	9b01      	ldr	r3, [sp, #4]
 23ff406:	2800      	cmp	r0, #0
 23ff408:	d0ed      	beq.n	23ff3e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff40a:	2006      	movs	r0, #6
 23ff40c:	b003      	add	sp, #12
 23ff40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff410:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff414:	460d      	mov	r5, r1
 23ff416:	4619      	mov	r1, r3
 23ff418:	4681      	mov	r9, r0
 23ff41a:	4617      	mov	r7, r2
 23ff41c:	4698      	mov	r8, r3
 23ff41e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff422:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff426:	f000 f845 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff42a:	b190      	cbz	r0, 23ff452 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff42c:	2d00      	cmp	r5, #0
 23ff42e:	6034      	str	r4, [r6, #0]
 23ff430:	7137      	strb	r7, [r6, #4]
 23ff432:	db09      	blt.n	23ff448 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff434:	1961      	adds	r1, r4, r5
 23ff436:	458a      	cmp	sl, r1
 23ff438:	bf0c      	ite	eq
 23ff43a:	2106      	moveq	r1, #6
 23ff43c:	2101      	movne	r1, #1
 23ff43e:	71b1      	strb	r1, [r6, #6]
 23ff440:	2000      	movs	r0, #0
 23ff442:	b001      	add	sp, #4
 23ff444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff448:	3502      	adds	r5, #2
 23ff44a:	d1f9      	bne.n	23ff440 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff44c:	2301      	movs	r3, #1
 23ff44e:	71b3      	strb	r3, [r6, #6]
 23ff450:	e7f6      	b.n	23ff440 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff452:	4554      	cmp	r4, sl
 23ff454:	d106      	bne.n	23ff464 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff456:	4659      	mov	r1, fp
 23ff458:	4648      	mov	r0, r9
 23ff45a:	f000 f82b 	bl	23ff4b4 <_ZNKSt9type_infoeqERKS_>
 23ff45e:	b108      	cbz	r0, 23ff464 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff460:	7177      	strb	r7, [r6, #5]
 23ff462:	e7ed      	b.n	23ff440 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff464:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff468:	463a      	mov	r2, r7
 23ff46a:	4629      	mov	r1, r5
 23ff46c:	6803      	ldr	r3, [r0, #0]
 23ff46e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff472:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff476:	69dc      	ldr	r4, [r3, #28]
 23ff478:	4643      	mov	r3, r8
 23ff47a:	46a4      	mov	ip, r4
 23ff47c:	b001      	add	sp, #4
 23ff47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff482:	4760      	bx	ip

023ff484 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff488:	4607      	mov	r7, r0
 23ff48a:	460c      	mov	r4, r1
 23ff48c:	4615      	mov	r5, r2
 23ff48e:	461e      	mov	r6, r3
 23ff490:	f7ff ff6d 	bl	23ff36e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff494:	b948      	cbnz	r0, 23ff4aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff496:	68b8      	ldr	r0, [r7, #8]
 23ff498:	462a      	mov	r2, r5
 23ff49a:	4621      	mov	r1, r4
 23ff49c:	6803      	ldr	r3, [r0, #0]
 23ff49e:	699f      	ldr	r7, [r3, #24]
 23ff4a0:	4633      	mov	r3, r6
 23ff4a2:	46bc      	mov	ip, r7
 23ff4a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff4a8:	4760      	bx	ip
 23ff4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff4ae <_ZNSt9type_infoD1Ev>:
 23ff4ae:	4770      	bx	lr

023ff4b0 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff4b0:	2000      	movs	r0, #0
 23ff4b2:	4770      	bx	lr

023ff4b4 <_ZNKSt9type_infoeqERKS_>:
 23ff4b4:	4281      	cmp	r1, r0
 23ff4b6:	b508      	push	{r3, lr}
 23ff4b8:	d00e      	beq.n	23ff4d8 <_ZNKSt9type_infoeqERKS_+0x24>
 23ff4ba:	6840      	ldr	r0, [r0, #4]
 23ff4bc:	7803      	ldrb	r3, [r0, #0]
 23ff4be:	2b2a      	cmp	r3, #42	; 0x2a
 23ff4c0:	d00c      	beq.n	23ff4dc <_ZNKSt9type_infoeqERKS_+0x28>
 23ff4c2:	6849      	ldr	r1, [r1, #4]
 23ff4c4:	780b      	ldrb	r3, [r1, #0]
 23ff4c6:	2b2a      	cmp	r3, #42	; 0x2a
 23ff4c8:	bf08      	it	eq
 23ff4ca:	3101      	addeq	r1, #1
 23ff4cc:	f7fc fbe4 	bl	23fbc98 <strcmp>
 23ff4d0:	fab0 f080 	clz	r0, r0
 23ff4d4:	0940      	lsrs	r0, r0, #5
 23ff4d6:	bd08      	pop	{r3, pc}
 23ff4d8:	2001      	movs	r0, #1
 23ff4da:	e7fc      	b.n	23ff4d6 <_ZNKSt9type_infoeqERKS_+0x22>
 23ff4dc:	2000      	movs	r0, #0
 23ff4de:	e7fa      	b.n	23ff4d6 <_ZNKSt9type_infoeqERKS_+0x22>

023ff4e0 <atexit>:
 23ff4e0:	2300      	movs	r3, #0
 23ff4e2:	4601      	mov	r1, r0
 23ff4e4:	461a      	mov	r2, r3
 23ff4e6:	4618      	mov	r0, r3
 23ff4e8:	f000 b93a 	b.w	23ff760 <__register_exitproc>

023ff4ec <isprint>:
 23ff4ec:	4b02      	ldr	r3, [pc, #8]	; (23ff4f8 <isprint+0xc>)
 23ff4ee:	4418      	add	r0, r3
 23ff4f0:	7840      	ldrb	r0, [r0, #1]
 23ff4f2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff4f6:	4770      	bx	lr
 23ff4f8:	023ffecd 	.word	0x023ffecd

023ff4fc <memcpy>:
 23ff4fc:	440a      	add	r2, r1
 23ff4fe:	1e43      	subs	r3, r0, #1
 23ff500:	4291      	cmp	r1, r2
 23ff502:	d100      	bne.n	23ff506 <memcpy+0xa>
 23ff504:	4770      	bx	lr
 23ff506:	b510      	push	{r4, lr}
 23ff508:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff50c:	4291      	cmp	r1, r2
 23ff50e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff512:	d1f9      	bne.n	23ff508 <memcpy+0xc>
 23ff514:	bd10      	pop	{r4, pc}

023ff516 <memmove>:
 23ff516:	4288      	cmp	r0, r1
 23ff518:	b510      	push	{r4, lr}
 23ff51a:	eb01 0402 	add.w	r4, r1, r2
 23ff51e:	d902      	bls.n	23ff526 <memmove+0x10>
 23ff520:	4284      	cmp	r4, r0
 23ff522:	4623      	mov	r3, r4
 23ff524:	d807      	bhi.n	23ff536 <memmove+0x20>
 23ff526:	1e43      	subs	r3, r0, #1
 23ff528:	42a1      	cmp	r1, r4
 23ff52a:	d008      	beq.n	23ff53e <memmove+0x28>
 23ff52c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff530:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff534:	e7f8      	b.n	23ff528 <memmove+0x12>
 23ff536:	4402      	add	r2, r0
 23ff538:	4601      	mov	r1, r0
 23ff53a:	428a      	cmp	r2, r1
 23ff53c:	d100      	bne.n	23ff540 <memmove+0x2a>
 23ff53e:	bd10      	pop	{r4, pc}
 23ff540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff544:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff548:	e7f7      	b.n	23ff53a <memmove+0x24>

023ff54a <memset>:
 23ff54a:	4402      	add	r2, r0
 23ff54c:	4603      	mov	r3, r0
 23ff54e:	4293      	cmp	r3, r2
 23ff550:	d100      	bne.n	23ff554 <memset+0xa>
 23ff552:	4770      	bx	lr
 23ff554:	f803 1b01 	strb.w	r1, [r3], #1
 23ff558:	e7f9      	b.n	23ff54e <memset+0x4>
	...

023ff55c <srand>:
 23ff55c:	b538      	push	{r3, r4, r5, lr}
 23ff55e:	4b10      	ldr	r3, [pc, #64]	; (23ff5a0 <srand+0x44>)
 23ff560:	4604      	mov	r4, r0
 23ff562:	681d      	ldr	r5, [r3, #0]
 23ff564:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff566:	b9b3      	cbnz	r3, 23ff596 <srand+0x3a>
 23ff568:	2018      	movs	r0, #24
 23ff56a:	f7fd fae3 	bl	23fcb34 <malloc>
 23ff56e:	4602      	mov	r2, r0
 23ff570:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff572:	b920      	cbnz	r0, 23ff57e <srand+0x22>
 23ff574:	4b0b      	ldr	r3, [pc, #44]	; (23ff5a4 <srand+0x48>)
 23ff576:	2142      	movs	r1, #66	; 0x42
 23ff578:	480b      	ldr	r0, [pc, #44]	; (23ff5a8 <srand+0x4c>)
 23ff57a:	f7fd fb21 	bl	23fcbc0 <__assert_func>
 23ff57e:	490b      	ldr	r1, [pc, #44]	; (23ff5ac <srand+0x50>)
 23ff580:	4b0b      	ldr	r3, [pc, #44]	; (23ff5b0 <srand+0x54>)
 23ff582:	e9c0 1300 	strd	r1, r3, [r0]
 23ff586:	4b0b      	ldr	r3, [pc, #44]	; (23ff5b4 <srand+0x58>)
 23ff588:	2100      	movs	r1, #0
 23ff58a:	6083      	str	r3, [r0, #8]
 23ff58c:	230b      	movs	r3, #11
 23ff58e:	8183      	strh	r3, [r0, #12]
 23ff590:	2001      	movs	r0, #1
 23ff592:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff596:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff598:	2200      	movs	r2, #0
 23ff59a:	611c      	str	r4, [r3, #16]
 23ff59c:	615a      	str	r2, [r3, #20]
 23ff59e:	bd38      	pop	{r3, r4, r5, pc}
 23ff5a0:	1007ac94 	.word	0x1007ac94
 23ff5a4:	023ffe5d 	.word	0x023ffe5d
 23ff5a8:	023ffe74 	.word	0x023ffe74
 23ff5ac:	abcd330e 	.word	0xabcd330e
 23ff5b0:	e66d1234 	.word	0xe66d1234
 23ff5b4:	0005deec 	.word	0x0005deec

023ff5b8 <strchr>:
 23ff5b8:	b2c9      	uxtb	r1, r1
 23ff5ba:	4603      	mov	r3, r0
 23ff5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff5c0:	b11a      	cbz	r2, 23ff5ca <strchr+0x12>
 23ff5c2:	428a      	cmp	r2, r1
 23ff5c4:	d1f9      	bne.n	23ff5ba <strchr+0x2>
 23ff5c6:	4618      	mov	r0, r3
 23ff5c8:	4770      	bx	lr
 23ff5ca:	2900      	cmp	r1, #0
 23ff5cc:	bf18      	it	ne
 23ff5ce:	2300      	movne	r3, #0
 23ff5d0:	e7f9      	b.n	23ff5c6 <strchr+0xe>

023ff5d2 <strchrnul>:
 23ff5d2:	b510      	push	{r4, lr}
 23ff5d4:	4604      	mov	r4, r0
 23ff5d6:	f7ff ffef 	bl	23ff5b8 <strchr>
 23ff5da:	b918      	cbnz	r0, 23ff5e4 <strchrnul+0x12>
 23ff5dc:	4620      	mov	r0, r4
 23ff5de:	f7fc fb65 	bl	23fbcac <strlen>
 23ff5e2:	4420      	add	r0, r4
 23ff5e4:	bd10      	pop	{r4, pc}

023ff5e6 <strcpy>:
 23ff5e6:	4603      	mov	r3, r0
 23ff5e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff5ec:	f803 2b01 	strb.w	r2, [r3], #1
 23ff5f0:	2a00      	cmp	r2, #0
 23ff5f2:	d1f9      	bne.n	23ff5e8 <strcpy+0x2>
 23ff5f4:	4770      	bx	lr

023ff5f6 <strncmp>:
 23ff5f6:	b510      	push	{r4, lr}
 23ff5f8:	b17a      	cbz	r2, 23ff61a <strncmp+0x24>
 23ff5fa:	4603      	mov	r3, r0
 23ff5fc:	3901      	subs	r1, #1
 23ff5fe:	1884      	adds	r4, r0, r2
 23ff600:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff604:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff608:	4290      	cmp	r0, r2
 23ff60a:	d101      	bne.n	23ff610 <strncmp+0x1a>
 23ff60c:	42a3      	cmp	r3, r4
 23ff60e:	d101      	bne.n	23ff614 <strncmp+0x1e>
 23ff610:	1a80      	subs	r0, r0, r2
 23ff612:	bd10      	pop	{r4, pc}
 23ff614:	2800      	cmp	r0, #0
 23ff616:	d1f3      	bne.n	23ff600 <strncmp+0xa>
 23ff618:	e7fa      	b.n	23ff610 <strncmp+0x1a>
 23ff61a:	4610      	mov	r0, r2
 23ff61c:	e7f9      	b.n	23ff612 <strncmp+0x1c>

023ff61e <strrchr>:
 23ff61e:	b538      	push	{r3, r4, r5, lr}
 23ff620:	4603      	mov	r3, r0
 23ff622:	460c      	mov	r4, r1
 23ff624:	b969      	cbnz	r1, 23ff642 <strrchr+0x24>
 23ff626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff62a:	f7ff bfc5 	b.w	23ff5b8 <strchr>
 23ff62e:	1c43      	adds	r3, r0, #1
 23ff630:	4605      	mov	r5, r0
 23ff632:	4621      	mov	r1, r4
 23ff634:	4618      	mov	r0, r3
 23ff636:	f7ff ffbf 	bl	23ff5b8 <strchr>
 23ff63a:	2800      	cmp	r0, #0
 23ff63c:	d1f7      	bne.n	23ff62e <strrchr+0x10>
 23ff63e:	4628      	mov	r0, r5
 23ff640:	bd38      	pop	{r3, r4, r5, pc}
 23ff642:	2500      	movs	r5, #0
 23ff644:	e7f5      	b.n	23ff632 <strrchr+0x14>
	...

023ff648 <_strtol_l.constprop.0>:
 23ff648:	2b01      	cmp	r3, #1
 23ff64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff64e:	d001      	beq.n	23ff654 <_strtol_l.constprop.0+0xc>
 23ff650:	2b24      	cmp	r3, #36	; 0x24
 23ff652:	d906      	bls.n	23ff662 <_strtol_l.constprop.0+0x1a>
 23ff654:	f7fd faa6 	bl	23fcba4 <__errno>
 23ff658:	2316      	movs	r3, #22
 23ff65a:	6003      	str	r3, [r0, #0]
 23ff65c:	2000      	movs	r0, #0
 23ff65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff662:	460d      	mov	r5, r1
 23ff664:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff748 <_strtol_l.constprop.0+0x100>
 23ff668:	462e      	mov	r6, r5
 23ff66a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff66e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff672:	f017 0708 	ands.w	r7, r7, #8
 23ff676:	d1f7      	bne.n	23ff668 <_strtol_l.constprop.0+0x20>
 23ff678:	2c2d      	cmp	r4, #45	; 0x2d
 23ff67a:	d132      	bne.n	23ff6e2 <_strtol_l.constprop.0+0x9a>
 23ff67c:	782c      	ldrb	r4, [r5, #0]
 23ff67e:	2701      	movs	r7, #1
 23ff680:	1cb5      	adds	r5, r6, #2
 23ff682:	2b00      	cmp	r3, #0
 23ff684:	d05b      	beq.n	23ff73e <_strtol_l.constprop.0+0xf6>
 23ff686:	2b10      	cmp	r3, #16
 23ff688:	d109      	bne.n	23ff69e <_strtol_l.constprop.0+0x56>
 23ff68a:	2c30      	cmp	r4, #48	; 0x30
 23ff68c:	d107      	bne.n	23ff69e <_strtol_l.constprop.0+0x56>
 23ff68e:	782c      	ldrb	r4, [r5, #0]
 23ff690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff694:	2c58      	cmp	r4, #88	; 0x58
 23ff696:	d14d      	bne.n	23ff734 <_strtol_l.constprop.0+0xec>
 23ff698:	786c      	ldrb	r4, [r5, #1]
 23ff69a:	2310      	movs	r3, #16
 23ff69c:	3502      	adds	r5, #2
 23ff69e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff6a2:	f04f 0c00 	mov.w	ip, #0
 23ff6a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff6aa:	4666      	mov	r6, ip
 23ff6ac:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff6b0:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff6b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff6b8:	f1be 0f09 	cmp.w	lr, #9
 23ff6bc:	d816      	bhi.n	23ff6ec <_strtol_l.constprop.0+0xa4>
 23ff6be:	4674      	mov	r4, lr
 23ff6c0:	42a3      	cmp	r3, r4
 23ff6c2:	dd24      	ble.n	23ff70e <_strtol_l.constprop.0+0xc6>
 23ff6c4:	f1bc 0f00 	cmp.w	ip, #0
 23ff6c8:	db1e      	blt.n	23ff708 <_strtol_l.constprop.0+0xc0>
 23ff6ca:	45b1      	cmp	r9, r6
 23ff6cc:	d31c      	bcc.n	23ff708 <_strtol_l.constprop.0+0xc0>
 23ff6ce:	d101      	bne.n	23ff6d4 <_strtol_l.constprop.0+0x8c>
 23ff6d0:	45a2      	cmp	sl, r4
 23ff6d2:	db19      	blt.n	23ff708 <_strtol_l.constprop.0+0xc0>
 23ff6d4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff6d8:	f04f 0c01 	mov.w	ip, #1
 23ff6dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff6e0:	e7e8      	b.n	23ff6b4 <_strtol_l.constprop.0+0x6c>
 23ff6e2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff6e4:	bf04      	itt	eq
 23ff6e6:	782c      	ldrbeq	r4, [r5, #0]
 23ff6e8:	1cb5      	addeq	r5, r6, #2
 23ff6ea:	e7ca      	b.n	23ff682 <_strtol_l.constprop.0+0x3a>
 23ff6ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff6f0:	f1be 0f19 	cmp.w	lr, #25
 23ff6f4:	d801      	bhi.n	23ff6fa <_strtol_l.constprop.0+0xb2>
 23ff6f6:	3c37      	subs	r4, #55	; 0x37
 23ff6f8:	e7e2      	b.n	23ff6c0 <_strtol_l.constprop.0+0x78>
 23ff6fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff6fe:	f1be 0f19 	cmp.w	lr, #25
 23ff702:	d804      	bhi.n	23ff70e <_strtol_l.constprop.0+0xc6>
 23ff704:	3c57      	subs	r4, #87	; 0x57
 23ff706:	e7db      	b.n	23ff6c0 <_strtol_l.constprop.0+0x78>
 23ff708:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff70c:	e7e6      	b.n	23ff6dc <_strtol_l.constprop.0+0x94>
 23ff70e:	f1bc 0f00 	cmp.w	ip, #0
 23ff712:	da05      	bge.n	23ff720 <_strtol_l.constprop.0+0xd8>
 23ff714:	2322      	movs	r3, #34	; 0x22
 23ff716:	4646      	mov	r6, r8
 23ff718:	6003      	str	r3, [r0, #0]
 23ff71a:	b942      	cbnz	r2, 23ff72e <_strtol_l.constprop.0+0xe6>
 23ff71c:	4630      	mov	r0, r6
 23ff71e:	e79e      	b.n	23ff65e <_strtol_l.constprop.0+0x16>
 23ff720:	b107      	cbz	r7, 23ff724 <_strtol_l.constprop.0+0xdc>
 23ff722:	4276      	negs	r6, r6
 23ff724:	2a00      	cmp	r2, #0
 23ff726:	d0f9      	beq.n	23ff71c <_strtol_l.constprop.0+0xd4>
 23ff728:	f1bc 0f00 	cmp.w	ip, #0
 23ff72c:	d000      	beq.n	23ff730 <_strtol_l.constprop.0+0xe8>
 23ff72e:	1e69      	subs	r1, r5, #1
 23ff730:	6011      	str	r1, [r2, #0]
 23ff732:	e7f3      	b.n	23ff71c <_strtol_l.constprop.0+0xd4>
 23ff734:	2430      	movs	r4, #48	; 0x30
 23ff736:	2b00      	cmp	r3, #0
 23ff738:	d1b1      	bne.n	23ff69e <_strtol_l.constprop.0+0x56>
 23ff73a:	2308      	movs	r3, #8
 23ff73c:	e7af      	b.n	23ff69e <_strtol_l.constprop.0+0x56>
 23ff73e:	2c30      	cmp	r4, #48	; 0x30
 23ff740:	d0a5      	beq.n	23ff68e <_strtol_l.constprop.0+0x46>
 23ff742:	230a      	movs	r3, #10
 23ff744:	e7ab      	b.n	23ff69e <_strtol_l.constprop.0+0x56>
 23ff746:	bf00      	nop
 23ff748:	023ffece 	.word	0x023ffece

023ff74c <strtol>:
 23ff74c:	4613      	mov	r3, r2
 23ff74e:	460a      	mov	r2, r1
 23ff750:	4601      	mov	r1, r0
 23ff752:	4802      	ldr	r0, [pc, #8]	; (23ff75c <strtol+0x10>)
 23ff754:	6800      	ldr	r0, [r0, #0]
 23ff756:	f7ff bf77 	b.w	23ff648 <_strtol_l.constprop.0>
 23ff75a:	bf00      	nop
 23ff75c:	1007ac94 	.word	0x1007ac94

023ff760 <__register_exitproc>:
 23ff760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff764:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff824 <__register_exitproc+0xc4>
 23ff768:	4606      	mov	r6, r0
 23ff76a:	461f      	mov	r7, r3
 23ff76c:	460d      	mov	r5, r1
 23ff76e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff772:	4691      	mov	r9, r2
 23ff774:	f000 f858 	bl	23ff828 <__retarget_lock_acquire_recursive>
 23ff778:	4b26      	ldr	r3, [pc, #152]	; (23ff814 <__register_exitproc+0xb4>)
 23ff77a:	681c      	ldr	r4, [r3, #0]
 23ff77c:	b934      	cbnz	r4, 23ff78c <__register_exitproc+0x2c>
 23ff77e:	4c26      	ldr	r4, [pc, #152]	; (23ff818 <__register_exitproc+0xb8>)
 23ff780:	601c      	str	r4, [r3, #0]
 23ff782:	4b26      	ldr	r3, [pc, #152]	; (23ff81c <__register_exitproc+0xbc>)
 23ff784:	b113      	cbz	r3, 23ff78c <__register_exitproc+0x2c>
 23ff786:	681b      	ldr	r3, [r3, #0]
 23ff788:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff78c:	6863      	ldr	r3, [r4, #4]
 23ff78e:	2b1f      	cmp	r3, #31
 23ff790:	dd07      	ble.n	23ff7a2 <__register_exitproc+0x42>
 23ff792:	f8d8 0000 	ldr.w	r0, [r8]
 23ff796:	f000 f849 	bl	23ff82c <__retarget_lock_release_recursive>
 23ff79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff7a2:	b35e      	cbz	r6, 23ff7fc <__register_exitproc+0x9c>
 23ff7a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff7a8:	b988      	cbnz	r0, 23ff7ce <__register_exitproc+0x6e>
 23ff7aa:	4b1d      	ldr	r3, [pc, #116]	; (23ff820 <__register_exitproc+0xc0>)
 23ff7ac:	b923      	cbnz	r3, 23ff7b8 <__register_exitproc+0x58>
 23ff7ae:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7b2:	f000 f83a 	bl	23ff82a <__retarget_lock_release>
 23ff7b6:	e7f0      	b.n	23ff79a <__register_exitproc+0x3a>
 23ff7b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff7bc:	f7fd f9ba 	bl	23fcb34 <malloc>
 23ff7c0:	2800      	cmp	r0, #0
 23ff7c2:	d0f4      	beq.n	23ff7ae <__register_exitproc+0x4e>
 23ff7c4:	2300      	movs	r3, #0
 23ff7c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff7ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff7ce:	6863      	ldr	r3, [r4, #4]
 23ff7d0:	2201      	movs	r2, #1
 23ff7d2:	2e02      	cmp	r6, #2
 23ff7d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff7d8:	fa02 f203 	lsl.w	r2, r2, r3
 23ff7dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff7e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff7e4:	ea43 0302 	orr.w	r3, r3, r2
 23ff7e8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff7ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff7f0:	bf02      	ittt	eq
 23ff7f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff7f6:	4313      	orreq	r3, r2
 23ff7f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff7fc:	6863      	ldr	r3, [r4, #4]
 23ff7fe:	f8d8 0000 	ldr.w	r0, [r8]
 23ff802:	1c5a      	adds	r2, r3, #1
 23ff804:	3302      	adds	r3, #2
 23ff806:	6062      	str	r2, [r4, #4]
 23ff808:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff80c:	f000 f80e 	bl	23ff82c <__retarget_lock_release_recursive>
 23ff810:	2000      	movs	r0, #0
 23ff812:	e7c4      	b.n	23ff79e <__register_exitproc+0x3e>
 23ff814:	1007aff4 	.word	0x1007aff4
 23ff818:	1007af68 	.word	0x1007af68
 23ff81c:	00000000 	.word	0x00000000
 23ff820:	023fcb35 	.word	0x023fcb35
 23ff824:	1007acf8 	.word	0x1007acf8

023ff828 <__retarget_lock_acquire_recursive>:
 23ff828:	4770      	bx	lr

023ff82a <__retarget_lock_release>:
 23ff82a:	4770      	bx	lr

023ff82c <__retarget_lock_release_recursive>:
 23ff82c:	4770      	bx	lr
	...

023ff830 <dynalib_user>:
 23ff830:	bcbd 023f bce5 023f bce9 023f 0000 0000     ..?...?...?.....
 23ff840:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff850:	7574 6c61 5400 6568 6420 7369 6174 636e     tual.The distanc
 23ff860:	2065 6f74 6f20 7362 6174 6c63 7365 6920     e to obstacles i
 23ff870:	206e 7266 6e6f 2074 666f 7520 746c 6172     n front of ultra
 23ff880:	6f73 696e 3163 6920 3a73 2520 2e30 6632     sonic1 is: %0.2f
 23ff890:	6920 636e 6568 0a73 5400 6568 6420 7369      inches..The dis
 23ff8a0:	6174 636e 2065 6f74 6f20 7362 6174 6c63     tance to obstacl
 23ff8b0:	7365 6920 206e 7266 6e6f 2074 666f 7520     es in front of u
 23ff8c0:	746c 6172 6f73 696e 3263 6920 3a73 2520     ltrasonic2 is: %
 23ff8d0:	2e30 6632 6920 636e 6568 0a73 5400 6568     0.2f inches..The
 23ff8e0:	6420 7369 6174 636e 2065 6f74 6f20 7362      distance to obs
 23ff8f0:	6174 6c63 7365 6920 206e 7266 6e6f 2074     tacles in front 
 23ff900:	666f 7520 746c 6172 6f73 696e 3163 6920     of ultrasonic1 i
 23ff910:	3a73 2520 2e30 6632 6320 0a6d 5400 6568     s: %0.2f cm..The
 23ff920:	6420 7369 6174 636e 2065 6f74 6f20 7362      distance to obs
 23ff930:	6174 6c63 7365 6920 206e 7266 6e6f 2074     tacles in front 
 23ff940:	666f 7520 746c 6172 6f73 696e 3263 6920     of ultrasonic2 i
 23ff950:	3a73 2520 2e30 6632 6320 0a6d 6400 6e65     s: %0.2f cm..den
 23ff960:	6576 5f72 7570 6b63 7265 6900 2e6f 6461     ver_pucker.io.ad
 23ff970:	6661 7572 7469 632e 6d6f 6100 6f69 445f     afruit.com.aio_D
 23ff980:	586c 3076 6a36 7941 614a 357a 734e 3556     lXv06jAyJaz5NsV5
 23ff990:	316a 4a48 5435 5658 4c4b 0075 6564 766e     j1HJ5TXVKLu.denv
 23ff9a0:	7265 705f 6375 656b 2f72 6566 6465 2f73     er_pucker/feeds/
 23ff9b0:	7073 6565 0064 6564 766e 7265 705f 6375     speed.denver_puc
 23ff9c0:	656b 2f72 6566 6465 2f73 6f63 6e75 6574     ker/feeds/counte
 23ff9d0:	0072 0000                                   r...

023ff9d4 <_ZTVN5spark10LogHandlerE>:
	...
 23ff9e4:	bd05 023f bd2d 023f                         ..?.-.?.

023ff9ec <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff9f4:	bd31 023f bd65 023f dead 023f e055 023f     1.?.e.?...?.U.?.

023ffa04 <_ZTV13Adafruit_MQTT>:
	...
 23ffa14:	bd05 023f bd05 023f bd05 023f bd05 023f     ..?...?...?...?.
 23ffa24:	bd05 023f                                   ..?.

023ffa28 <_ZTV19Adafruit_MQTT_SPARK>:
	...
 23ffa30:	c17b 023f c207 023f c127 023f c1d5 023f     {.?...?.'.?...?.
 23ffa40:	c215 023f c13b 023f c17d 023f               ..?.;.?.}.?.

023ffa4c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffa54 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa5c:	cce7 023f ccdd 023f ccd3 023f ccc9 023f     ..?...?...?...?.
 23ffa6c:	ccbd 023f ccb1 023f e241 023f e249 023f     ..?...?.A.?.I.?.
 23ffa7c:	cca5 023f cc9d 023f cc93 023f cc89 023f     ..?...?...?...?.
 23ffa8c:	e371 023f e279 023f e281 023f               q.?.y.?...?.

023ffa98 <_ZTV7TwoWire>:
	...
 23ffaa0:	cd05 023f cd4f 023f cd27 023f cd07 023f     ..?.O.?.'.?...?.
 23ffab0:	cd2f 023f cd37 023f cd3f 023f cd47 023f     /.?.7.?.?.?.G.?.
 23ffac0:	e4ef 023f                                   ..?.

023ffac4 <_ZTV9IPAddress>:
	...
 23ffacc:	cdc5 023f cdb5 023f cdb7 023f 7525 7500     ..?...?...?.%u.u
 23ffadc:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
 23ffaec:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
 23ffafc:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 23ffb0c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 23ffb1c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffb2c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffb3c:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
 23ffb4c:	7465 6961 006c 0000                         etail...

023ffb54 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb5c:	d32d 023f d353 023f d305 023f ceff 023f     -.?.S.?...?...?.

023ffb6c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb74:	d7b9 023f d7d1 023f dead 023f e055 023f     ..?...?...?.U.?.

023ffb84 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffb8c:	d7e5 023f d7f9 023f e08d 023f d319 023f     ..?...?...?...?.

023ffb9c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffba4:	d32b 023f d361 023f de11 023f d31b 023f     +.?.a.?...?...?.

023ffbb4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbbc:	d329 023f d36f 023f d721 023f d391 023f     ).?.o.?.!.?...?.

023ffbcc <CSWTCH.109>:
 23ffbcc:	ae50 1007 aee8 1007 aea4 1007               P...........

023ffbd8 <_ZTVN5spark12NetworkClassE>:
	...
 23ffbe0:	e201 023f e20b 023f e215 023f e21f 023f     ..?...?...?...?.
 23ffbf0:	e229 023f e235 023f e241 023f e249 023f     ).?.5.?.A.?.I.?.
 23ffc00:	e251 023f e25d 023f e265 023f e26f 023f     Q.?.].?.e.?.o.?.
 23ffc10:	e371 023f e279 023f e281 023f 6977 6972     q.?.y.?...?.wiri
 23ffc20:	676e 7200 6365 2076 7265 6f72 2072 203d     ng.recv error = 
 23ffc30:	6425 0000                                   %d..

023ffc34 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc3c:	e6dd 023f e701 023f ec2b 023f e70f 023f     ..?...?.+.?...?.
 23ffc4c:	e6e1 023f                                   ..?.

023ffc50 <_ZTV9TCPClient>:
	...
 23ffc58:	e78d 023f e7c1 023f e659 023f e673 023f     ..?...?.Y.?.s.?.
 23ffc68:	eac1 023f e69d 023f e93f 023f e6d1 023f     ..?...?.?.?...?.
 23ffc78:	e4ef 023f e9d1 023f e811 023f e96d 023f     ..?...?...?.m.?.
 23ffc88:	eb75 023f e90d 023f e6d3 023f e685 023f     u.?...?...?...?.
 23ffc98:	e715 023f e7f1 023f 5925 252d 2d6d 6425     ..?...?.%Y-%m-%d
 23ffca8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffcb8:	6d69 0065                                   ime.

023ffcbc <_ZTV11USARTSerial>:
	...
 23ffcc4:	ec45 023f ecb1 023f ec89 023f e399 023f     E.?...?...?...?.
 23ffcd4:	ec59 023f ec75 023f ec67 023f ec83 023f     Y.?.u.?.g.?...?.
 23ffce4:	e4ef 023f ec47 023f ec4b 023f               ..?.G.?.K.?.

023ffcf0 <_ZTV9USBSerial>:
	...
 23ffcf8:	ed09 023f ed71 023f ed47 023f e399 023f     ..?.q.?.G.?...?.
 23ffd08:	ed39 023f ed0b 023f ed1b 023f ed6b 023f     9.?...?...?.k.?.
 23ffd18:	e4ef 023f ed2b 023f ed03 023f               ..?.+.?...?.

023ffd24 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd2c:	ee73 023f ee69 023f ee5f 023f ee15 023f     s.?.i.?._.?...?.
 23ffd3c:	ee53 023f ee47 023f e241 023f e249 023f     S.?.G.?.A.?.I.?.
 23ffd4c:	ee3b 023f ee33 023f ee29 023f ee1f 023f     ;.?.3.?.).?...?.
 23ffd5c:	e371 023f e279 023f e281 023f               q.?.y.?...?.

023ffd68 <_ZSt7nothrow>:
	...

023ffd69 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd69:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 23ffd79:	6572 5f64 6174 0067 0000                     red_tag....

023ffd84 <_ZTISt19_Sp_make_shared_tag>:
 23ffd84:	fdc4 023f fd69 023f                         ..?.i.?.

023ffd8c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd8c:	fe24 023f fd98 023f fe48 023f               $.?...?.H.?.

023ffd98 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd98:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 23ffda8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 23ffdb8:	0045 0000                                   E...

023ffdbc <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffdbc:	0000 0000 fd8c 023f f309 023f f31d 023f     ......?...?...?.
 23ffdcc:	f4b1 023f f4b1 023f f387 023f f2c9 023f     ..?...?...?...?.
 23ffddc:	f36f 023f f331 023f f2fb 023f               o.?.1.?...?.

023ffde8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffde8:	fe24 023f fdf4 023f fd8c 023f               $.?...?...?.

023ffdf4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdf4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 23ffe04:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 23ffe14:	666e 456f 0000 0000                         nfoE....

023ffe1c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffe1c:	0000 0000 fde8 023f f3b1 023f f3c5 023f     ......?...?...?.
 23ffe2c:	f4b1 023f f4b1 023f f387 023f f2c9 023f     ..?...?...?...?.
 23ffe3c:	f485 023f f411 023f f3d9 023f               ..?...?...?.

023ffe48 <_ZTISt9type_info>:
 23ffe48:	fdc4 023f fe50 023f                         ..?.P.?.

023ffe50 <_ZTSSt9type_info>:
 23ffe50:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
 23ffe60:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
 23ffe70:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
 23ffe80:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
 23ffe90:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
 23ffea0:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
 23ffeb0:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
 23ffec0:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

023ffecd <_ctype_>:
 23ffecd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffedd:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fbfbd 	.word	0x023fbfbd
 23fffd4:	023fcc79 	.word	0x023fcc79
 23fffd8:	023fccf1 	.word	0x023fccf1
 23fffdc:	023fcd99 	.word	0x023fcd99
 23fffe0:	023fde9d 	.word	0x023fde9d
 23fffe4:	023fe385 	.word	0x023fe385
 23fffe8:	023fe4a5 	.word	0x023fe4a5
 23fffec:	023fe635 	.word	0x023fe635
 23ffff0:	023fec31 	.word	0x023fec31
 23ffff4:	023fee7d 	.word	0x023fee7d
